!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=26)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this._events=this._events||{}}return t.prototype.on=function(t,e){this._events[t]=this._events[t]||[],this._events[t].push(e)},t.prototype.addDisposableListener=function(t,e){var n=this;return this.on(t,e),{dispose:function(){e&&(n.off(t,e),e=null)}}},t.prototype.off=function(t,e){if(this._events[t])for(var n=this._events[t],r=n.length;r--;)if(n[r]===e)return void n.splice(r,1)},t.prototype.removeAllListeners=function(t){this._events[t]&&delete this._events[t]},t.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(this._events[t])for(var r=this._events[t],i=0;i<r.length;i++)r[i].apply(this,e)},t.prototype.listeners=function(t){return this._events[t]||[]},t.prototype.dispose=function(){this._events={}},t}();e.EventEmitter=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(60),s=n(0);e.CHAR_DATA_ATTR_INDEX=0,e.CHAR_DATA_CHAR_INDEX=1,e.CHAR_DATA_WIDTH_INDEX=2,e.CHAR_DATA_CODE_INDEX=3,e.MAX_BUFFER_SIZE=4294967295;var a=function(){function t(t,e){this._terminal=t,this._hasScrollback=e,this.markers=[],this.clear()}return Object.defineProperty(t.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._terminal.rows},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isCursorInViewport",{get:function(){var t=this.ybase+this.y-this.ydisp;return t>=0&&t<this._terminal.rows},enumerable:!0,configurable:!0}),t.prototype._getCorrectBufferLength=function(t){if(!this._hasScrollback)return t;var n=t+this._terminal.options.scrollback;return n>e.MAX_BUFFER_SIZE?e.MAX_BUFFER_SIZE:n},t.prototype.fillViewportRows=function(){if(0===this.lines.length)for(var t=this._terminal.rows;t--;)this.lines.push(this._terminal.blankLine())},t.prototype.clear=function(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new o.CircularList(this._getCorrectBufferLength(this._terminal.rows)),this.scrollTop=0,this.scrollBottom=this._terminal.rows-1,this.setupTabStops()},t.prototype.resize=function(t,e){var n=this._getCorrectBufferLength(e);if(n>this.lines.maxLength&&(this.lines.maxLength=n),this.lines.length>0){if(this._terminal.cols<t)for(var r=[this._terminal.defAttr," ",1,32],i=0;i<this.lines.length;i++)for(;this.lines.get(i).length<t;)this.lines.get(i).push(r);var o=0;if(this._terminal.rows<e)for(var s=this._terminal.rows;s<e;s++)this.lines.length<e+this.ybase&&(this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1?(this.ybase--,o++,this.ydisp>0&&this.ydisp--):this.lines.push(this._terminal.blankLine(void 0,void 0,t)));else for(s=this._terminal.rows;s>e;s--)this.lines.length>e+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(n<this.lines.maxLength){var a=this.lines.length-n;a>0&&(this.lines.trimStart(a),this.ybase=Math.max(this.ybase-a,0),this.ydisp=Math.max(this.ydisp-a,0)),this.lines.maxLength=n}this.x=Math.min(this.x,t-1),this.y=Math.min(this.y,e-1),o&&(this.y+=o),this.savedY=Math.min(this.savedY,e-1),this.savedX=Math.min(this.savedX,t-1),this.scrollTop=0}this.scrollBottom=e-1},t.prototype.translateBufferLineToString=function(t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=null);var o="",s=this.lines.get(t);if(!s)return"";var a=r;null===i&&(i=s.length);for(var l=i,u=0;u<s.length;u++){var c=s[u];o+=c[e.CHAR_DATA_CHAR_INDEX],0===c[e.CHAR_DATA_WIDTH_INDEX]?(r>=u&&a--,i>=u&&l--):c[e.CHAR_DATA_CHAR_INDEX].length>1&&(r>u&&(a+=c[e.CHAR_DATA_CHAR_INDEX].length-1),i>u&&(l+=c[e.CHAR_DATA_CHAR_INDEX].length-1))}if(n){var h=o.search(/\s+$/);if(-1!==h&&(l=Math.min(l,h)),l<=a)return""}return o.substring(a,l)},t.prototype.setupTabStops=function(t){for(null!=t?this.tabs[t]||(t=this.prevStop(t)):(this.tabs={},t=0);t<this._terminal.cols;t+=this._terminal.options.tabStopWidth)this.tabs[t]=!0},t.prototype.prevStop=function(t){for(null==t&&(t=this.x);!this.tabs[--t]&&t>0;);return t>=this._terminal.cols?this._terminal.cols-1:t<0?0:t},t.prototype.nextStop=function(t){for(null==t&&(t=this.x);!this.tabs[++t]&&t<this._terminal.cols;);return t>=this._terminal.cols?this._terminal.cols-1:t<0?0:t},t.prototype.addMarker=function(t){var e=this,n=new l(t);return this.markers.push(n),n.disposables.push(this.lines.addDisposableListener("trim",function(t){n.line-=t,n.line<0&&n.dispose()})),n.on("dispose",function(){return e._removeMarker(n)}),n},t.prototype._removeMarker=function(t){this.markers.splice(this.markers.indexOf(t),1)},t}();e.Buffer=a;var l=function(t){function e(n){var r=t.call(this)||this;return r.line=n,r._id=e.NEXT_ID++,r.isDisposed=!1,r.disposables=[],r}return i(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.disposables.forEach(function(t){return t.dispose()}),this.disposables.length=0,this.emit("dispose"))},e.NEXT_ID=1,e}(s.EventEmitter);e.Marker=l},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,s=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",u="__lodash_hash_undefined__",c=500,h="__lodash_placeholder__",f=1,p=2,_=4,d=1,m=2,v=1,y=2,g=4,b=8,C=16,w=32,x=64,E=128,k=256,S=512,A=30,T="...",R=800,L=16,M=1,O=2,P=1/0,j=9007199254740991,I=1.7976931348623157e308,F=NaN,D=4294967295,H=D-1,B=D>>>1,N=[["ary",E],["bind",v],["bindKey",y],["curry",b],["curryRight",C],["flip",S],["partial",w],["partialRight",x],["rearg",k]],W="[object Arguments]",U="[object Array]",z="[object AsyncFunction]",V="[object Boolean]",q="[object Date]",K="[object DOMException]",X="[object Error]",G="[object Function]",$="[object GeneratorFunction]",Z="[object Map]",Y="[object Number]",Q="[object Null]",J="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",st="[object WeakMap]",at="[object WeakSet]",lt="[object ArrayBuffer]",ut="[object DataView]",ct="[object Float32Array]",ht="[object Float64Array]",ft="[object Int8Array]",pt="[object Int16Array]",_t="[object Int32Array]",dt="[object Uint8Array]",mt="[object Uint8ClampedArray]",vt="[object Uint16Array]",yt="[object Uint32Array]",gt=/\b__p \+= '';/g,bt=/\b(__p \+=) '' \+/g,Ct=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,xt=/[&<>"']/g,Et=RegExp(wt.source),kt=RegExp(xt.source),St=/<%-([\s\S]+?)%>/g,At=/<%([\s\S]+?)%>/g,Tt=/<%=([\s\S]+?)%>/g,Rt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Lt=/^\w*$/,Mt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ot=/[\\^$.*+?()[\]{}|]/g,Pt=RegExp(Ot.source),jt=/^\s+|\s+$/g,It=/^\s+/,Ft=/\s+$/,Dt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Ht=/\{\n\/\* \[wrapped with (.+)\] \*/,Bt=/,? & /,Nt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wt=/\\(\\)?/g,Ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,zt=/\w*$/,Vt=/^[-+]0x[0-9a-f]+$/i,qt=/^0b[01]+$/i,Kt=/^\[object .+?Constructor\]$/,Xt=/^0o[0-7]+$/i,Gt=/^(?:0|[1-9]\d*)$/,$t=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Zt=/($^)/,Yt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Jt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Jt+"]",ne="["+Qt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",se="[^\\ud800-\\udfff"+Jt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ae="\\ud83c[\\udffb-\\udfff]",le="[^\\ud800-\\udfff]",ue="(?:\\ud83c[\\udde6-\\uddff]){2}",ce="[\\ud800-\\udbff][\\udc00-\\udfff]",he="[A-Z\\xc0-\\xd6\\xd8-\\xde]",fe="(?:"+oe+"|"+se+")",pe="(?:"+he+"|"+se+")",_e="(?:"+ne+"|"+ae+")"+"?",de="[\\ufe0e\\ufe0f]?"+_e+("(?:\\u200d(?:"+[le,ue,ce].join("|")+")[\\ufe0e\\ufe0f]?"+_e+")*"),me="(?:"+[ie,ue,ce].join("|")+")"+de,ve="(?:"+[le+ne+"?",ne,ue,ce,te].join("|")+")",ye=RegExp("['’]","g"),ge=RegExp(ne,"g"),be=RegExp(ae+"(?="+ae+")|"+ve+de,"g"),Ce=RegExp([he+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,he,"$"].join("|")+")",pe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,he+fe,"$"].join("|")+")",he+"?"+fe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,me].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),xe=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ee=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ke=-1,Se={};Se[ct]=Se[ht]=Se[ft]=Se[pt]=Se[_t]=Se[dt]=Se[mt]=Se[vt]=Se[yt]=!0,Se[W]=Se[U]=Se[lt]=Se[V]=Se[ut]=Se[q]=Se[X]=Se[G]=Se[Z]=Se[Y]=Se[J]=Se[et]=Se[nt]=Se[rt]=Se[st]=!1;var Ae={};Ae[W]=Ae[U]=Ae[lt]=Ae[ut]=Ae[V]=Ae[q]=Ae[ct]=Ae[ht]=Ae[ft]=Ae[pt]=Ae[_t]=Ae[Z]=Ae[Y]=Ae[J]=Ae[et]=Ae[nt]=Ae[rt]=Ae[it]=Ae[dt]=Ae[mt]=Ae[vt]=Ae[yt]=!0,Ae[X]=Ae[G]=Ae[st]=!1;var Te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Re=parseFloat,Le=parseInt,Me="object"==typeof t&&t&&t.Object===Object&&t,Oe="object"==typeof self&&self&&self.Object===Object&&self,Pe=Me||Oe||Function("return this")(),je="object"==typeof e&&e&&!e.nodeType&&e,Ie=je&&"object"==typeof r&&r&&!r.nodeType&&r,Fe=Ie&&Ie.exports===je,De=Fe&&Me.process,He=function(){try{var t=Ie&&Ie.require&&Ie.require("util").types;return t||De&&De.binding&&De.binding("util")}catch(t){}}(),Be=He&&He.isArrayBuffer,Ne=He&&He.isDate,We=He&&He.isMap,Ue=He&&He.isRegExp,ze=He&&He.isSet,Ve=He&&He.isTypedArray;function qe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ke(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(r,s,n(s),t)}return r}function Xe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ge(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function $e(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ze(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}function Ye(t,e){return!!(null==t?0:t.length)&&ln(t,e,0)>-1}function Qe(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Je(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=fn("length");function sn(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function an(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function ln(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):an(t,cn,n)}function un(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function cn(t){return t!=t}function hn(t,e){var n=null==t?0:t.length;return n?dn(t,e)/n:F}function fn(t){return function(e){return null==e?o:e[t]}}function pn(t){return function(e){return null==t?o:t[e]}}function _n(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function dn(t,e){for(var n,r=-1,i=t.length;++r<i;){var s=e(t[r]);s!==o&&(n=n===o?s:n+s)}return n}function mn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function vn(t){return function(e){return t(e)}}function yn(t,e){return Je(e,function(e){return t[e]})}function gn(t,e){return t.has(e)}function bn(t,e){for(var n=-1,r=t.length;++n<r&&ln(e,t[n],0)>-1;);return n}function Cn(t,e){for(var n=t.length;n--&&ln(e,t[n],0)>-1;);return n}var wn=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),xn=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function En(t){return"\\"+Te[t]}function kn(t){return we.test(t)}function Sn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function An(t,e){return function(n){return t(e(n))}}function Tn(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==h||(t[n]=h,o[i++]=n)}return o}function Rn(t,e){return"__proto__"==e?o:t[e]}function Ln(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function Mn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function On(t){return kn(t)?function(t){var e=be.lastIndex=0;for(;be.test(t);)++e;return e}(t):on(t)}function Pn(t){return kn(t)?function(t){return t.match(be)||[]}(t):function(t){return t.split("")}(t)}var jn=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var In=function t(e){var n,r=(e=null==e?Pe:In.defaults(Pe.Object(),e,In.pick(Pe,Ee))).Array,i=e.Date,Qt=e.Error,Jt=e.Function,te=e.Math,ee=e.Object,ne=e.RegExp,re=e.String,ie=e.TypeError,oe=r.prototype,se=Jt.prototype,ae=ee.prototype,le=e["__core-js_shared__"],ue=se.toString,ce=ae.hasOwnProperty,he=0,fe=(n=/[^.]+$/.exec(le&&le.keys&&le.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",pe=ae.toString,_e=ue.call(ee),de=Pe._,me=ne("^"+ue.call(ce).replace(Ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ve=Fe?e.Buffer:o,be=e.Symbol,we=e.Uint8Array,Te=ve?ve.allocUnsafe:o,Me=An(ee.getPrototypeOf,ee),Oe=ee.create,je=ae.propertyIsEnumerable,Ie=oe.splice,De=be?be.isConcatSpreadable:o,He=be?be.iterator:o,on=be?be.toStringTag:o,pn=function(){try{var t=No(ee,"defineProperty");return t({},"",{}),t}catch(t){}}(),Fn=e.clearTimeout!==Pe.clearTimeout&&e.clearTimeout,Dn=i&&i.now!==Pe.Date.now&&i.now,Hn=e.setTimeout!==Pe.setTimeout&&e.setTimeout,Bn=te.ceil,Nn=te.floor,Wn=ee.getOwnPropertySymbols,Un=ve?ve.isBuffer:o,zn=e.isFinite,Vn=oe.join,qn=An(ee.keys,ee),Kn=te.max,Xn=te.min,Gn=i.now,$n=e.parseInt,Zn=te.random,Yn=oe.reverse,Qn=No(e,"DataView"),Jn=No(e,"Map"),tr=No(e,"Promise"),er=No(e,"Set"),nr=No(e,"WeakMap"),rr=No(ee,"create"),ir=nr&&new nr,or={},sr=hs(Qn),ar=hs(Jn),lr=hs(tr),ur=hs(er),cr=hs(nr),hr=be?be.prototype:o,fr=hr?hr.valueOf:o,pr=hr?hr.toString:o;function _r(t){if(Ta(t)&&!va(t)&&!(t instanceof yr)){if(t instanceof vr)return t;if(ce.call(t,"__wrapped__"))return fs(t)}return new vr(t)}var dr=function(){function t(){}return function(e){if(!Aa(e))return{};if(Oe)return Oe(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function mr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=D,this.__views__=[]}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Cr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function wr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Cr;++e<n;)this.add(t[e])}function xr(t){var e=this.__data__=new br(t);this.size=e.size}function Er(t,e){var n=va(t),r=!n&&ma(t),i=!n&&!r&&Ca(t),o=!n&&!r&&!i&&Fa(t),s=n||r||i||o,a=s?mn(t.length,re):[],l=a.length;for(var u in t)!e&&!ce.call(t,u)||s&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||Xo(u,l))||a.push(u);return a}function kr(t){var e=t.length;return e?t[wi(0,e-1)]:o}function Sr(t,e){return ls(ro(t),Ir(e,0,t.length))}function Ar(t){return ls(ro(t))}function Tr(t,e,n){(n===o||pa(t[e],n))&&(n!==o||e in t)||Pr(t,e,n)}function Rr(t,e,n){var r=t[e];ce.call(t,e)&&pa(r,n)&&(n!==o||e in t)||Pr(t,e,n)}function Lr(t,e){for(var n=t.length;n--;)if(pa(t[n][0],e))return n;return-1}function Mr(t,e,n,r){return Nr(t,function(t,i,o){e(r,t,n(t),o)}),r}function Or(t,e){return t&&io(e,il(e),t)}function Pr(t,e,n){"__proto__"==e&&pn?pn(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function jr(t,e){for(var n=-1,i=e.length,s=r(i),a=null==t;++n<i;)s[n]=a?o:Ja(t,e[n]);return s}function Ir(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function Fr(t,e,n,r,i,s){var a,l=e&f,u=e&p,c=e&_;if(n&&(a=i?n(t,r,i,s):n(t)),a!==o)return a;if(!Aa(t))return t;var h=va(t);if(h){if(a=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&ce.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!l)return ro(t,a)}else{var d=zo(t),m=d==G||d==$;if(Ca(t))return Yi(t,l);if(d==J||d==W||m&&!i){if(a=u||m?{}:qo(t),!l)return u?function(t,e){return io(t,Uo(t),e)}(t,function(t,e){return t&&io(e,ol(e),t)}(a,t)):function(t,e){return io(t,Wo(t),e)}(t,Or(a,t))}else{if(!Ae[d])return i?t:{};a=function(t,e,n){var r,i,o,s=t.constructor;switch(e){case lt:return Qi(t);case V:case q:return new s(+t);case ut:return function(t,e){var n=e?Qi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case ct:case ht:case ft:case pt:case _t:case dt:case mt:case vt:case yt:return Ji(t,n);case Z:return new s;case Y:case rt:return new s(t);case et:return(o=new(i=t).constructor(i.source,zt.exec(i))).lastIndex=i.lastIndex,o;case nt:return new s;case it:return r=t,fr?ee(fr.call(r)):{}}}(t,d,l)}}s||(s=new xr);var v=s.get(t);if(v)return v;if(s.set(t,a),Pa(t))return t.forEach(function(r){a.add(Fr(r,e,n,r,t,s))}),a;if(Ra(t))return t.forEach(function(r,i){a.set(i,Fr(r,e,n,i,t,s))}),a;var y=h?o:(c?u?Po:Oo:u?ol:il)(t);return Xe(y||t,function(r,i){y&&(r=t[i=r]),Rr(a,i,Fr(r,e,n,i,t,s))}),a}function Dr(t,e,n){var r=n.length;if(null==t)return!r;for(t=ee(t);r--;){var i=n[r],s=e[i],a=t[i];if(a===o&&!(i in t)||!s(a))return!1}return!0}function Hr(t,e,n){if("function"!=typeof t)throw new ie(l);return is(function(){t.apply(o,n)},e)}function Br(t,e,n,r){var i=-1,o=Ye,a=!0,l=t.length,u=[],c=e.length;if(!l)return u;n&&(e=Je(e,vn(n))),r?(o=Qe,a=!1):e.length>=s&&(o=gn,a=!1,e=new wr(e));t:for(;++i<l;){var h=t[i],f=null==n?h:n(h);if(h=r||0!==h?h:0,a&&f==f){for(var p=c;p--;)if(e[p]===f)continue t;u.push(h)}else o(e,f,r)||u.push(h)}return u}_r.templateSettings={escape:St,evaluate:At,interpolate:Tt,variable:"",imports:{_:_r}},_r.prototype=mr.prototype,_r.prototype.constructor=_r,vr.prototype=dr(mr.prototype),vr.prototype.constructor=vr,yr.prototype=dr(mr.prototype),yr.prototype.constructor=yr,gr.prototype.clear=function(){this.__data__=rr?rr(null):{},this.size=0},gr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},gr.prototype.get=function(t){var e=this.__data__;if(rr){var n=e[t];return n===u?o:n}return ce.call(e,t)?e[t]:o},gr.prototype.has=function(t){var e=this.__data__;return rr?e[t]!==o:ce.call(e,t)},gr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=rr&&e===o?u:e,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(t){var e=this.__data__,n=Lr(e,t);return!(n<0||(n==e.length-1?e.pop():Ie.call(e,n,1),--this.size,0))},br.prototype.get=function(t){var e=this.__data__,n=Lr(e,t);return n<0?o:e[n][1]},br.prototype.has=function(t){return Lr(this.__data__,t)>-1},br.prototype.set=function(t,e){var n=this.__data__,r=Lr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Cr.prototype.clear=function(){this.size=0,this.__data__={hash:new gr,map:new(Jn||br),string:new gr}},Cr.prototype.delete=function(t){var e=Ho(this,t).delete(t);return this.size-=e?1:0,e},Cr.prototype.get=function(t){return Ho(this,t).get(t)},Cr.prototype.has=function(t){return Ho(this,t).has(t)},Cr.prototype.set=function(t,e){var n=Ho(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(t){return this.__data__.set(t,u),this},wr.prototype.has=function(t){return this.__data__.has(t)},xr.prototype.clear=function(){this.__data__=new br,this.size=0},xr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},xr.prototype.get=function(t){return this.__data__.get(t)},xr.prototype.has=function(t){return this.__data__.has(t)},xr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Jn||r.length<s-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Cr(r)}return n.set(t,e),this.size=n.size,this};var Nr=ao(Gr),Wr=ao($r,!0);function Ur(t,e){var n=!0;return Nr(t,function(t,r,i){return n=!!e(t,r,i)}),n}function zr(t,e,n){for(var r=-1,i=t.length;++r<i;){var s=t[r],a=e(s);if(null!=a&&(l===o?a==a&&!Ia(a):n(a,l)))var l=a,u=s}return u}function Vr(t,e){var n=[];return Nr(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function qr(t,e,n,r,i){var o=-1,s=t.length;for(n||(n=Ko),i||(i=[]);++o<s;){var a=t[o];e>0&&n(a)?e>1?qr(a,e-1,n,r,i):tn(i,a):r||(i[i.length]=a)}return i}var Kr=lo(),Xr=lo(!0);function Gr(t,e){return t&&Kr(t,e,il)}function $r(t,e){return t&&Xr(t,e,il)}function Zr(t,e){return Ze(e,function(e){return Ea(t[e])})}function Yr(t,e){for(var n=0,r=(e=Xi(e,t)).length;null!=t&&n<r;)t=t[cs(e[n++])];return n&&n==r?t:o}function Qr(t,e,n){var r=e(t);return va(t)?r:tn(r,n(t))}function Jr(t){return null==t?t===o?ot:Q:on&&on in ee(t)?function(t){var e=ce.call(t,on),n=t[on];try{t[on]=o;var r=!0}catch(t){}var i=pe.call(t);return r&&(e?t[on]=n:delete t[on]),i}(t):function(t){return pe.call(t)}(t)}function ti(t,e){return t>e}function ei(t,e){return null!=t&&ce.call(t,e)}function ni(t,e){return null!=t&&e in ee(t)}function ri(t,e,n){for(var i=n?Qe:Ye,s=t[0].length,a=t.length,l=a,u=r(a),c=1/0,h=[];l--;){var f=t[l];l&&e&&(f=Je(f,vn(e))),c=Xn(f.length,c),u[l]=!n&&(e||s>=120&&f.length>=120)?new wr(l&&f):o}f=t[0];var p=-1,_=u[0];t:for(;++p<s&&h.length<c;){var d=f[p],m=e?e(d):d;if(d=n||0!==d?d:0,!(_?gn(_,m):i(h,m,n))){for(l=a;--l;){var v=u[l];if(!(v?gn(v,m):i(t[l],m,n)))continue t}_&&_.push(m),h.push(d)}}return h}function ii(t,e,n){var r=null==(t=ns(t,e=Xi(e,t)))?t:t[cs(xs(e))];return null==r?o:qe(r,t,n)}function oi(t){return Ta(t)&&Jr(t)==W}function si(t,e,n,r,i){return t===e||(null==t||null==e||!Ta(t)&&!Ta(e)?t!=t&&e!=e:function(t,e,n,r,i,s){var a=va(t),l=va(e),u=a?U:zo(t),c=l?U:zo(e),h=(u=u==W?J:u)==J,f=(c=c==W?J:c)==J,p=u==c;if(p&&Ca(t)){if(!Ca(e))return!1;a=!0,h=!1}if(p&&!h)return s||(s=new xr),a||Fa(t)?Lo(t,e,n,r,i,s):function(t,e,n,r,i,o,s){switch(n){case ut:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case lt:return!(t.byteLength!=e.byteLength||!o(new we(t),new we(e)));case V:case q:case Y:return pa(+t,+e);case X:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case Z:var a=Sn;case nt:var l=r&d;if(a||(a=Ln),t.size!=e.size&&!l)return!1;var u=s.get(t);if(u)return u==e;r|=m,s.set(t,e);var c=Lo(a(t),a(e),r,i,o,s);return s.delete(t),c;case it:if(fr)return fr.call(t)==fr.call(e)}return!1}(t,e,u,n,r,i,s);if(!(n&d)){var _=h&&ce.call(t,"__wrapped__"),v=f&&ce.call(e,"__wrapped__");if(_||v){var y=_?t.value():t,g=v?e.value():e;return s||(s=new xr),i(y,g,n,r,s)}}return!!p&&(s||(s=new xr),function(t,e,n,r,i,s){var a=n&d,l=Oo(t),u=l.length,c=Oo(e).length;if(u!=c&&!a)return!1;for(var h=u;h--;){var f=l[h];if(!(a?f in e:ce.call(e,f)))return!1}var p=s.get(t);if(p&&s.get(e))return p==e;var _=!0;s.set(t,e),s.set(e,t);for(var m=a;++h<u;){f=l[h];var v=t[f],y=e[f];if(r)var g=a?r(y,v,f,e,t,s):r(v,y,f,t,e,s);if(!(g===o?v===y||i(v,y,n,r,s):g)){_=!1;break}m||(m="constructor"==f)}if(_&&!m){var b=t.constructor,C=e.constructor;b!=C&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof C&&C instanceof C)&&(_=!1)}return s.delete(t),s.delete(e),_}(t,e,n,r,i,s))}(t,e,n,r,si,i))}function ai(t,e,n,r){var i=n.length,s=i,a=!r;if(null==t)return!s;for(t=ee(t);i--;){var l=n[i];if(a&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++i<s;){var u=(l=n[i])[0],c=t[u],h=l[1];if(a&&l[2]){if(c===o&&!(u in t))return!1}else{var f=new xr;if(r)var p=r(c,h,u,t,e,f);if(!(p===o?si(h,c,d|m,r,f):p))return!1}}return!0}function li(t){return!(!Aa(t)||fe&&fe in t)&&(Ea(t)?me:Kt).test(hs(t))}function ui(t){return"function"==typeof t?t:null==t?Ll:"object"==typeof t?va(t)?di(t[0],t[1]):_i(t):Bl(t)}function ci(t){if(!Qo(t))return qn(t);var e=[];for(var n in ee(t))ce.call(t,n)&&"constructor"!=n&&e.push(n);return e}function hi(t){if(!Aa(t))return function(t){var e=[];if(null!=t)for(var n in ee(t))e.push(n);return e}(t);var e=Qo(t),n=[];for(var r in t)("constructor"!=r||!e&&ce.call(t,r))&&n.push(r);return n}function fi(t,e){return t<e}function pi(t,e){var n=-1,i=ga(t)?r(t.length):[];return Nr(t,function(t,r,o){i[++n]=e(t,r,o)}),i}function _i(t){var e=Bo(t);return 1==e.length&&e[0][2]?ts(e[0][0],e[0][1]):function(n){return n===t||ai(n,t,e)}}function di(t,e){return $o(t)&&Jo(e)?ts(cs(t),e):function(n){var r=Ja(n,t);return r===o&&r===e?tl(n,t):si(e,r,d|m)}}function mi(t,e,n,r,i){t!==e&&Kr(e,function(s,a){if(Aa(s))i||(i=new xr),function(t,e,n,r,i,s,a){var l=Rn(t,n),u=Rn(e,n),c=a.get(u);if(c)Tr(t,n,c);else{var h=s?s(l,u,n+"",t,e,a):o,f=h===o;if(f){var p=va(u),_=!p&&Ca(u),d=!p&&!_&&Fa(u);h=u,p||_||d?va(l)?h=l:ba(l)?h=ro(l):_?(f=!1,h=Yi(u,!0)):d?(f=!1,h=Ji(u,!0)):h=[]:Ma(u)||ma(u)?(h=l,ma(l)?h=Va(l):(!Aa(l)||r&&Ea(l))&&(h=qo(u))):f=!1}f&&(a.set(u,h),i(h,u,r,s,a),a.delete(u)),Tr(t,n,h)}}(t,e,a,n,mi,r,i);else{var l=r?r(Rn(t,a),s,a+"",t,e,i):o;l===o&&(l=s),Tr(t,a,l)}},ol)}function vi(t,e){var n=t.length;if(n)return Xo(e+=e<0?n:0,n)?t[e]:o}function yi(t,e,n){var r=-1;return e=Je(e.length?e:[Ll],vn(Do())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(pi(t,function(t,n,i){return{criteria:Je(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,s=i.length,a=n.length;++r<s;){var l=to(i[r],o[r]);if(l){if(r>=a)return l;var u=n[r];return l*("desc"==u?-1:1)}}return t.index-e.index}(t,e,n)})}function gi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var s=e[r],a=Yr(t,s);n(a,s)&&Ai(o,Xi(s,t),a)}return o}function bi(t,e,n,r){var i=r?un:ln,o=-1,s=e.length,a=t;for(t===e&&(e=ro(e)),n&&(a=Je(t,vn(n)));++o<s;)for(var l=0,u=e[o],c=n?n(u):u;(l=i(a,c,l,r))>-1;)a!==t&&Ie.call(a,l,1),Ie.call(t,l,1);return t}function Ci(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;Xo(i)?Ie.call(t,i,1):Bi(t,i)}}return t}function wi(t,e){return t+Nn(Zn()*(e-t+1))}function xi(t,e){var n="";if(!t||e<1||e>j)return n;do{e%2&&(n+=t),(e=Nn(e/2))&&(t+=t)}while(e);return n}function Ei(t,e){return os(es(t,e,Ll),t+"")}function ki(t){return kr(pl(t))}function Si(t,e){var n=pl(t);return ls(n,Ir(e,0,n.length))}function Ai(t,e,n,r){if(!Aa(t))return t;for(var i=-1,s=(e=Xi(e,t)).length,a=s-1,l=t;null!=l&&++i<s;){var u=cs(e[i]),c=n;if(i!=a){var h=l[u];(c=r?r(h,u,l):o)===o&&(c=Aa(h)?h:Xo(e[i+1])?[]:{})}Rr(l,u,c),l=l[u]}return t}var Ti=ir?function(t,e){return ir.set(t,e),t}:Ll,Ri=pn?function(t,e){return pn(t,"toString",{configurable:!0,enumerable:!1,value:Al(e),writable:!0})}:Ll;function Li(t){return ls(pl(t))}function Mi(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var s=r(o);++i<o;)s[i]=t[i+e];return s}function Oi(t,e){var n;return Nr(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Pi(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=B){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!Ia(s)&&(n?s<=e:s<e)?r=o+1:i=o}return i}return ji(t,e,Ll,n)}function ji(t,e,n,r){e=n(e);for(var i=0,s=null==t?0:t.length,a=e!=e,l=null===e,u=Ia(e),c=e===o;i<s;){var h=Nn((i+s)/2),f=n(t[h]),p=f!==o,_=null===f,d=f==f,m=Ia(f);if(a)var v=r||d;else v=c?d&&(r||p):l?d&&p&&(r||!_):u?d&&p&&!_&&(r||!m):!_&&!m&&(r?f<=e:f<e);v?i=h+1:s=h}return Xn(s,H)}function Ii(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n],a=e?e(s):s;if(!n||!pa(a,l)){var l=a;o[i++]=0===s?0:s}}return o}function Fi(t){return"number"==typeof t?t:Ia(t)?F:+t}function Di(t){if("string"==typeof t)return t;if(va(t))return Je(t,Di)+"";if(Ia(t))return pr?pr.call(t):"";var e=t+"";return"0"==e&&1/t==-P?"-0":e}function Hi(t,e,n){var r=-1,i=Ye,o=t.length,a=!0,l=[],u=l;if(n)a=!1,i=Qe;else if(o>=s){var c=e?null:Eo(t);if(c)return Ln(c);a=!1,i=gn,u=new wr}else u=e?[]:l;t:for(;++r<o;){var h=t[r],f=e?e(h):h;if(h=n||0!==h?h:0,a&&f==f){for(var p=u.length;p--;)if(u[p]===f)continue t;e&&u.push(f),l.push(h)}else i(u,f,n)||(u!==l&&u.push(f),l.push(h))}return l}function Bi(t,e){return null==(t=ns(t,e=Xi(e,t)))||delete t[cs(xs(e))]}function Ni(t,e,n,r){return Ai(t,e,n(Yr(t,e)),r)}function Wi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?Mi(t,r?0:o,r?o+1:i):Mi(t,r?o+1:0,r?i:o)}function Ui(t,e){var n=t;return n instanceof yr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function zi(t,e,n){var i=t.length;if(i<2)return i?Hi(t[0]):[];for(var o=-1,s=r(i);++o<i;)for(var a=t[o],l=-1;++l<i;)l!=o&&(s[o]=Br(s[o]||a,t[l],e,n));return Hi(qr(s,1),e,n)}function Vi(t,e,n){for(var r=-1,i=t.length,s=e.length,a={};++r<i;){var l=r<s?e[r]:o;n(a,t[r],l)}return a}function qi(t){return ba(t)?t:[]}function Ki(t){return"function"==typeof t?t:Ll}function Xi(t,e){return va(t)?t:$o(t,e)?[t]:us(qa(t))}var Gi=Ei;function $i(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:Mi(t,e,n)}var Zi=Fn||function(t){return Pe.clearTimeout(t)};function Yi(t,e){if(e)return t.slice();var n=t.length,r=Te?Te(n):new t.constructor(n);return t.copy(r),r}function Qi(t){var e=new t.constructor(t.byteLength);return new we(e).set(new we(t)),e}function Ji(t,e){var n=e?Qi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function to(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,s=Ia(t),a=e!==o,l=null===e,u=e==e,c=Ia(e);if(!l&&!c&&!s&&t>e||s&&a&&u&&!l&&!c||r&&a&&u||!n&&u||!i)return 1;if(!r&&!s&&!c&&t<e||c&&n&&i&&!r&&!s||l&&n&&i||!a&&i||!u)return-1}return 0}function eo(t,e,n,i){for(var o=-1,s=t.length,a=n.length,l=-1,u=e.length,c=Kn(s-a,0),h=r(u+c),f=!i;++l<u;)h[l]=e[l];for(;++o<a;)(f||o<s)&&(h[n[o]]=t[o]);for(;c--;)h[l++]=t[o++];return h}function no(t,e,n,i){for(var o=-1,s=t.length,a=-1,l=n.length,u=-1,c=e.length,h=Kn(s-l,0),f=r(h+c),p=!i;++o<h;)f[o]=t[o];for(var _=o;++u<c;)f[_+u]=e[u];for(;++a<l;)(p||o<s)&&(f[_+n[a]]=t[o++]);return f}function ro(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function io(t,e,n,r){var i=!n;n||(n={});for(var s=-1,a=e.length;++s<a;){var l=e[s],u=r?r(n[l],t[l],l,n,t):o;u===o&&(u=t[l]),i?Pr(n,l,u):Rr(n,l,u)}return n}function oo(t,e){return function(n,r){var i=va(n)?Ke:Mr,o=e?e():{};return i(n,t,Do(r,2),o)}}function so(t){return Ei(function(e,n){var r=-1,i=n.length,s=i>1?n[i-1]:o,a=i>2?n[2]:o;for(s=t.length>3&&"function"==typeof s?(i--,s):o,a&&Go(n[0],n[1],a)&&(s=i<3?o:s,i=1),e=ee(e);++r<i;){var l=n[r];l&&t(e,l,r,s)}return e})}function ao(t,e){return function(n,r){if(null==n)return n;if(!ga(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=ee(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function lo(t){return function(e,n,r){for(var i=-1,o=ee(e),s=r(e),a=s.length;a--;){var l=s[t?a:++i];if(!1===n(o[l],l,o))break}return e}}function uo(t){return function(e){var n=kn(e=qa(e))?Pn(e):o,r=n?n[0]:e.charAt(0),i=n?$i(n,1).join(""):e.slice(1);return r[t]()+i}}function co(t){return function(e){return en(El(ml(e).replace(ye,"")),t,"")}}function ho(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=dr(t.prototype),r=t.apply(n,e);return Aa(r)?r:n}}function fo(t){return function(e,n,r){var i=ee(e);if(!ga(e)){var s=Do(n,3);e=il(e),n=function(t){return s(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[s?e[a]:a]:o}}function po(t){return Mo(function(e){var n=e.length,r=n,i=vr.prototype.thru;for(t&&e.reverse();r--;){var s=e[r];if("function"!=typeof s)throw new ie(l);if(i&&!a&&"wrapper"==Io(s))var a=new vr([],!0)}for(r=a?r:n;++r<n;){var u=Io(s=e[r]),c="wrapper"==u?jo(s):o;a=c&&Zo(c[0])&&c[1]==(E|b|w|k)&&!c[4].length&&1==c[9]?a[Io(c[0])].apply(a,c[3]):1==s.length&&Zo(s)?a[u]():a.thru(s)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&va(r))return a.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function _o(t,e,n,i,s,a,l,u,c,h){var f=e&E,p=e&v,_=e&y,d=e&(b|C),m=e&S,g=_?o:ho(t);return function v(){for(var y=arguments.length,b=r(y),C=y;C--;)b[C]=arguments[C];if(d)var w=Fo(v),x=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(b,w);if(i&&(b=eo(b,i,s,d)),a&&(b=no(b,a,l,d)),y-=x,d&&y<h){var E=Tn(b,w);return wo(t,e,_o,v.placeholder,n,b,E,u,c,h-y)}var k=p?n:this,S=_?k[t]:t;return y=b.length,u?b=function(t,e){for(var n=t.length,r=Xn(e.length,n),i=ro(t);r--;){var s=e[r];t[r]=Xo(s,n)?i[s]:o}return t}(b,u):m&&y>1&&b.reverse(),f&&c<y&&(b.length=c),this&&this!==Pe&&this instanceof v&&(S=g||ho(S)),S.apply(k,b)}}function mo(t,e){return function(n,r){return function(t,e,n,r){return Gr(t,function(t,i,o){e(r,n(t),i,o)}),r}(n,t,e(r),{})}}function vo(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Di(n),r=Di(r)):(n=Fi(n),r=Fi(r)),i=t(n,r)}return i}}function yo(t){return Mo(function(e){return e=Je(e,vn(Do())),Ei(function(n){var r=this;return t(e,function(t){return qe(t,r,n)})})})}function go(t,e){var n=(e=e===o?" ":Di(e)).length;if(n<2)return n?xi(e,t):e;var r=xi(e,Bn(t/On(e)));return kn(e)?$i(Pn(r),0,t).join(""):r.slice(0,t)}function bo(t){return function(e,n,i){return i&&"number"!=typeof i&&Go(e,n,i)&&(n=i=o),e=Na(e),n===o?(n=e,e=0):n=Na(n),function(t,e,n,i){for(var o=-1,s=Kn(Bn((e-t)/(n||1)),0),a=r(s);s--;)a[i?s:++o]=t,t+=n;return a}(e,n,i=i===o?e<n?1:-1:Na(i),t)}}function Co(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=za(e),n=za(n)),t(e,n)}}function wo(t,e,n,r,i,s,a,l,u,c){var h=e&b;e|=h?w:x,(e&=~(h?x:w))&g||(e&=~(v|y));var f=[t,e,i,h?s:o,h?a:o,h?o:s,h?o:a,l,u,c],p=n.apply(o,f);return Zo(t)&&rs(p,f),p.placeholder=r,ss(p,t,e)}function xo(t){var e=te[t];return function(t,n){if(t=za(t),n=null==n?0:Xn(Wa(n),292)){var r=(qa(t)+"e").split("e");return+((r=(qa(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Eo=er&&1/Ln(new er([,-0]))[1]==P?function(t){return new er(t)}:Il;function ko(t){return function(e){var n=zo(e);return n==Z?Sn(e):n==nt?Mn(e):function(t,e){return Je(e,function(e){return[e,t[e]]})}(e,t(e))}}function So(t,e,n,i,s,a,u,c){var f=e&y;if(!f&&"function"!=typeof t)throw new ie(l);var p=i?i.length:0;if(p||(e&=~(w|x),i=s=o),u=u===o?u:Kn(Wa(u),0),c=c===o?c:Wa(c),p-=s?s.length:0,e&x){var _=i,d=s;i=s=o}var m=f?o:jo(t),S=[t,e,n,i,s,_,d,a,u,c];if(m&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(v|y|E),s=r==E&&n==b||r==E&&n==k&&t[7].length<=e[8]||r==(E|k)&&e[7].length<=e[8]&&n==b;if(!o&&!s)return t;r&v&&(t[2]=e[2],i|=n&v?0:g);var a=e[3];if(a){var l=t[3];t[3]=l?eo(l,a,e[4]):a,t[4]=l?Tn(t[3],h):e[4]}(a=e[5])&&(l=t[5],t[5]=l?no(l,a,e[6]):a,t[6]=l?Tn(t[5],h):e[6]),(a=e[7])&&(t[7]=a),r&E&&(t[8]=null==t[8]?e[8]:Xn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(S,m),t=S[0],e=S[1],n=S[2],i=S[3],s=S[4],!(c=S[9]=S[9]===o?f?0:t.length:Kn(S[9]-p,0))&&e&(b|C)&&(e&=~(b|C)),e&&e!=v)A=e==b||e==C?function(t,e,n){var i=ho(t);return function s(){for(var a=arguments.length,l=r(a),u=a,c=Fo(s);u--;)l[u]=arguments[u];var h=a<3&&l[0]!==c&&l[a-1]!==c?[]:Tn(l,c);return(a-=h.length)<n?wo(t,e,_o,s.placeholder,o,l,h,o,o,n-a):qe(this&&this!==Pe&&this instanceof s?i:t,this,l)}}(t,e,c):e!=w&&e!=(v|w)||s.length?_o.apply(o,S):function(t,e,n,i){var o=e&v,s=ho(t);return function e(){for(var a=-1,l=arguments.length,u=-1,c=i.length,h=r(c+l),f=this&&this!==Pe&&this instanceof e?s:t;++u<c;)h[u]=i[u];for(;l--;)h[u++]=arguments[++a];return qe(f,o?n:this,h)}}(t,e,n,i);else var A=function(t,e,n){var r=e&v,i=ho(t);return function e(){return(this&&this!==Pe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return ss((m?Ti:rs)(A,S),t,e)}function Ao(t,e,n,r){return t===o||pa(t,ae[n])&&!ce.call(r,n)?e:t}function To(t,e,n,r,i,s){return Aa(t)&&Aa(e)&&(s.set(e,t),mi(t,e,o,To,s),s.delete(e)),t}function Ro(t){return Ma(t)?o:t}function Lo(t,e,n,r,i,s){var a=n&d,l=t.length,u=e.length;if(l!=u&&!(a&&u>l))return!1;var c=s.get(t);if(c&&s.get(e))return c==e;var h=-1,f=!0,p=n&m?new wr:o;for(s.set(t,e),s.set(e,t);++h<l;){var _=t[h],v=e[h];if(r)var y=a?r(v,_,h,e,t,s):r(_,v,h,t,e,s);if(y!==o){if(y)continue;f=!1;break}if(p){if(!rn(e,function(t,e){if(!gn(p,e)&&(_===t||i(_,t,n,r,s)))return p.push(e)})){f=!1;break}}else if(_!==v&&!i(_,v,n,r,s)){f=!1;break}}return s.delete(t),s.delete(e),f}function Mo(t){return os(es(t,o,ys),t+"")}function Oo(t){return Qr(t,il,Wo)}function Po(t){return Qr(t,ol,Uo)}var jo=ir?function(t){return ir.get(t)}:Il;function Io(t){for(var e=t.name+"",n=or[e],r=ce.call(or,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Fo(t){return(ce.call(_r,"placeholder")?_r:t).placeholder}function Do(){var t=_r.iteratee||Ml;return t=t===Ml?ui:t,arguments.length?t(arguments[0],arguments[1]):t}function Ho(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Bo(t){for(var e=il(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Jo(i)]}return e}function No(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return li(n)?n:o}var Wo=Wn?function(t){return null==t?[]:(t=ee(t),Ze(Wn(t),function(e){return je.call(t,e)}))}:Ul,Uo=Wn?function(t){for(var e=[];t;)tn(e,Wo(t)),t=Me(t);return e}:Ul,zo=Jr;function Vo(t,e,n){for(var r=-1,i=(e=Xi(e,t)).length,o=!1;++r<i;){var s=cs(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Sa(i)&&Xo(s,i)&&(va(t)||ma(t))}function qo(t){return"function"!=typeof t.constructor||Qo(t)?{}:dr(Me(t))}function Ko(t){return va(t)||ma(t)||!!(De&&t&&t[De])}function Xo(t,e){var n=typeof t;return!!(e=null==e?j:e)&&("number"==n||"symbol"!=n&&Gt.test(t))&&t>-1&&t%1==0&&t<e}function Go(t,e,n){if(!Aa(n))return!1;var r=typeof e;return!!("number"==r?ga(n)&&Xo(e,n.length):"string"==r&&e in n)&&pa(n[e],t)}function $o(t,e){if(va(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Ia(t))||Lt.test(t)||!Rt.test(t)||null!=e&&t in ee(e)}function Zo(t){var e=Io(t),n=_r[e];if("function"!=typeof n||!(e in yr.prototype))return!1;if(t===n)return!0;var r=jo(n);return!!r&&t===r[0]}(Qn&&zo(new Qn(new ArrayBuffer(1)))!=ut||Jn&&zo(new Jn)!=Z||tr&&"[object Promise]"!=zo(tr.resolve())||er&&zo(new er)!=nt||nr&&zo(new nr)!=st)&&(zo=function(t){var e=Jr(t),n=e==J?t.constructor:o,r=n?hs(n):"";if(r)switch(r){case sr:return ut;case ar:return Z;case lr:return"[object Promise]";case ur:return nt;case cr:return st}return e});var Yo=le?Ea:zl;function Qo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Jo(t){return t==t&&!Aa(t)}function ts(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in ee(n))}}function es(t,e,n){return e=Kn(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=Kn(i.length-e,0),a=r(s);++o<s;)a[o]=i[e+o];o=-1;for(var l=r(e+1);++o<e;)l[o]=i[o];return l[e]=n(a),qe(t,this,l)}}function ns(t,e){return e.length<2?t:Yr(t,Mi(e,0,-1))}var rs=as(Ti),is=Hn||function(t,e){return Pe.setTimeout(t,e)},os=as(Ri);function ss(t,e,n){var r=e+"";return os(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Dt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Xe(N,function(n){var r="_."+n[0];e&n[1]&&!Ye(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Ht);return e?e[1].split(Bt):[]}(r),n)))}function as(t){var e=0,n=0;return function(){var r=Gn(),i=L-(r-n);if(n=r,i>0){if(++e>=R)return arguments[0]}else e=0;return t.apply(o,arguments)}}function ls(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var s=wi(n,i),a=t[s];t[s]=t[n],t[n]=a}return t.length=e,t}var us=function(t){var e=aa(t,function(t){return n.size===c&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Mt,function(t,n,r,i){e.push(r?i.replace(Wt,"$1"):n||t)}),e});function cs(t){if("string"==typeof t||Ia(t))return t;var e=t+"";return"0"==e&&1/t==-P?"-0":e}function hs(t){if(null!=t){try{return ue.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fs(t){if(t instanceof yr)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=ro(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var ps=Ei(function(t,e){return ba(t)?Br(t,qr(e,1,ba,!0)):[]}),_s=Ei(function(t,e){var n=xs(e);return ba(n)&&(n=o),ba(t)?Br(t,qr(e,1,ba,!0),Do(n,2)):[]}),ds=Ei(function(t,e){var n=xs(e);return ba(n)&&(n=o),ba(t)?Br(t,qr(e,1,ba,!0),o,n):[]});function ms(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Wa(n);return i<0&&(i=Kn(r+i,0)),an(t,Do(e,3),i)}function vs(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Wa(n),i=n<0?Kn(r+i,0):Xn(i,r-1)),an(t,Do(e,3),i,!0)}function ys(t){return null!=t&&t.length?qr(t,1):[]}function gs(t){return t&&t.length?t[0]:o}var bs=Ei(function(t){var e=Je(t,qi);return e.length&&e[0]===t[0]?ri(e):[]}),Cs=Ei(function(t){var e=xs(t),n=Je(t,qi);return e===xs(n)?e=o:n.pop(),n.length&&n[0]===t[0]?ri(n,Do(e,2)):[]}),ws=Ei(function(t){var e=xs(t),n=Je(t,qi);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?ri(n,o,e):[]});function xs(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Es=Ei(ks);function ks(t,e){return t&&t.length&&e&&e.length?bi(t,e):t}var Ss=Mo(function(t,e){var n=null==t?0:t.length,r=jr(t,e);return Ci(t,Je(e,function(t){return Xo(t,n)?+t:t}).sort(to)),r});function As(t){return null==t?t:Yn.call(t)}var Ts=Ei(function(t){return Hi(qr(t,1,ba,!0))}),Rs=Ei(function(t){var e=xs(t);return ba(e)&&(e=o),Hi(qr(t,1,ba,!0),Do(e,2))}),Ls=Ei(function(t){var e=xs(t);return e="function"==typeof e?e:o,Hi(qr(t,1,ba,!0),o,e)});function Ms(t){if(!t||!t.length)return[];var e=0;return t=Ze(t,function(t){if(ba(t))return e=Kn(t.length,e),!0}),mn(e,function(e){return Je(t,fn(e))})}function Os(t,e){if(!t||!t.length)return[];var n=Ms(t);return null==e?n:Je(n,function(t){return qe(e,o,t)})}var Ps=Ei(function(t,e){return ba(t)?Br(t,e):[]}),js=Ei(function(t){return zi(Ze(t,ba))}),Is=Ei(function(t){var e=xs(t);return ba(e)&&(e=o),zi(Ze(t,ba),Do(e,2))}),Fs=Ei(function(t){var e=xs(t);return e="function"==typeof e?e:o,zi(Ze(t,ba),o,e)}),Ds=Ei(Ms);var Hs=Ei(function(t){var e=t.length,n=e>1?t[e-1]:o;return Os(t,n="function"==typeof n?(t.pop(),n):o)});function Bs(t){var e=_r(t);return e.__chain__=!0,e}function Ns(t,e){return e(t)}var Ws=Mo(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return jr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof yr&&Xo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Ns,args:[i],thisArg:o}),new vr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(o),t})):this.thru(i)});var Us=oo(function(t,e,n){ce.call(t,n)?++t[n]:Pr(t,n,1)});var zs=fo(ms),Vs=fo(vs);function qs(t,e){return(va(t)?Xe:Nr)(t,Do(e,3))}function Ks(t,e){return(va(t)?Ge:Wr)(t,Do(e,3))}var Xs=oo(function(t,e,n){ce.call(t,n)?t[n].push(e):Pr(t,n,[e])});var Gs=Ei(function(t,e,n){var i=-1,o="function"==typeof e,s=ga(t)?r(t.length):[];return Nr(t,function(t){s[++i]=o?qe(e,t,n):ii(t,e,n)}),s}),$s=oo(function(t,e,n){Pr(t,n,e)});function Zs(t,e){return(va(t)?Je:pi)(t,Do(e,3))}var Ys=oo(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Qs=Ei(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Go(t,e[0],e[1])?e=[]:n>2&&Go(e[0],e[1],e[2])&&(e=[e[0]]),yi(t,qr(e,1),[])}),Js=Dn||function(){return Pe.Date.now()};function ta(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,So(t,E,o,o,o,o,e)}function ea(t,e){var n;if("function"!=typeof e)throw new ie(l);return t=Wa(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var na=Ei(function(t,e,n){var r=v;if(n.length){var i=Tn(n,Fo(na));r|=w}return So(t,r,e,n,i)}),ra=Ei(function(t,e,n){var r=v|y;if(n.length){var i=Tn(n,Fo(ra));r|=w}return So(e,r,t,n,i)});function ia(t,e,n){var r,i,s,a,u,c,h=0,f=!1,p=!1,_=!0;if("function"!=typeof t)throw new ie(l);function d(e){var n=r,s=i;return r=i=o,h=e,a=t.apply(s,n)}function m(t){var n=t-c;return c===o||n>=e||n<0||p&&t-h>=s}function v(){var t=Js();if(m(t))return y(t);u=is(v,function(t){var n=e-(t-c);return p?Xn(n,s-(t-h)):n}(t))}function y(t){return u=o,_&&r?d(t):(r=i=o,a)}function g(){var t=Js(),n=m(t);if(r=arguments,i=this,c=t,n){if(u===o)return function(t){return h=t,u=is(v,e),f?d(t):a}(c);if(p)return u=is(v,e),d(c)}return u===o&&(u=is(v,e)),a}return e=za(e)||0,Aa(n)&&(f=!!n.leading,s=(p="maxWait"in n)?Kn(za(n.maxWait)||0,e):s,_="trailing"in n?!!n.trailing:_),g.cancel=function(){u!==o&&Zi(u),h=0,r=c=i=u=o},g.flush=function(){return u===o?a:y(Js())},g}var oa=Ei(function(t,e){return Hr(t,1,e)}),sa=Ei(function(t,e,n){return Hr(t,za(e)||0,n)});function aa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new ie(l);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(aa.Cache||Cr),n}function la(t){if("function"!=typeof t)throw new ie(l);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}aa.Cache=Cr;var ua=Gi(function(t,e){var n=(e=1==e.length&&va(e[0])?Je(e[0],vn(Do())):Je(qr(e,1),vn(Do()))).length;return Ei(function(r){for(var i=-1,o=Xn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return qe(t,this,r)})}),ca=Ei(function(t,e){var n=Tn(e,Fo(ca));return So(t,w,o,e,n)}),ha=Ei(function(t,e){var n=Tn(e,Fo(ha));return So(t,x,o,e,n)}),fa=Mo(function(t,e){return So(t,k,o,o,o,e)});function pa(t,e){return t===e||t!=t&&e!=e}var _a=Co(ti),da=Co(function(t,e){return t>=e}),ma=oi(function(){return arguments}())?oi:function(t){return Ta(t)&&ce.call(t,"callee")&&!je.call(t,"callee")},va=r.isArray,ya=Be?vn(Be):function(t){return Ta(t)&&Jr(t)==lt};function ga(t){return null!=t&&Sa(t.length)&&!Ea(t)}function ba(t){return Ta(t)&&ga(t)}var Ca=Un||zl,wa=Ne?vn(Ne):function(t){return Ta(t)&&Jr(t)==q};function xa(t){if(!Ta(t))return!1;var e=Jr(t);return e==X||e==K||"string"==typeof t.message&&"string"==typeof t.name&&!Ma(t)}function Ea(t){if(!Aa(t))return!1;var e=Jr(t);return e==G||e==$||e==z||e==tt}function ka(t){return"number"==typeof t&&t==Wa(t)}function Sa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=j}function Aa(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Ta(t){return null!=t&&"object"==typeof t}var Ra=We?vn(We):function(t){return Ta(t)&&zo(t)==Z};function La(t){return"number"==typeof t||Ta(t)&&Jr(t)==Y}function Ma(t){if(!Ta(t)||Jr(t)!=J)return!1;var e=Me(t);if(null===e)return!0;var n=ce.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ue.call(n)==_e}var Oa=Ue?vn(Ue):function(t){return Ta(t)&&Jr(t)==et};var Pa=ze?vn(ze):function(t){return Ta(t)&&zo(t)==nt};function ja(t){return"string"==typeof t||!va(t)&&Ta(t)&&Jr(t)==rt}function Ia(t){return"symbol"==typeof t||Ta(t)&&Jr(t)==it}var Fa=Ve?vn(Ve):function(t){return Ta(t)&&Sa(t.length)&&!!Se[Jr(t)]};var Da=Co(fi),Ha=Co(function(t,e){return t<=e});function Ba(t){if(!t)return[];if(ga(t))return ja(t)?Pn(t):ro(t);if(He&&t[He])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[He]());var e=zo(t);return(e==Z?Sn:e==nt?Ln:pl)(t)}function Na(t){return t?(t=za(t))===P||t===-P?(t<0?-1:1)*I:t==t?t:0:0===t?t:0}function Wa(t){var e=Na(t),n=e%1;return e==e?n?e-n:e:0}function Ua(t){return t?Ir(Wa(t),0,D):0}function za(t){if("number"==typeof t)return t;if(Ia(t))return F;if(Aa(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Aa(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(jt,"");var n=qt.test(t);return n||Xt.test(t)?Le(t.slice(2),n?2:8):Vt.test(t)?F:+t}function Va(t){return io(t,ol(t))}function qa(t){return null==t?"":Di(t)}var Ka=so(function(t,e){if(Qo(e)||ga(e))io(e,il(e),t);else for(var n in e)ce.call(e,n)&&Rr(t,n,e[n])}),Xa=so(function(t,e){io(e,ol(e),t)}),Ga=so(function(t,e,n,r){io(e,ol(e),t,r)}),$a=so(function(t,e,n,r){io(e,il(e),t,r)}),Za=Mo(jr);var Ya=Ei(function(t,e){t=ee(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&Go(e[0],e[1],i)&&(r=1);++n<r;)for(var s=e[n],a=ol(s),l=-1,u=a.length;++l<u;){var c=a[l],h=t[c];(h===o||pa(h,ae[c])&&!ce.call(t,c))&&(t[c]=s[c])}return t}),Qa=Ei(function(t){return t.push(o,To),qe(al,o,t)});function Ja(t,e,n){var r=null==t?o:Yr(t,e);return r===o?n:r}function tl(t,e){return null!=t&&Vo(t,e,ni)}var el=mo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),t[e]=n},Al(Ll)),nl=mo(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=pe.call(e)),ce.call(t,e)?t[e].push(n):t[e]=[n]},Do),rl=Ei(ii);function il(t){return ga(t)?Er(t):ci(t)}function ol(t){return ga(t)?Er(t,!0):hi(t)}var sl=so(function(t,e,n){mi(t,e,n)}),al=so(function(t,e,n,r){mi(t,e,n,r)}),ll=Mo(function(t,e){var n={};if(null==t)return n;var r=!1;e=Je(e,function(e){return e=Xi(e,t),r||(r=e.length>1),e}),io(t,Po(t),n),r&&(n=Fr(n,f|p|_,Ro));for(var i=e.length;i--;)Bi(n,e[i]);return n});var ul=Mo(function(t,e){return null==t?{}:function(t,e){return gi(t,e,function(e,n){return tl(t,n)})}(t,e)});function cl(t,e){if(null==t)return{};var n=Je(Po(t),function(t){return[t]});return e=Do(e),gi(t,n,function(t,n){return e(t,n[0])})}var hl=ko(il),fl=ko(ol);function pl(t){return null==t?[]:yn(t,il(t))}var _l=co(function(t,e,n){return e=e.toLowerCase(),t+(n?dl(e):e)});function dl(t){return xl(qa(t).toLowerCase())}function ml(t){return(t=qa(t))&&t.replace($t,wn).replace(ge,"")}var vl=co(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),yl=co(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),gl=uo("toLowerCase");var bl=co(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var Cl=co(function(t,e,n){return t+(n?" ":"")+xl(e)});var wl=co(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),xl=uo("toUpperCase");function El(t,e,n){return t=qa(t),(e=n?o:e)===o?function(t){return xe.test(t)}(t)?function(t){return t.match(Ce)||[]}(t):function(t){return t.match(Nt)||[]}(t):t.match(e)||[]}var kl=Ei(function(t,e){try{return qe(t,o,e)}catch(t){return xa(t)?t:new Qt(t)}}),Sl=Mo(function(t,e){return Xe(e,function(e){e=cs(e),Pr(t,e,na(t[e],t))}),t});function Al(t){return function(){return t}}var Tl=po(),Rl=po(!0);function Ll(t){return t}function Ml(t){return ui("function"==typeof t?t:Fr(t,f))}var Ol=Ei(function(t,e){return function(n){return ii(n,t,e)}}),Pl=Ei(function(t,e){return function(n){return ii(t,n,e)}});function jl(t,e,n){var r=il(e),i=Zr(e,r);null!=n||Aa(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Zr(e,il(e)));var o=!(Aa(n)&&"chain"in n&&!n.chain),s=Ea(t);return Xe(i,function(n){var r=e[n];t[n]=r,s&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=ro(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Il(){}var Fl=yo(Je),Dl=yo($e),Hl=yo(rn);function Bl(t){return $o(t)?fn(cs(t)):function(t){return function(e){return Yr(e,t)}}(t)}var Nl=bo(),Wl=bo(!0);function Ul(){return[]}function zl(){return!1}var Vl=vo(function(t,e){return t+e},0),ql=xo("ceil"),Kl=vo(function(t,e){return t/e},1),Xl=xo("floor");var Gl,$l=vo(function(t,e){return t*e},1),Zl=xo("round"),Yl=vo(function(t,e){return t-e},0);return _r.after=function(t,e){if("function"!=typeof e)throw new ie(l);return t=Wa(t),function(){if(--t<1)return e.apply(this,arguments)}},_r.ary=ta,_r.assign=Ka,_r.assignIn=Xa,_r.assignInWith=Ga,_r.assignWith=$a,_r.at=Za,_r.before=ea,_r.bind=na,_r.bindAll=Sl,_r.bindKey=ra,_r.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return va(t)?t:[t]},_r.chain=Bs,_r.chunk=function(t,e,n){e=(n?Go(t,e,n):e===o)?1:Kn(Wa(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var s=0,a=0,l=r(Bn(i/e));s<i;)l[a++]=Mi(t,s,s+=e);return l},_r.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},_r.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(va(n)?ro(n):[n],qr(e,1))},_r.cond=function(t){var e=null==t?0:t.length,n=Do();return t=e?Je(t,function(t){if("function"!=typeof t[1])throw new ie(l);return[n(t[0]),t[1]]}):[],Ei(function(n){for(var r=-1;++r<e;){var i=t[r];if(qe(i[0],this,n))return qe(i[1],this,n)}})},_r.conforms=function(t){return function(t){var e=il(t);return function(n){return Dr(n,t,e)}}(Fr(t,f))},_r.constant=Al,_r.countBy=Us,_r.create=function(t,e){var n=dr(t);return null==e?n:Or(n,e)},_r.curry=function t(e,n,r){var i=So(e,b,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},_r.curryRight=function t(e,n,r){var i=So(e,C,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},_r.debounce=ia,_r.defaults=Ya,_r.defaultsDeep=Qa,_r.defer=oa,_r.delay=sa,_r.difference=ps,_r.differenceBy=_s,_r.differenceWith=ds,_r.drop=function(t,e,n){var r=null==t?0:t.length;return r?Mi(t,(e=n||e===o?1:Wa(e))<0?0:e,r):[]},_r.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Mi(t,0,(e=r-(e=n||e===o?1:Wa(e)))<0?0:e):[]},_r.dropRightWhile=function(t,e){return t&&t.length?Wi(t,Do(e,3),!0,!0):[]},_r.dropWhile=function(t,e){return t&&t.length?Wi(t,Do(e,3),!0):[]},_r.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Go(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Wa(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Wa(r))<0&&(r+=i),r=n>r?0:Ua(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},_r.filter=function(t,e){return(va(t)?Ze:Vr)(t,Do(e,3))},_r.flatMap=function(t,e){return qr(Zs(t,e),1)},_r.flatMapDeep=function(t,e){return qr(Zs(t,e),P)},_r.flatMapDepth=function(t,e,n){return n=n===o?1:Wa(n),qr(Zs(t,e),n)},_r.flatten=ys,_r.flattenDeep=function(t){return null!=t&&t.length?qr(t,P):[]},_r.flattenDepth=function(t,e){return null!=t&&t.length?qr(t,e=e===o?1:Wa(e)):[]},_r.flip=function(t){return So(t,S)},_r.flow=Tl,_r.flowRight=Rl,_r.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},_r.functions=function(t){return null==t?[]:Zr(t,il(t))},_r.functionsIn=function(t){return null==t?[]:Zr(t,ol(t))},_r.groupBy=Xs,_r.initial=function(t){return null!=t&&t.length?Mi(t,0,-1):[]},_r.intersection=bs,_r.intersectionBy=Cs,_r.intersectionWith=ws,_r.invert=el,_r.invertBy=nl,_r.invokeMap=Gs,_r.iteratee=Ml,_r.keyBy=$s,_r.keys=il,_r.keysIn=ol,_r.map=Zs,_r.mapKeys=function(t,e){var n={};return e=Do(e,3),Gr(t,function(t,r,i){Pr(n,e(t,r,i),t)}),n},_r.mapValues=function(t,e){var n={};return e=Do(e,3),Gr(t,function(t,r,i){Pr(n,r,e(t,r,i))}),n},_r.matches=function(t){return _i(Fr(t,f))},_r.matchesProperty=function(t,e){return di(t,Fr(e,f))},_r.memoize=aa,_r.merge=sl,_r.mergeWith=al,_r.method=Ol,_r.methodOf=Pl,_r.mixin=jl,_r.negate=la,_r.nthArg=function(t){return t=Wa(t),Ei(function(e){return vi(e,t)})},_r.omit=ll,_r.omitBy=function(t,e){return cl(t,la(Do(e)))},_r.once=function(t){return ea(2,t)},_r.orderBy=function(t,e,n,r){return null==t?[]:(va(e)||(e=null==e?[]:[e]),va(n=r?o:n)||(n=null==n?[]:[n]),yi(t,e,n))},_r.over=Fl,_r.overArgs=ua,_r.overEvery=Dl,_r.overSome=Hl,_r.partial=ca,_r.partialRight=ha,_r.partition=Ys,_r.pick=ul,_r.pickBy=cl,_r.property=Bl,_r.propertyOf=function(t){return function(e){return null==t?o:Yr(t,e)}},_r.pull=Es,_r.pullAll=ks,_r.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?bi(t,e,Do(n,2)):t},_r.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?bi(t,e,o,n):t},_r.pullAt=Ss,_r.range=Nl,_r.rangeRight=Wl,_r.rearg=fa,_r.reject=function(t,e){return(va(t)?Ze:Vr)(t,la(Do(e,3)))},_r.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=Do(e,3);++r<o;){var s=t[r];e(s,r,t)&&(n.push(s),i.push(r))}return Ci(t,i),n},_r.rest=function(t,e){if("function"!=typeof t)throw new ie(l);return Ei(t,e=e===o?e:Wa(e))},_r.reverse=As,_r.sampleSize=function(t,e,n){return e=(n?Go(t,e,n):e===o)?1:Wa(e),(va(t)?Sr:Si)(t,e)},_r.set=function(t,e,n){return null==t?t:Ai(t,e,n)},_r.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Ai(t,e,n,r)},_r.shuffle=function(t){return(va(t)?Ar:Li)(t)},_r.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Go(t,e,n)?(e=0,n=r):(e=null==e?0:Wa(e),n=n===o?r:Wa(n)),Mi(t,e,n)):[]},_r.sortBy=Qs,_r.sortedUniq=function(t){return t&&t.length?Ii(t):[]},_r.sortedUniqBy=function(t,e){return t&&t.length?Ii(t,Do(e,2)):[]},_r.split=function(t,e,n){return n&&"number"!=typeof n&&Go(t,e,n)&&(e=n=o),(n=n===o?D:n>>>0)?(t=qa(t))&&("string"==typeof e||null!=e&&!Oa(e))&&!(e=Di(e))&&kn(t)?$i(Pn(t),0,n):t.split(e,n):[]},_r.spread=function(t,e){if("function"!=typeof t)throw new ie(l);return e=null==e?0:Kn(Wa(e),0),Ei(function(n){var r=n[e],i=$i(n,0,e);return r&&tn(i,r),qe(t,this,i)})},_r.tail=function(t){var e=null==t?0:t.length;return e?Mi(t,1,e):[]},_r.take=function(t,e,n){return t&&t.length?Mi(t,0,(e=n||e===o?1:Wa(e))<0?0:e):[]},_r.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Mi(t,(e=r-(e=n||e===o?1:Wa(e)))<0?0:e,r):[]},_r.takeRightWhile=function(t,e){return t&&t.length?Wi(t,Do(e,3),!1,!0):[]},_r.takeWhile=function(t,e){return t&&t.length?Wi(t,Do(e,3)):[]},_r.tap=function(t,e){return e(t),t},_r.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new ie(l);return Aa(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ia(t,e,{leading:r,maxWait:e,trailing:i})},_r.thru=Ns,_r.toArray=Ba,_r.toPairs=hl,_r.toPairsIn=fl,_r.toPath=function(t){return va(t)?Je(t,cs):Ia(t)?[t]:ro(us(qa(t)))},_r.toPlainObject=Va,_r.transform=function(t,e,n){var r=va(t),i=r||Ca(t)||Fa(t);if(e=Do(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Aa(t)&&Ea(o)?dr(Me(t)):{}}return(i?Xe:Gr)(t,function(t,r,i){return e(n,t,r,i)}),n},_r.unary=function(t){return ta(t,1)},_r.union=Ts,_r.unionBy=Rs,_r.unionWith=Ls,_r.uniq=function(t){return t&&t.length?Hi(t):[]},_r.uniqBy=function(t,e){return t&&t.length?Hi(t,Do(e,2)):[]},_r.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Hi(t,o,e):[]},_r.unset=function(t,e){return null==t||Bi(t,e)},_r.unzip=Ms,_r.unzipWith=Os,_r.update=function(t,e,n){return null==t?t:Ni(t,e,Ki(n))},_r.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Ni(t,e,Ki(n),r)},_r.values=pl,_r.valuesIn=function(t){return null==t?[]:yn(t,ol(t))},_r.without=Ps,_r.words=El,_r.wrap=function(t,e){return ca(Ki(e),t)},_r.xor=js,_r.xorBy=Is,_r.xorWith=Fs,_r.zip=Ds,_r.zipObject=function(t,e){return Vi(t||[],e||[],Rr)},_r.zipObjectDeep=function(t,e){return Vi(t||[],e||[],Ai)},_r.zipWith=Hs,_r.entries=hl,_r.entriesIn=fl,_r.extend=Xa,_r.extendWith=Ga,jl(_r,_r),_r.add=Vl,_r.attempt=kl,_r.camelCase=_l,_r.capitalize=dl,_r.ceil=ql,_r.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=za(n))==n?n:0),e!==o&&(e=(e=za(e))==e?e:0),Ir(za(t),e,n)},_r.clone=function(t){return Fr(t,_)},_r.cloneDeep=function(t){return Fr(t,f|_)},_r.cloneDeepWith=function(t,e){return Fr(t,f|_,e="function"==typeof e?e:o)},_r.cloneWith=function(t,e){return Fr(t,_,e="function"==typeof e?e:o)},_r.conformsTo=function(t,e){return null==e||Dr(t,e,il(e))},_r.deburr=ml,_r.defaultTo=function(t,e){return null==t||t!=t?e:t},_r.divide=Kl,_r.endsWith=function(t,e,n){t=qa(t),e=Di(e);var r=t.length,i=n=n===o?r:Ir(Wa(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},_r.eq=pa,_r.escape=function(t){return(t=qa(t))&&kt.test(t)?t.replace(xt,xn):t},_r.escapeRegExp=function(t){return(t=qa(t))&&Pt.test(t)?t.replace(Ot,"\\$&"):t},_r.every=function(t,e,n){var r=va(t)?$e:Ur;return n&&Go(t,e,n)&&(e=o),r(t,Do(e,3))},_r.find=zs,_r.findIndex=ms,_r.findKey=function(t,e){return sn(t,Do(e,3),Gr)},_r.findLast=Vs,_r.findLastIndex=vs,_r.findLastKey=function(t,e){return sn(t,Do(e,3),$r)},_r.floor=Xl,_r.forEach=qs,_r.forEachRight=Ks,_r.forIn=function(t,e){return null==t?t:Kr(t,Do(e,3),ol)},_r.forInRight=function(t,e){return null==t?t:Xr(t,Do(e,3),ol)},_r.forOwn=function(t,e){return t&&Gr(t,Do(e,3))},_r.forOwnRight=function(t,e){return t&&$r(t,Do(e,3))},_r.get=Ja,_r.gt=_a,_r.gte=da,_r.has=function(t,e){return null!=t&&Vo(t,e,ei)},_r.hasIn=tl,_r.head=gs,_r.identity=Ll,_r.includes=function(t,e,n,r){t=ga(t)?t:pl(t),n=n&&!r?Wa(n):0;var i=t.length;return n<0&&(n=Kn(i+n,0)),ja(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&ln(t,e,n)>-1},_r.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Wa(n);return i<0&&(i=Kn(r+i,0)),ln(t,e,i)},_r.inRange=function(t,e,n){return e=Na(e),n===o?(n=e,e=0):n=Na(n),function(t,e,n){return t>=Xn(e,n)&&t<Kn(e,n)}(t=za(t),e,n)},_r.invoke=rl,_r.isArguments=ma,_r.isArray=va,_r.isArrayBuffer=ya,_r.isArrayLike=ga,_r.isArrayLikeObject=ba,_r.isBoolean=function(t){return!0===t||!1===t||Ta(t)&&Jr(t)==V},_r.isBuffer=Ca,_r.isDate=wa,_r.isElement=function(t){return Ta(t)&&1===t.nodeType&&!Ma(t)},_r.isEmpty=function(t){if(null==t)return!0;if(ga(t)&&(va(t)||"string"==typeof t||"function"==typeof t.splice||Ca(t)||Fa(t)||ma(t)))return!t.length;var e=zo(t);if(e==Z||e==nt)return!t.size;if(Qo(t))return!ci(t).length;for(var n in t)if(ce.call(t,n))return!1;return!0},_r.isEqual=function(t,e){return si(t,e)},_r.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?si(t,e,o,n):!!r},_r.isError=xa,_r.isFinite=function(t){return"number"==typeof t&&zn(t)},_r.isFunction=Ea,_r.isInteger=ka,_r.isLength=Sa,_r.isMap=Ra,_r.isMatch=function(t,e){return t===e||ai(t,e,Bo(e))},_r.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,ai(t,e,Bo(e),n)},_r.isNaN=function(t){return La(t)&&t!=+t},_r.isNative=function(t){if(Yo(t))throw new Qt(a);return li(t)},_r.isNil=function(t){return null==t},_r.isNull=function(t){return null===t},_r.isNumber=La,_r.isObject=Aa,_r.isObjectLike=Ta,_r.isPlainObject=Ma,_r.isRegExp=Oa,_r.isSafeInteger=function(t){return ka(t)&&t>=-j&&t<=j},_r.isSet=Pa,_r.isString=ja,_r.isSymbol=Ia,_r.isTypedArray=Fa,_r.isUndefined=function(t){return t===o},_r.isWeakMap=function(t){return Ta(t)&&zo(t)==st},_r.isWeakSet=function(t){return Ta(t)&&Jr(t)==at},_r.join=function(t,e){return null==t?"":Vn.call(t,e)},_r.kebabCase=vl,_r.last=xs,_r.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Wa(n))<0?Kn(r+i,0):Xn(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):an(t,cn,i,!0)},_r.lowerCase=yl,_r.lowerFirst=gl,_r.lt=Da,_r.lte=Ha,_r.max=function(t){return t&&t.length?zr(t,Ll,ti):o},_r.maxBy=function(t,e){return t&&t.length?zr(t,Do(e,2),ti):o},_r.mean=function(t){return hn(t,Ll)},_r.meanBy=function(t,e){return hn(t,Do(e,2))},_r.min=function(t){return t&&t.length?zr(t,Ll,fi):o},_r.minBy=function(t,e){return t&&t.length?zr(t,Do(e,2),fi):o},_r.stubArray=Ul,_r.stubFalse=zl,_r.stubObject=function(){return{}},_r.stubString=function(){return""},_r.stubTrue=function(){return!0},_r.multiply=$l,_r.nth=function(t,e){return t&&t.length?vi(t,Wa(e)):o},_r.noConflict=function(){return Pe._===this&&(Pe._=de),this},_r.noop=Il,_r.now=Js,_r.pad=function(t,e,n){t=qa(t);var r=(e=Wa(e))?On(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return go(Nn(i),n)+t+go(Bn(i),n)},_r.padEnd=function(t,e,n){t=qa(t);var r=(e=Wa(e))?On(t):0;return e&&r<e?t+go(e-r,n):t},_r.padStart=function(t,e,n){t=qa(t);var r=(e=Wa(e))?On(t):0;return e&&r<e?go(e-r,n)+t:t},_r.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),$n(qa(t).replace(It,""),e||0)},_r.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Go(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=Na(t),e===o?(e=t,t=0):e=Na(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Zn();return Xn(t+i*(e-t+Re("1e-"+((i+"").length-1))),e)}return wi(t,e)},_r.reduce=function(t,e,n){var r=va(t)?en:_n,i=arguments.length<3;return r(t,Do(e,4),n,i,Nr)},_r.reduceRight=function(t,e,n){var r=va(t)?nn:_n,i=arguments.length<3;return r(t,Do(e,4),n,i,Wr)},_r.repeat=function(t,e,n){return e=(n?Go(t,e,n):e===o)?1:Wa(e),xi(qa(t),e)},_r.replace=function(){var t=arguments,e=qa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},_r.result=function(t,e,n){var r=-1,i=(e=Xi(e,t)).length;for(i||(i=1,t=o);++r<i;){var s=null==t?o:t[cs(e[r])];s===o&&(r=i,s=n),t=Ea(s)?s.call(t):s}return t},_r.round=Zl,_r.runInContext=t,_r.sample=function(t){return(va(t)?kr:ki)(t)},_r.size=function(t){if(null==t)return 0;if(ga(t))return ja(t)?On(t):t.length;var e=zo(t);return e==Z||e==nt?t.size:ci(t).length},_r.snakeCase=bl,_r.some=function(t,e,n){var r=va(t)?rn:Oi;return n&&Go(t,e,n)&&(e=o),r(t,Do(e,3))},_r.sortedIndex=function(t,e){return Pi(t,e)},_r.sortedIndexBy=function(t,e,n){return ji(t,e,Do(n,2))},_r.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Pi(t,e);if(r<n&&pa(t[r],e))return r}return-1},_r.sortedLastIndex=function(t,e){return Pi(t,e,!0)},_r.sortedLastIndexBy=function(t,e,n){return ji(t,e,Do(n,2),!0)},_r.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Pi(t,e,!0)-1;if(pa(t[n],e))return n}return-1},_r.startCase=Cl,_r.startsWith=function(t,e,n){return t=qa(t),n=null==n?0:Ir(Wa(n),0,t.length),e=Di(e),t.slice(n,n+e.length)==e},_r.subtract=Yl,_r.sum=function(t){return t&&t.length?dn(t,Ll):0},_r.sumBy=function(t,e){return t&&t.length?dn(t,Do(e,2)):0},_r.template=function(t,e,n){var r=_r.templateSettings;n&&Go(t,e,n)&&(e=o),t=qa(t),e=Ga({},e,r,Ao);var i,s,a=Ga({},e.imports,r.imports,Ao),l=il(a),u=yn(a,l),c=0,h=e.interpolate||Zt,f="__p += '",p=ne((e.escape||Zt).source+"|"+h.source+"|"+(h===Tt?Ut:Zt).source+"|"+(e.evaluate||Zt).source+"|$","g"),_="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++ke+"]")+"\n";t.replace(p,function(e,n,r,o,a,l){return r||(r=o),f+=t.slice(c,l).replace(Yt,En),n&&(i=!0,f+="' +\n__e("+n+") +\n'"),a&&(s=!0,f+="';\n"+a+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=l+e.length,e}),f+="';\n";var d=e.variable;d||(f="with (obj) {\n"+f+"\n}\n"),f=(s?f.replace(gt,""):f).replace(bt,"$1").replace(Ct,"$1;"),f="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var m=kl(function(){return Jt(l,_+"return "+f).apply(o,u)});if(m.source=f,xa(m))throw m;return m},_r.times=function(t,e){if((t=Wa(t))<1||t>j)return[];var n=D,r=Xn(t,D);e=Do(e),t-=D;for(var i=mn(r,e);++n<t;)e(n);return i},_r.toFinite=Na,_r.toInteger=Wa,_r.toLength=Ua,_r.toLower=function(t){return qa(t).toLowerCase()},_r.toNumber=za,_r.toSafeInteger=function(t){return t?Ir(Wa(t),-j,j):0===t?t:0},_r.toString=qa,_r.toUpper=function(t){return qa(t).toUpperCase()},_r.trim=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(jt,"");if(!t||!(e=Di(e)))return t;var r=Pn(t),i=Pn(e);return $i(r,bn(r,i),Cn(r,i)+1).join("")},_r.trimEnd=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(Ft,"");if(!t||!(e=Di(e)))return t;var r=Pn(t);return $i(r,0,Cn(r,Pn(e))+1).join("")},_r.trimStart=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(It,"");if(!t||!(e=Di(e)))return t;var r=Pn(t);return $i(r,bn(r,Pn(e))).join("")},_r.truncate=function(t,e){var n=A,r=T;if(Aa(e)){var i="separator"in e?e.separator:i;n="length"in e?Wa(e.length):n,r="omission"in e?Di(e.omission):r}var s=(t=qa(t)).length;if(kn(t)){var a=Pn(t);s=a.length}if(n>=s)return t;var l=n-On(r);if(l<1)return r;var u=a?$i(a,0,l).join(""):t.slice(0,l);if(i===o)return u+r;if(a&&(l+=u.length-l),Oa(i)){if(t.slice(l).search(i)){var c,h=u;for(i.global||(i=ne(i.source,qa(zt.exec(i))+"g")),i.lastIndex=0;c=i.exec(h);)var f=c.index;u=u.slice(0,f===o?l:f)}}else if(t.indexOf(Di(i),l)!=l){var p=u.lastIndexOf(i);p>-1&&(u=u.slice(0,p))}return u+r},_r.unescape=function(t){return(t=qa(t))&&Et.test(t)?t.replace(wt,jn):t},_r.uniqueId=function(t){var e=++he;return qa(t)+e},_r.upperCase=wl,_r.upperFirst=xl,_r.each=qs,_r.eachRight=Ks,_r.first=gs,jl(_r,(Gl={},Gr(_r,function(t,e){ce.call(_r.prototype,e)||(Gl[e]=t)}),Gl),{chain:!1}),_r.VERSION="4.17.10",Xe(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){_r[t].placeholder=_r}),Xe(["drop","take"],function(t,e){yr.prototype[t]=function(n){n=n===o?1:Kn(Wa(n),0);var r=this.__filtered__&&!e?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Xn(n,r.__takeCount__):r.__views__.push({size:Xn(n,D),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Xe(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==M||3==n;yr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Do(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Xe(["head","last"],function(t,e){var n="take"+(e?"Right":"");yr.prototype[t]=function(){return this[n](1).value()[0]}}),Xe(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Ll)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=Ei(function(t,e){return"function"==typeof t?new yr(this):this.map(function(n){return ii(n,t,e)})}),yr.prototype.reject=function(t){return this.filter(la(Do(t)))},yr.prototype.slice=function(t,e){t=Wa(t);var n=this;return n.__filtered__&&(t>0||e<0)?new yr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=Wa(e))<0?n.dropRight(-e):n.take(e-t)),n)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(D)},Gr(yr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=_r[r?"take"+("last"==e?"Right":""):e],s=r||/^find/.test(e);i&&(_r.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,l=e instanceof yr,u=a[0],c=l||va(e),h=function(t){var e=i.apply(_r,tn([t],a));return r&&f?e[0]:e};c&&n&&"function"==typeof u&&1!=u.length&&(l=c=!1);var f=this.__chain__,p=!!this.__actions__.length,_=s&&!f,d=l&&!p;if(!s&&c){e=d?e:new yr(this);var m=t.apply(e,a);return m.__actions__.push({func:Ns,args:[h],thisArg:o}),new vr(m,f)}return _&&d?t.apply(this,a):(m=this.thru(h),_?r?m.value()[0]:m.value():m)})}),Xe(["pop","push","shift","sort","splice","unshift"],function(t){var e=oe[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);_r.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(va(i)?i:[],t)}return this[n](function(n){return e.apply(va(n)?n:[],t)})}}),Gr(yr.prototype,function(t,e){var n=_r[e];if(n){var r=n.name+"";(or[r]||(or[r]=[])).push({name:e,func:n})}}),or[_o(o,y).name]=[{name:"wrapper",func:o}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=ro(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ro(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ro(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=va(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=Xn(e,t+s);break;case"takeRight":t=Kn(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,a=o.end,l=a-s,u=r?a:s-1,c=this.__iteratees__,h=c.length,f=0,p=Xn(l,this.__takeCount__);if(!n||!r&&i==l&&p==l)return Ui(t,this.__actions__);var _=[];t:for(;l--&&f<p;){for(var d=-1,m=t[u+=e];++d<h;){var v=c[d],y=v.iteratee,g=v.type,b=y(m);if(g==O)m=b;else if(!b){if(g==M)continue t;break t}}_[f++]=m}return _},_r.prototype.at=Ws,_r.prototype.chain=function(){return Bs(this)},_r.prototype.commit=function(){return new vr(this.value(),this.__chain__)},_r.prototype.next=function(){this.__values__===o&&(this.__values__=Ba(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},_r.prototype.plant=function(t){for(var e,n=this;n instanceof mr;){var r=fs(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},_r.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var e=t;return this.__actions__.length&&(e=new yr(this)),(e=e.reverse()).__actions__.push({func:Ns,args:[As],thisArg:o}),new vr(e,this.__chain__)}return this.thru(As)},_r.prototype.toJSON=_r.prototype.valueOf=_r.prototype.value=function(){return Ui(this.__wrapped__,this.__actions__)},_r.prototype.first=_r.prototype.head,He&&(_r.prototype[He]=function(){return this}),_r}();Pe._=In,(i=function(){return In}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(3),n(32)(t))},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="undefined"==typeof navigator,i=r?"node":navigator.userAgent,o=r?"node":navigator.platform;function s(t,e){return t.indexOf(e)>=0}e.isFirefox=!!~i.indexOf("Firefox"),e.isMSIE=!!~i.indexOf("MSIE")||!!~i.indexOf("Trident"),e.isMac=s(["Macintosh","MacIntel","MacPPC","Mac68K"],o),e.isIpad="iPad"===o,e.isIphone="iPhone"===o,e.isMSWindows=s(["Windows","Win16","Win32","WinCE"],o),e.isLinux=o.indexOf("Linux")>=0},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(6),i=n(22),o=n(1),s=function(){function t(t,e,n,r,i){this._container=t,this._alpha=r,this._colors=i,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+e+"-layer"),this._canvas.style.zIndex=n.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return t.prototype._initCanvas=function(){this._ctx=this._canvas.getContext("2d",{alpha:this._alpha}),this._alpha||this.clearAll()},t.prototype.onOptionsChanged=function(t){},t.prototype.onBlur=function(t){},t.prototype.onFocus=function(t){},t.prototype.onCursorMove=function(t){},t.prototype.onGridChanged=function(t,e,n){},t.prototype.onSelectionChanged=function(t,e,n){},t.prototype.onThemeChanged=function(t,e){this._refreshCharAtlas(t,e)},t.prototype.setTransparency=function(t,e){if(e!==this._alpha){var n=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,n),this._refreshCharAtlas(t,this._colors),this.onGridChanged(t,0,t.rows-1)}},t.prototype._refreshCharAtlas=function(t,e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=i.acquireCharAtlas(t,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},t.prototype.resize=function(t,e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this.clearAll(),this._refreshCharAtlas(t,this._colors)},t.prototype.fillCells=function(t,e,n,r){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,n*this._scaledCellWidth,r*this._scaledCellHeight)},t.prototype.fillBottomLineAtCells=function(t,e,n){void 0===n&&(n=1),this._ctx.fillRect(t*this._scaledCellWidth,(e+1)*this._scaledCellHeight-window.devicePixelRatio-1,n*this._scaledCellWidth,window.devicePixelRatio)},t.prototype.fillLeftLineAtCell=function(t,e){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,window.devicePixelRatio,this._scaledCellHeight)},t.prototype.strokeRectAtCell=function(t,e,n,r){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(t*this._scaledCellWidth+window.devicePixelRatio/2,e*this._scaledCellHeight+window.devicePixelRatio/2,n*this._scaledCellWidth-window.devicePixelRatio,r*this._scaledCellHeight-window.devicePixelRatio)},t.prototype.clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},t.prototype.clearCells=function(t,e,n,r){this._alpha?this._ctx.clearRect(t*this._scaledCellWidth,e*this._scaledCellHeight,n*this._scaledCellWidth,r*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,n*this._scaledCellWidth,r*this._scaledCellHeight))},t.prototype.fillCharTrueColor=function(t,e,n,r){this._ctx.font=this._getFont(t,!1,!1),this._ctx.textBaseline="top",this._clipRow(t,r),this._ctx.fillText(e[o.CHAR_DATA_CHAR_INDEX],n*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop)},t.prototype.drawChar=function(t,e,n,r,i,o,s,a,l,u,c){s+=t.options.drawBoldTextInBrightColors&&l&&s<8?8:0,this._charAtlas&&this._charAtlas.draw(this._ctx,{char:e,code:n,bg:a,fg:s,bold:l&&t.options.enableBold,dim:u,italic:c},i*this._scaledCellWidth+this._scaledCharLeft,o*this._scaledCellHeight+this._scaledCharTop)||this._drawUncachedChar(t,e,r,s,i,o,l&&t.options.enableBold,u,c)},t.prototype._drawUncachedChar=function(t,e,n,i,o,s,a,l,u){this._ctx.save(),this._ctx.font=this._getFont(t,a,u),this._ctx.textBaseline="top",i===r.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:this._ctx.fillStyle=i<256?this._colors.ansi[i].css:this._colors.foreground.css,this._clipRow(t,s),l&&(this._ctx.globalAlpha=r.DIM_OPACITY),this._ctx.fillText(e,o*this._scaledCellWidth+this._scaledCharLeft,s*this._scaledCellHeight+this._scaledCharTop),this._ctx.restore()},t.prototype._clipRow=function(t,e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,t.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},t.prototype._getFont=function(t,e,n){var r=e?t.options.fontWeightBold:t.options.fontWeight;return(n?"italic":"")+" "+r+" "+t.options.fontSize*window.devicePixelRatio+"px "+t.options.fontFamily},t}();e.BaseRenderLayer=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.INVERTED_DEFAULT_COLOR=-1,e.DIM_OPACITY=.5},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.NUL="\0",t.SOH="",t.STX="",t.ETX="",t.EOT="",t.ENQ="",t.ACK="",t.BEL="",t.BS="\b",t.HT="\t",t.LF="\n",t.VT="\v",t.FF="\f",t.CR="\r",t.SO="",t.SI="",t.DLE="",t.DC1="",t.DC2="",t.DC3="",t.DC4="",t.NAK="",t.SYN="",t.ETB="",t.CAN="",t.EM="",t.SUB="",t.ESC="",t.FS="",t.GS="",t.RS="",t.US="",t.SP=" ",t.DEL=""}(e.C0||(e.C0={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=l("#ffffff"),i=l("#000000"),o=l("#ffffff"),s=l("#000000"),a={css:"rgba(255, 255, 255, 0.3)",rgba:4294967159};function l(t){return{css:t,rgba:parseInt(t.slice(1),16)<<8|255}}function u(t){var e=t.toString(16);return e.length<2?"0"+e:e}e.DEFAULT_ANSI_COLORS=function(){for(var t=[l("#2e3436"),l("#cc0000"),l("#4e9a06"),l("#c4a000"),l("#3465a4"),l("#75507b"),l("#06989a"),l("#d3d7cf"),l("#555753"),l("#ef2929"),l("#8ae234"),l("#fce94f"),l("#729fcf"),l("#ad7fa8"),l("#34e2e2"),l("#eeeeec")],e=[0,95,135,175,215,255],n=0;n<216;n++){var r=e[n/36%6|0],i=e[n/6%6|0],o=e[n%6];t.push({css:"#"+u(r)+u(i)+u(o),rgba:(r<<24|i<<16|o<<8|255)>>>0})}for(n=0;n<24;n++){var s=8+10*n,a=u(s);t.push({css:"#"+a+a+a,rgba:(s<<24|s<<16|s<<8|255)>>>0})}return t}();var c=function(){function t(t,n){this.allowTransparency=n;var l=t.createElement("canvas");l.width=1,l.height=1,this._ctx=l.getContext("2d"),this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this.colors={foreground:r,background:i,cursor:o,cursorAccent:s,selection:a,ansi:e.DEFAULT_ANSI_COLORS.slice()}}return t.prototype.setTheme=function(t){this.colors.foreground=this._parseColor(t.foreground,r),this.colors.background=this._parseColor(t.background,i),this.colors.cursor=this._parseColor(t.cursor,o,!0),this.colors.cursorAccent=this._parseColor(t.cursorAccent,s,!0),this.colors.selection=this._parseColor(t.selection,a,!0),this.colors.ansi[0]=this._parseColor(t.black,e.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(t.red,e.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(t.green,e.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(t.yellow,e.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(t.blue,e.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(t.magenta,e.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(t.cyan,e.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(t.white,e.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(t.brightBlack,e.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(t.brightRed,e.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(t.brightGreen,e.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(t.brightYellow,e.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(t.brightBlue,e.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(t.brightMagenta,e.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(t.brightCyan,e.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(t.brightWhite,e.DEFAULT_ANSI_COLORS[15])},t.prototype._parseColor=function(t,e,n){if(void 0===n&&(n=this.allowTransparency),!t)return e;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=t,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+t+" is invalid using fallback "+e.css),e;this._ctx.fillRect(0,0,1,1);var r=this._ctx.getImageData(0,0,1,1).data;return n||255===r[3]?{css:t,rgba:(r[0]<<24|r[1]<<16|r[2]<<8|r[3])>>>0}:(console.warn("Color: "+t+" is using transparency, but allowTransparency is false. Using fallback "+e.css+"."),e)},t}();e.ColorManager=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this._didWarmUp=!1}return t.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},t.prototype._doWarmUp=function(){},t.prototype.beginFrame=function(){},t}();e.default=r},function(t,e,n){(function(e,n,r){t.exports=function(){var t,i,o;return function t(e,n,r){function i(s,a){if(!n[s]){if(!e[s]){var l="function"==typeof _dereq_&&_dereq_;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[s]={exports:{}};e[s][0].call(c.exports,function(t){var n=e[s][1][t];return i(n||t)},c,c.exports,t,e,n,r)}return n[s].exports}for(var o="function"==typeof _dereq_&&_dereq_,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(t,e,n){"use strict";e.exports=function(t){var e=t._SomePromiseArray;function n(t){var n=new e(t),r=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),r}t.any=function(t){return n(t)},t.prototype.any=function(){return n(this)}}},{}],2:[function(t,n,r){"use strict";var i;try{throw new Error}catch(t){i=t}var o=t("./schedule"),s=t("./queue"),a=t("./util");function l(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new s(16),this._normalQueue=new s(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=o}function u(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function c(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function h(t){this._normalQueue._pushOne(t),this._queueTick()}l.prototype.setScheduler=function(t){var e=this._schedule;return this._schedule=t,this._customScheduler=!0,e},l.prototype.hasCustomScheduler=function(){return this._customScheduler},l.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},l.prototype.disableTrampolineIfNecessary=function(){a.hasDevTools&&(this._trampolineEnabled=!1)},l.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},l.prototype.fatalError=function(t,n){n?(e.stderr.write("Fatal "+(t instanceof Error?t.stack:t)+"\n"),e.exit(2)):this.throwLater(t)},l.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(t){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},a.hasDevTools?(l.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?u.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},l.prototype.invoke=function(t,e,n){this._trampolineEnabled?c.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},l.prototype.settlePromises=function(t){this._trampolineEnabled?h.call(this,t):this._schedule(function(){t._settlePromises()})}):(l.prototype.invokeLater=u,l.prototype.invoke=c,l.prototype.settlePromises=h),l.prototype._drainQueue=function(t){for(;t.length()>0;){var e=t.shift();if("function"==typeof e){var n=t.shift(),r=t.shift();e.call(n,r)}else e._settlePromises()}},l.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},l.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},l.prototype._reset=function(){this._isTickUsed=!1},n.exports=l,n.exports.firstLineError=i},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},s=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},a=function(t,e){0==(50397184&this._bitField)&&this._resolveCallback(e.target)},l=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var u=n(o),c=new t(e);c._propagateFrom(this,1);var h=this._target();if(c._setBoundTo(u),u instanceof t){var f={promiseRejectionQueued:!1,promise:c,target:h,bindingPromise:u};h._then(e,s,void 0,c,f),u._then(a,l,void 0,c,f),c._setOnCancel(u)}else c._resolveCallback(h);return c},t.prototype._setBoundTo=function(t){void 0!==t?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=-2097153&this._bitField},t.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";var r;"undefined"!=typeof Promise&&(r=Promise);var i=t("./promise")();i.noConflict=function(){try{Promise===i&&(Promise=r)}catch(t){}return i},e.exports=i},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){var n=t("./util"),r=n.canEvaluate;function i(t){var r=this.pop(),i=function(t,r){var i;if(null!=t&&(i=t[r]),"function"!=typeof i){var o="Object "+n.classString(t)+" has no method '"+n.toString(r)+"'";throw new e.TypeError(o)}return i}(t,r);return i.apply(t,this)}function o(t){return t[this]}function s(t){var e=+this;return e<0&&(e=Math.max(0,e+t.length)),t[e]}n.isIdentifier,e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(i,void 0,void 0,e,void 0)},e.prototype.get=function(t){var e,n="number"==typeof t;if(n)e=s;else if(r){var i=(void 0)(t);e=null!==i?i:o}else e=o;return this._then(e,void 0,void 0,t,void 0)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=o.tryCatch,a=o.errorObj,l=e._async;e.prototype.break=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t._isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n._isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),t._setWillBeCancelled(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),l.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(void 0!==t)if("function"==typeof t){if(!e){var r=s(t).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),l.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),l.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=t("./es5").keys,i=n.tryCatch,o=n.errorObj;return function(t,s,a){return function(l){var u=a._boundValue();t:for(var c=0;c<t.length;++c){var h=t[c];if(h===Error||null!=h&&h.prototype instanceof Error){if(l instanceof h)return i(s).call(u,l)}else if("function"==typeof h){var f=i(h).call(u,l);if(f===o)return f;if(f)return i(s).call(u,l)}else if(n.isObject(l)){for(var p=r(h),_=0;_<p.length;++_){var d=p[_];if(h[d]!=l[d])continue t}return i(s).call(u,l)}}return e}}}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){var e=!1,n=[];function r(){this._trace=new r.CapturedTrace(i())}function i(){var t=n.length-1;if(t>=0)return n[t]}return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},r.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},r.prototype._popContext=function(){if(void 0!==this._trace){var t=n.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},r.CapturedTrace=null,r.create=function(){if(e)return new r},r.deactivateLongStackTraces=function(){},r.activateLongStackTraces=function(){var n=t.prototype._pushContext,o=t.prototype._popContext,s=t._peekContext,a=t.prototype._peekContext,l=t.prototype._promiseCreated;r.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=o,t._peekContext=s,t.prototype._peekContext=a,t.prototype._promiseCreated=l,e=!1},e=!0,t.prototype._pushContext=r.prototype._pushContext,t.prototype._popContext=r.prototype._popContext,t._peekContext=t.prototype._peekContext=i,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},r}},{}],9:[function(t,n,r){"use strict";n.exports=function(n,r){var i,o,s,a=n._getDomain,l=n._async,u=t("./errors").Warning,c=t("./util"),h=c.canAttachTrace,f=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,p=/\((?:timers\.js):\d+:\d+\)/,_=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,d=null,m=null,v=!1,y=!(0==c.env("BLUEBIRD_DEBUG")),g=!(0==c.env("BLUEBIRD_WARNINGS")||!y&&!c.env("BLUEBIRD_WARNINGS")),b=!(0==c.env("BLUEBIRD_LONG_STACK_TRACES")||!y&&!c.env("BLUEBIRD_LONG_STACK_TRACES")),C=0!=c.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(g||!!c.env("BLUEBIRD_W_FORGOTTEN_RETURN"));n.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=-1048577&t._bitField|524288},n.prototype._ensurePossibleRejectionHandled=function(){if(0==(524288&this._bitField)){this._setRejectionIsUnhandled();var t=this;setTimeout(function(){t._notifyUnhandledRejection()},1)}},n.prototype._notifyUnhandledRejectionIsHandled=function(){z("rejectionHandled",i,void 0,this)},n.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},n.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},n.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),z("unhandledRejection",o,t,this)}},n.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},n.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},n.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},n.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},n.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},n.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},n.prototype._warn=function(t,e,n){return B(t,e,n||this)},n.onPossiblyUnhandledRejection=function(t){var e=a();o="function"==typeof t?null===e?t:c.domainBind(e,t):void 0},n.onUnhandledRejectionHandled=function(t){var e=a();i="function"==typeof t?null===e?t:c.domainBind(e,t):void 0};var w=function(){};n.longStackTraces=function(){if(l.haveItemsQueued()&&!Y.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!Y.longStackTraces&&q()){var t=n.prototype._captureStackTrace,e=n.prototype._attachExtraTrace;Y.longStackTraces=!0,w=function(){if(l.haveItemsQueued()&&!Y.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");n.prototype._captureStackTrace=t,n.prototype._attachExtraTrace=e,r.deactivateLongStackTraces(),l.enableTrampoline(),Y.longStackTraces=!1},n.prototype._captureStackTrace=D,n.prototype._attachExtraTrace=H,r.activateLongStackTraces(),l.disableTrampolineIfNecessary()}},n.hasLongStackTraces=function(){return Y.longStackTraces&&q()};var x=function(){try{if("function"==typeof CustomEvent){var t=new CustomEvent("CustomEvent");return c.global.dispatchEvent(t),function(t,e){var n=new CustomEvent(t.toLowerCase(),{detail:e,cancelable:!0});return!c.global.dispatchEvent(n)}}if("function"==typeof Event){var t=new Event("CustomEvent");return c.global.dispatchEvent(t),function(t,e){var n=new Event(t.toLowerCase(),{cancelable:!0});return n.detail=e,!c.global.dispatchEvent(n)}}var t=document.createEvent("CustomEvent");return t.initCustomEvent("testingtheevent",!1,!0,{}),c.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!c.global.dispatchEvent(n)}}catch(t){}return function(){return!1}}(),E=c.isNode?function(){return e.emit.apply(e,arguments)}:c.global?function(t){var e="on"+t.toLowerCase(),n=c.global[e];return!!n&&(n.apply(c.global,[].slice.call(arguments,1)),!0)}:function(){return!1};function k(t,e){return{promise:e}}var S={promiseCreated:k,promiseFulfilled:k,promiseRejected:k,promiseResolved:k,promiseCancelled:k,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:k},A=function(t){var e=!1;try{e=E.apply(null,arguments)}catch(t){l.throwLater(t),e=!0}var n=!1;try{n=x(t,S[t].apply(null,arguments))}catch(t){l.throwLater(t),n=!0}return n||e};function T(){return!1}function R(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+c.toString(t));r._attachCancellationCallback(t)})}catch(t){return t}}function L(t){if(!this._isCancellable())return this;var e=this._onCancel();void 0!==e?c.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function M(){return this._onCancelField}function O(t){this._onCancelField=t}function P(){this._cancellationParent=void 0,this._onCancelField=void 0}function j(t,e){if(0!=(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;void 0===n&&(n=0),t._branchesRemainingToCancel=n+1}0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}n.config=function(t){if("longStackTraces"in(t=Object(t))&&(t.longStackTraces?n.longStackTraces():!t.longStackTraces&&n.hasLongStackTraces()&&w()),"warnings"in t){var e=t.warnings;Y.warnings=!!e,C=Y.warnings,c.isObject(e)&&"wForgottenReturn"in e&&(C=!!e.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!Y.cancellation){if(l.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");n.prototype._clearCancellationData=P,n.prototype._propagateFrom=j,n.prototype._onCancel=M,n.prototype._setOnCancel=O,n.prototype._attachCancellationCallback=L,n.prototype._execute=R,I=j,Y.cancellation=!0}return"monitoring"in t&&(t.monitoring&&!Y.monitoring?(Y.monitoring=!0,n.prototype._fireEvent=A):!t.monitoring&&Y.monitoring&&(Y.monitoring=!1,n.prototype._fireEvent=T)),n},n.prototype._fireEvent=T,n.prototype._execute=function(t,e,n){try{t(e,n)}catch(t){return t}},n.prototype._onCancel=function(){},n.prototype._setOnCancel=function(t){},n.prototype._attachCancellationCallback=function(t){},n.prototype._captureStackTrace=function(){},n.prototype._attachExtraTrace=function(){},n.prototype._clearCancellationData=function(){},n.prototype._propagateFrom=function(t,e){};var I=function(t,e){0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)};function F(){var t=this._boundTo;return void 0!==t&&t instanceof n?t.isFulfilled()?t.value():void 0:t}function D(){this._trace=new $(this._peekContext())}function H(t,e){if(h(t)){var n=this._trace;if(void 0!==n&&e&&(n=n._parent),void 0!==n)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=W(t);c.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),c.notEnumerableProp(t,"__stackCleaned__",!0)}}}function B(t,e,r){if(Y.warnings){var i,o=new u(t);if(e)r._attachExtraTrace(o);else if(Y.longStackTraces&&(i=n._peekContext()))i.attachExtraTrace(o);else{var s=W(o);o.stack=s.message+"\n"+s.stack.join("\n")}A("warning",o)||U(o,"",!0)}}function N(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||d.test(r),o=i&&K(r);i&&!o&&(v&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function W(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?function(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||d.test(r))break}return n>0&&"SyntaxError"!=t.name&&(e=e.slice(n)),e}(t):["    (No stack trace)"],{message:n,stack:"SyntaxError"==t.name?e:N(e)}}function U(t,e,n){if("undefined"!=typeof console){var r;if(c.isObject(t)){var i=t.stack;r=e+m(i,t)}else r=e+String(t);"function"==typeof s?s(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function z(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(t){l.throwLater(t)}"unhandledRejection"===t?A(t,n,r)||i||U(n,"Unhandled rejection "):A(t,r)}function V(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{if(e=t&&"function"==typeof t.toString?t.toString():c.toString(t),/\[object [a-zA-Z0-9$_]+\]/.test(e))try{var n=JSON.stringify(t);e=n}catch(t){}0===e.length&&(e="(empty array)")}return"(<"+function(t){return t.length<41?t:t.substr(0,38)+"..."}(e)+">, no stack trace)"}function q(){return"function"==typeof Z}var K=function(){return!1},X=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;function G(t){var e=t.match(X);if(e)return{fileName:e[1],line:parseInt(e[2],10)}}function $(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(void 0===t?0:t._length);Z(this,$),e>32&&this.uncycle()}c.inherits($,Error),r.CapturedTrace=$,$.prototype.uncycle=function(){var t=this._length;if(!(t<2)){for(var e=[],n={},r=0,i=this;void 0!==i;++r)e.push(i),i=i._parent;for(var r=(t=this._length=r)-1;r>=0;--r){var o=e[r].stack;void 0===n[o]&&(n[o]=r)}for(var r=0;r<t;++r){var s=e[r].stack,a=n[s];if(void 0!==a&&a!==r){a>0&&(e[a-1]._parent=void 0,e[a-1]._length=1),e[r]._parent=void 0,e[r]._length=1;var l=r>0?e[r-1]:this;a<t-1?(l._parent=e[a+1],l._parent.uncycle(),l._length=l._parent._length+1):(l._parent=void 0,l._length=1);for(var u=l._length+1,c=r-2;c>=0;--c)e[c]._length=u,u++;return}}}},$.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=W(t),n=e.message,r=[e.stack],i=this;void 0!==i;)r.push(N(i.stack.split("\n"))),i=i._parent;!function(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(var a=s;a>=0;--a){var l=r[a];if(e[i]!==l)break;e.pop(),i--}e=r}}(r),function(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}(r),c.notEnumerableProp(t,"stack",function(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}(n,r)),c.notEnumerableProp(t,"__stackCleaned__",!0)}};var Z=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:void 0!==e.name&&void 0!==e.message?e.toString():V(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,d=t,m=e;var n=Error.captureStackTrace;return K=function(t){return f.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r,i=new Error;if("string"==typeof i.stack&&i.stack.split("\n")[0].indexOf("stackDetection@")>=0)return d=/@/,m=e,v=!0,function(t){t.stack=(new Error).stack};try{throw new Error}catch(t){r="stack"in t}return"stack"in i||!r||"number"!=typeof Error.stackTraceLimit?(m=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||void 0===e.name||void 0===e.message?V(e):e.toString()},null):(d=t,m=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}();"undefined"!=typeof console&&void 0!==console.warn&&(s=function(t){console.warn(t)},c.isNode&&e.stderr.isTTY?s=function(t,e){var n=e?"[33m":"[31m";console.warn(n+t+"[0m\n")}:c.isNode||"string"!=typeof(new Error).stack||(s=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var Y={warnings:g,longStackTraces:!1,cancellation:!1,monitoring:!1};return b&&n.longStackTraces(),{longStackTraces:function(){return Y.longStackTraces},warnings:function(){return Y.warnings},cancellation:function(){return Y.cancellation},monitoring:function(){return Y.monitoring},propagateFromFunction:function(){return I},boundValueFunction:function(){return F},checkForgottenReturns:function(t,e,n,r,i){if(void 0===t&&null!==e&&C){if(void 0!==i&&i._returnedNonUndefined())return;if(0==(65535&r._bitField))return;n&&(n+=" ");var o="",s="";if(e._trace){for(var a=e._trace.stack.split("\n"),l=N(a),u=l.length-1;u>=0;--u){var c=l[u];if(!p.test(c)){var h=c.match(_);h&&(o="at "+h[1]+":"+h[2]+":"+h[3]+" ");break}}if(l.length>0)for(var f=l[0],u=0;u<a.length;++u)if(a[u]===f){u>0&&(s="\n"+a[u-1]);break}}var d="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+s;r._warn(d,!0,e)}},setBounds:function(t,e){if(q()){for(var n,r,i=t.stack.split("\n"),o=e.stack.split("\n"),s=-1,a=-1,l=0;l<i.length;++l){var u=G(i[l]);if(u){n=u.fileName,s=u.line;break}}for(var l=0;l<o.length;++l){var u=G(o[l]);if(u){r=u.fileName,a=u.line;break}}s<0||a<0||!n||!r||n!==r||s>=a||(K=function(t){if(f.test(t))return!0;var e=G(t);return!!(e&&e.fileName===n&&s<=e.line&&e.line<=a)})}},warn:B,deprecated:function(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),B(n)},CapturedTrace:$,fireDomEvent:x,fireGlobalEvent:E}}},{"./errors":12,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function e(){return this.value}function n(){throw this.reason}t.prototype.return=t.prototype.thenReturn=function(n){return n instanceof t&&n.suppressUnhandledRejections(),this._then(e,void 0,void 0,{value:n},void 0)},t.prototype.throw=t.prototype.thenThrow=function(t){return this._then(n,void 0,void 0,{reason:t},void 0)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(void 0,n,void 0,{reason:t},void 0);var e=arguments[1];return this.caught(t,function(){throw e})},t.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof t&&n.suppressUnhandledRejections(),this._then(void 0,e,void 0,{value:n},void 0);var r=arguments[1];return r instanceof t&&r.suppressUnhandledRejections(),this.caught(n,function(){return r})}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.reduce,r=t.all;function i(){return r(this)}t.prototype.each=function(t){return n(this,t,e,0)._then(i,void 0,void 0,this,void 0)},t.prototype.mapSeries=function(t){return n(this,t,e,e)},t.each=function(t,r){return n(t,r,e,0)._then(i,void 0,void 0,t,void 0)},t.mapSeries=function(t,r){return n(t,r,e,e)}}},{}],12:[function(t,e,n){"use strict";var r,i,o=t("./es5"),s=o.freeze,a=t("./util"),l=a.inherits,u=a.notEnumerableProp;function c(t,e){function n(r){if(!(this instanceof n))return new n(r);u(this,"message","string"==typeof r?r:e),u(this,"name",t),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return l(n,Error),n}var h=c("Warning","warning"),f=c("CancellationError","cancellation error"),p=c("TimeoutError","timeout error"),_=c("AggregateError","aggregate error");try{r=TypeError,i=RangeError}catch(t){r=c("TypeError","type error"),i=c("RangeError","range error")}for(var d="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),m=0;m<d.length;++m)"function"==typeof Array.prototype[d[m]]&&(_.prototype[d[m]]=Array.prototype[d[m]]);o.defineProperty(_.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),_.prototype.isOperational=!0;var v=0;function y(t){if(!(this instanceof y))return new y(t);u(this,"name","OperationalError"),u(this,"message",t),this.cause=t,this.isOperational=!0,t instanceof Error?(u(this,"message",t.message),u(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}_.prototype.toString=function(){var t=Array(4*v+1).join(" "),e="\n"+t+"AggregateError of:\n";v++,t=Array(4*v+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];r=i.join("\n"),e+=r+"\n"}return v--,e},l(y,Error);var g=Error.__BluebirdErrorTypes__;g||(g=s({CancellationError:f,TimeoutError:p,OperationalError:y,RejectionError:y,AggregateError:_}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:g,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:r,RangeError:i,CancellationError:g.CancellationError,OperationalError:g.OperationalError,TimeoutError:g.TimeoutError,AggregateError:g.AggregateError,Warning:h}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return void 0===this}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e};e.exports={isArray:function(t){try{return"[object Array]"===o.call(t)}catch(t){return!1}},keys:a,names:a,defineProperty:function(t,e,n){return t[e]=n.value,t},getDescriptor:function(t,e){return{value:t[e]}},freeze:function(t){return t},getPrototypeOf:function(t){try{return Object(t).constructor.prototype}catch(t){return s}},isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=e.CancellationError,s=i.errorObj,a=t("./catch_filter")(r);function l(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function u(t){this.finallyHandler=t}function c(t,e){return null!=t.cancelPromise&&(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0)}function h(){return p.call(this,this.promise._target()._settledValue())}function f(t){if(!c(this,t))return s.e=t,s}function p(t){var i=this.promise,a=this.handler;if(!this.called){this.called=!0;var l=this.isFinallyHandler()?a.call(i._boundValue()):a.call(i._boundValue(),t);if(l===r)return l;if(void 0!==l){i._setReturnedNonUndefined();var p=n(l,i);if(p instanceof e){if(null!=this.cancelPromise){if(p._isCancelled()){var _=new o("late cancellation observer");return i._attachExtraTrace(_),s.e=_,s}p.isPending()&&p._attachCancellationCallback(new u(this))}return p._then(h,f,void 0,this,void 0)}}}return i.isRejected()?(c(this),s.e=t,s):(c(this),t)}return l.prototype.isFinallyHandler=function(){return 0===this.type},u.prototype._resultCancelled=function(){c(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,r){return"function"!=typeof t?this.then():this._then(n,r,void 0,new l(this,e,t),void 0)},e.prototype.lastly=e.prototype.finally=function(t){return this._passThrough(t,0,p,p)},e.prototype.tap=function(t){return this._passThrough(t,1,p)},e.prototype.tapCatch=function(t){var n=arguments.length;if(1===n)return this._passThrough(t,1,void 0,p);var r,o=new Array(n-1),s=0;for(r=0;r<n-1;++r){var l=arguments[r];if(!i.isObject(l))return e.reject(new TypeError("tapCatch statement predicate: expecting an object but got "+i.classString(l)));o[s++]=l}o.length=s;var u=arguments[r];return this._passThrough(a(o,u,this),1,void 0,p)},l}},{"./catch_filter":7,"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./errors"),l=a.TypeError,u=t("./util"),c=u.errorObj,h=u.tryCatch,f=[];function p(t,n,i,o){if(s.cancellation()){var a=new e(r),l=this._finallyPromise=new e(r);this._promise=a.lastly(function(){return l}),a._captureStackTrace(),a._setOnCancel(this)}else{var u=this._promise=new e(r);u._captureStackTrace()}this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(f):f,this._yieldedPromise=null,this._cancellationPhase=!1}u.inherits(p,o),p.prototype._isResolved=function(){return null===this._promise},p.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},p.prototype._promiseCancelled=function(){if(!this._isResolved()){var t,n=void 0!==this._generator.return;if(n)this._promise._pushContext(),t=h(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var r=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=r,this._promise._attachExtraTrace(r),this._promise._pushContext(),t=h(this._generator.throw).call(this._generator,r),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},p.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=h(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},p.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=h(this._generator.throw).call(this._generator,t);this._promise._popContext(),this._continue(e)},p.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},p.prototype.promise=function(){return this._promise},p.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},p.prototype._continue=function(t){var n=this._promise;if(t===c)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var r=t.value;if(!0===t.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(o instanceof e||null!==(o=function(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=h(n[o])(t);if(r._popContext(),s===c){r._pushContext();var a=e.reject(c.e);return r._popContext(),a}var l=i(s,r);if(l instanceof e)return l}return null}(o,this._yieldHandlers,this._promise))){var s=(o=o._target())._bitField;0==(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&s)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&s)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new l("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",String(r))+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},e.coroutine=function(t,e){if("function"!=typeof t)throw new l("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=p,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(void 0,void 0,n,i),s=o.promise();return o._generator=e,o._promiseFulfilled(void 0),s}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new l("expecting a function but got "+u.classString(t));f.push(t)},e.spawn=function(t){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new p(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./util");a.canEvaluate,a.tryCatch,a.errorObj,e.join=function(){var t,e=arguments.length-1;e>0&&"function"==typeof arguments[e]&&(t=arguments[e]);var r=[].slice.call(arguments);t&&r.pop();var i=new n(r).promise();return void 0!==t?i.spread(t):i}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=e._getDomain,l=t("./util"),u=l.tryCatch,c=l.errorObj,h=e._async;function f(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=a();this._callback=null===i?e:l.domainBind(i,e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],h.invoke(this._asyncInit,this,void 0)}function p(t,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+l.classString(n));var s=0;if(void 0!==i){if("object"!=typeof i||null===i)return e.reject(new TypeError("options argument must be an object but it is "+l.classString(i)));if("number"!=typeof i.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+l.classString(i.concurrency)));s=i.concurrency}return s="number"==typeof s&&isFinite(s)&&s>=1?s:0,new f(t,n,s,o).promise()}l.inherits(f,n),f.prototype._asyncInit=function(){this._init$(void 0,-2)},f.prototype._init=function(){},f.prototype._promiseFulfilled=function(t,n){var r=this._values,o=this.length(),a=this._preservedValues,l=this._limit;if(n<0){if(r[n=-1*n-1]=t,l>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(l>=1&&this._inFlight>=l)return r[n]=t,this._queue.push(n),!1;null!==a&&(a[n]=t);var h=this._promise,f=this._callback,p=h._boundValue();h._pushContext();var _=u(f).call(p,t,n,o),d=h._popContext();if(s.checkForgottenReturns(_,d,null!==a?"Promise.filter":"Promise.map",h),_===c)return this._reject(_.e),!0;var m=i(_,this._promise);if(m instanceof e){var v=(m=m._target())._bitField;if(0==(50397184&v))return l>=1&&this._inFlight++,r[n]=m,m._proxy(this,-1*(n+1)),!1;if(0==(33554432&v))return 0!=(16777216&v)?(this._reject(m._reason()),!0):(this._cancel(),!0);_=m._value()}r[n]=_}var y=++this._totalResolved;return y>=o&&(null!==a?this._filter(r,a):this._resolve(r),!0)},f.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},f.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;o<n;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},f.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return p(this,t,e,null)},e.map=function(t,e,n,r){return p(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util"),a=s.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+s.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=a(t).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e.try=function(t){if("function"!=typeof t)return i("expecting a function but got "+s.classString(t));var r,l=new e(n);if(l._captureStackTrace(),l._pushContext(),arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var u=arguments[1],c=arguments[2];r=s.isArray(u)?a(t).apply(c,u):a(t).call(c,u)}else r=a(t)();var h=l._popContext();return o.checkForgottenReturns(r,h,"Promise.try",l),l._resolveFromSyncValue(r),l},e.prototype._resolveFromSyncValue=function(t){t===s.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";var r=t("./util"),i=r.maybeWrapAsError,o=t("./errors"),s=o.OperationalError,a=t("./es5"),l=/^(?:name|message|stack|cause)$/;function u(t){var e;if(function(t){return t instanceof Error&&a.getPrototypeOf(t)===Error.prototype}(t)){(e=new s(t)).name=t.name,e.message=t.message,e.stack=t.stack;for(var n=a.keys(t),i=0;i<n.length;++i){var o=n[i];l.test(o)||(e[o]=t[o])}return e}return r.markAsOriginatingFromRejection(t),t}e.exports=function(t,e){return function(n,r){if(null!==t){if(n){var o=u(i(n));t._attachExtraTrace(o),t._reject(o)}else if(e){var s=[].slice.call(arguments,1);t._fulfill(s)}else t._fulfill(r);t=null}}}},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=e._async,i=n.tryCatch,o=n.errorObj;function s(t,e){if(!n.isArray(t))return a.call(this,t,e);var s=i(e).apply(this._boundValue(),[null].concat(t));s===o&&r.throwLater(s.e)}function a(t,e){var n=this._boundValue(),s=void 0===t?i(e).call(n,null):i(e).call(n,null,t);s===o&&r.throwLater(s.e)}function l(t,e){if(!t){var n=new Error(t+"");n.cause=t,t=n}var s=i(e).call(this._boundValue(),t);s===o&&r.throwLater(s.e)}e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var n=a;void 0!==e&&Object(e).spread&&(n=s),this._then(n,l,void 0,this,t)}return this}}},{"./util":36}],22:[function(t,n,r){"use strict";n.exports=function(){var r=function(){return new _("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},i=function(){return new R.PromiseInspection(this._target())},o=function(t){return R.reject(new _(t))};function s(){}var a,l={},u=t("./util");a=u.isNode?function(){var t=e.domain;return void 0===t&&(t=null),t}:function(){return null},u.notEnumerableProp(R,"_getDomain",a);var c=t("./es5"),h=t("./async"),f=new h;c.defineProperty(R,"_async",{value:f});var p=t("./errors"),_=R.TypeError=p.TypeError;R.RangeError=p.RangeError;var d=R.CancellationError=p.CancellationError;R.TimeoutError=p.TimeoutError,R.OperationalError=p.OperationalError,R.RejectionError=p.OperationalError,R.AggregateError=p.AggregateError;var m=function(){},v={},y={},g=t("./thenables")(R,m),b=t("./promise_array")(R,m,g,o,s),C=t("./context")(R),w=C.create,x=t("./debuggability")(R,C),E=(x.CapturedTrace,t("./finally")(R,g,y)),k=t("./catch_filter")(y),S=t("./nodeback"),A=u.errorObj,T=u.tryCatch;function R(t){t!==m&&function(t,e){if(null==t||t.constructor!==R)throw new _("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");if("function"!=typeof e)throw new _("expecting a function but got "+u.classString(e))}(this,t),this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._resolveFromExecutor(t),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function L(t){this.promise._resolveCallback(t)}function M(t){this.promise._rejectCallback(t,!1)}function O(t){var e=new R(m);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}return R.prototype.toString=function(){return"[object Promise]"},R.prototype.caught=R.prototype.catch=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;n<e-1;++n){var s=arguments[n];if(!u.isObject(s))return o("Catch statement predicate: expecting an object but got "+u.classString(s));r[i++]=s}return r.length=i,t=arguments[n],this.then(void 0,k(r,t,this))}return this.then(void 0,t)},R.prototype.reflect=function(){return this._then(i,i,void 0,this,void 0)},R.prototype.then=function(t,e){if(x.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+u.classString(t);arguments.length>1&&(n+=", "+u.classString(e)),this._warn(n)}return this._then(t,e,void 0,void 0,void 0)},R.prototype.done=function(t,e){var n=this._then(t,e,void 0,void 0,void 0);n._setIsFinal()},R.prototype.spread=function(t){return"function"!=typeof t?o("expecting a function but got "+u.classString(t)):this.all()._then(t,void 0,void 0,v,void 0)},R.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},R.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new b(this).promise()},R.prototype.error=function(t){return this.caught(u.originatesFromRejection,t)},R.getNewLibraryCopy=n.exports,R.is=function(t){return t instanceof R},R.fromNode=R.fromCallback=function(t){var e=new R(m);e._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=T(t)(S(e,n));return r===A&&e._rejectCallback(r.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},R.all=function(t){return new b(t).promise()},R.cast=function(t){var e=g(t);return e instanceof R||((e=new R(m))._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},R.resolve=R.fulfilled=R.cast,R.reject=R.rejected=function(t){var e=new R(m);return e._captureStackTrace(),e._rejectCallback(t,!0),e},R.setScheduler=function(t){if("function"!=typeof t)throw new _("expecting a function but got "+u.classString(t));return f.setScheduler(t)},R.prototype._then=function(t,e,n,r,i){var o=void 0!==i,s=o?i:new R(m),l=this._target(),c=l._bitField;o||(s._propagateFrom(this,3),s._captureStackTrace(),void 0===r&&0!=(2097152&this._bitField)&&(r=0!=(50397184&c)?this._boundValue():l===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,s));var h=a();if(0!=(50397184&c)){var p,_,v=l._settlePromiseCtx;0!=(33554432&c)?(_=l._rejectionHandler0,p=t):0!=(16777216&c)?(_=l._fulfillmentHandler0,p=e,l._unsetRejectionIsUnhandled()):(v=l._settlePromiseLateCancellationObserver,_=new d("late cancellation observer"),l._attachExtraTrace(_),p=e),f.invoke(v,l,{handler:null===h?p:"function"==typeof p&&u.domainBind(h,p),promise:s,receiver:r,value:_})}else l._addCallbacks(t,e,s,r,h);return s},R.prototype._length=function(){return 65535&this._bitField},R.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},R.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},R.prototype._setLength=function(t){this._bitField=-65536&this._bitField|65535&t},R.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},R.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},R.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},R.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},R.prototype._isFinal=function(){return(4194304&this._bitField)>0},R.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},R.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},R.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},R.prototype._setAsyncGuaranteed=function(){f.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},R.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];if(e!==l)return void 0===e&&this._isBound()?this._boundValue():e},R.prototype._promiseAt=function(t){return this[4*t-4+2]},R.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},R.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},R.prototype._boundValue=function(){},R.prototype._migrateCallback0=function(t){t._bitField;var e=t._fulfillmentHandler0,n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);void 0===i&&(i=l),this._addCallbacks(e,n,r,i,null)},R.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);void 0===o&&(o=l),this._addCallbacks(n,r,i,o,null)},R.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:u.domainBind(i,t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:u.domainBind(i,e));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof t&&(this[s+0]=null===i?t:u.domainBind(i,t)),"function"==typeof e&&(this[s+1]=null===i?e:u.domainBind(i,e))}return this._setLength(o+1),o},R.prototype._proxy=function(t,e){this._addCallbacks(void 0,void 0,e,t,null)},R.prototype._resolveCallback=function(t,e){if(0==(117506048&this._bitField)){if(t===this)return this._rejectCallback(r(),!1);var n=g(t,this);if(!(n instanceof R))return this._fulfill(t);e&&this._propagateFrom(n,2);var i=n._target();if(i!==this){var o=i._bitField;if(0==(50397184&o)){var s=this._length();s>0&&i._migrateCallback0(this);for(var a=1;a<s;++a)i._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(i)}else if(0!=(33554432&o))this._fulfill(i._value());else if(0!=(16777216&o))this._reject(i._reason());else{var l=new d("late cancellation observer");i._attachExtraTrace(l),this._reject(l)}}else this._reject(r())}},R.prototype._rejectCallback=function(t,e,n){var r=u.ensureErrorObject(t),i=r===t;if(!i&&!n&&x.warnings()){var o="a promise was rejected with a non-error: "+u.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,!!e&&i),this._reject(t)},R.prototype._resolveFromExecutor=function(t){if(t!==m){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),void 0!==r&&e._rejectCallback(r,!0)}},R.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0==(65536&i)){var o;r._pushContext(),e===v?n&&"number"==typeof n.length?o=T(t).apply(this._boundValue(),n):(o=A).e=new _("cannot .spread() a non-array: "+u.classString(n)):o=T(t).call(e,n);var s=r._popContext();0==(65536&(i=r._bitField))&&(o===y?r._reject(n):o===A?r._rejectCallback(o.e,!1):(x.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},R.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},R.prototype._followee=function(){return this._rejectionHandler0},R.prototype._setFollowee=function(t){this._rejectionHandler0=t},R.prototype._settlePromise=function(t,e,n,r){var o=t instanceof R,a=this._bitField,l=0!=(134217728&a);0!=(65536&a)?(o&&t._invokeInternalOnCancel(),n instanceof E&&n.isFinallyHandler()?(n.cancelPromise=t,T(e).call(n,r)===A&&t._reject(A.e)):e===i?t._fulfill(i.call(n)):n instanceof s?n._promiseCancelled(t):o||t instanceof b?t._cancel():n.cancel()):"function"==typeof e?o?(l&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(e,n,r,t)):e.call(n,r,t):n instanceof s?n._isResolved()||(0!=(33554432&a)?n._promiseFulfilled(r,t):n._promiseRejected(r,t)):o&&(l&&t._setAsyncGuaranteed(),0!=(33554432&a)?t._fulfill(r):t._reject(r))},R.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,r=t.receiver,i=t.value;"function"==typeof e?n instanceof R?this._settlePromiseFromHandler(e,r,i,n):e.call(r,i,n):n instanceof R&&n._reject(i)},R.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},R.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,t,i,e)},R.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=void 0},R.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=r();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!=(134217728&e)?this._settlePromises():f.settlePromises(this))}},R.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=t,this._isFinal())return f.fatalError(t,u.isNode);(65535&e)>0?f.settlePromises(this):this._ensurePossibleRejectionHandled()}},R.prototype._fulfillPromises=function(t,e){for(var n=1;n<t;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},R.prototype._rejectPromises=function(t,e){for(var n=1;n<t;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},R.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!=(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},R.prototype._settledValue=function(){var t=this._bitField;return 0!=(33554432&t)?this._rejectionHandler0:0!=(16777216&t)?this._fulfillmentHandler0:void 0},R.defer=R.pending=function(){x.deprecated("Promise.defer","new Promise");var t=new R(m);return{promise:t,resolve:L,reject:M}},u.notEnumerableProp(R,"_makeSelfResolutionError",r),t("./method")(R,m,g,o,x),t("./bind")(R,m,g,x),t("./cancel")(R,b,o,x),t("./direct_resolve")(R),t("./synchronous_inspection")(R),t("./join")(R,b,g,m,f,a),R.Promise=R,R.version="3.5.1",t("./map.js")(R,b,o,g,m,x),t("./call_get.js")(R),t("./using.js")(R,o,g,w,m,x),t("./timers.js")(R,m,x),t("./generators.js")(R,o,m,g,s,x),t("./nodeify.js")(R),t("./promisify.js")(R,m),t("./props.js")(R,b,g,o),t("./race.js")(R,m,g,o),t("./reduce.js")(R,b,o,g,m,x),t("./settle.js")(R,b,x),t("./some.js")(R,b,o),t("./filter.js")(R,m),t("./each.js")(R,m),t("./any.js")(R),u.toFastProperties(R),u.toFastProperties(R.prototype),O({a:1}),O({b:2}),O({c:3}),O(1),O(function(){}),O(void 0),O(!1),O(new R(m)),x.setBounds(h.firstLineError,u.lastLineError),R}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util");function a(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(void 0,-2)}return s.isArray,s.inherits(a,o),a.prototype.length=function(){return this._length},a.prototype.promise=function(){return this._promise},a.prototype._init=function t(n,o){var a=r(this._values,this._promise);if(a instanceof e){var l=(a=a._target())._bitField;if(this._values=a,0==(50397184&l))return this._promise._setAsyncGuaranteed(),a._then(t,this._reject,void 0,this,o);if(0==(33554432&l))return 0!=(16777216&l)?this._reject(a._reason()):this._cancel();a=a._value()}if(null!==(a=s.asArray(a)))0!==a.length?this._iterate(a):-5===o?this._resolveEmptyArray():this._resolve(function(t){switch(t){case-2:return[];case-3:return{};case-6:return new Map}}(o));else{var u=i("expecting an array or an iterable object but got "+s.classString(a)).reason();this._promise._rejectCallback(u,!1)}},a.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;a<n;++a){var l=r(t[a],i);l instanceof e?(l=l._target(),s=l._bitField):s=null,o?null!==s&&l.suppressUnhandledRejections():null!==s?0==(50397184&s)?(l._proxy(this,a),this._values[a]=l):o=0!=(33554432&s)?this._promiseFulfilled(l._value(),a):0!=(16777216&s)?this._promiseRejected(l._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(l,a)}o||i._setAsyncGuaranteed()},a.prototype._isResolved=function(){return null===this._values},a.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},a.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},a.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},a.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;return n>=this._length&&(this._resolve(this._values),!0)},a.prototype._promiseCancelled=function(){return this._cancel(),!0},a.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},a.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},a.prototype.shouldCopyValues=function(){return!0},a.prototype.getActualLength=function(t){return t},a}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){var r={},i=t("./util"),o=t("./nodeback"),s=i.withAppended,a=i.maybeWrapAsError,l=i.canEvaluate,u=t("./errors").TypeError,c={__isPromisified__:!0},h=new RegExp("^(?:"+["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"].join("|")+")$"),f=function(t){return i.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t};function p(t){return!h.test(t)}function _(t){try{return!0===t.__isPromisified__}catch(t){return!1}}function d(t,e,n){var r=i.getDataPropertyOrDefault(t,e+n,c);return!!r&&_(r)}function m(t,e,n,r){for(var o=i.inheritedDataKeys(t),s=[],a=0;a<o.length;++a){var l=o[a],c=t[l],h=r===f||f(l,c,t);"function"!=typeof c||_(c)||d(t,l,e)||!r(l,c,t,h)||s.push(l,c)}return function(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<t.length;s+=2)if(t[s]===o)throw new u("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}(s,e,n),s}var v=function(t){return t.replace(/([$])/,"\\$")},y=l?void 0:function(t,l,u,c,h,f){var p=function(){return this}(),_=t;function d(){var i=l;l===r&&(i=this);var u=new e(n);u._captureStackTrace();var c="string"==typeof _&&this!==p?this[_]:t,h=o(u,f);try{c.apply(i,s(arguments,h))}catch(t){u._rejectCallback(a(t),!0,!0)}return u._isFateSealed()||u._setAsyncGuaranteed(),u}return"string"==typeof _&&(t=c),i.notEnumerableProp(d,"__isPromisified__",!0),d};function g(t,e,n,o,s){for(var a=new RegExp(v(e)+"$"),l=m(t,e,a,n),u=0,c=l.length;u<c;u+=2){var h=l[u],f=l[u+1],p=h+e;if(o===y)t[p]=y(h,r,h,f,e,s);else{var _=o(f,function(){return y(h,r,h,f,e,s)});i.notEnumerableProp(_,"__isPromisified__",!0),t[p]=_}}return i.toFastProperties(t),t}e.promisify=function(t,e){if("function"!=typeof t)throw new u("expecting a function but got "+i.classString(t));if(_(t))return t;var n=void 0===(e=Object(e)).context?r:e.context,o=!!e.multiArgs,s=function(t,e,n){return y(t,e,void 0,t,null,n)}(t,n,o);return i.copyDescriptors(t,s,p),s},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new u("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(e=Object(e)).multiArgs,r=e.suffix;"string"!=typeof r&&(r="Async");var o=e.filter;"function"!=typeof o&&(o=f);var s=e.promisifier;if("function"!=typeof s&&(s=y),!i.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var a=i.inheritedDataKeys(t),l=0;l<a.length;++l){var c=t[a[l]];"constructor"!==a[l]&&i.isClass(c)&&(g(c.prototype,r,o,s,n),g(c,r,o,s,n))}return g(t,r,o,s,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o,s=t("./util"),a=s.isObject,l=t("./es5");"function"==typeof Map&&(o=Map);var u=function(){var t=0,e=0;function n(n,r){this[t]=n,this[t+e]=r,t++}return function(r){e=r.size,t=0;var i=new Array(2*r.size);return r.forEach(n,i),i}}();function c(t){var e,n=!1;if(void 0!==o&&t instanceof o)e=u(t),n=!0;else{var r=l.keys(t),i=r.length;e=new Array(2*i);for(var s=0;s<i;++s){var a=r[s];e[s]=t[a],e[s+i]=a}}this.constructor$(e),this._isMap=n,this._init$(void 0,n?-6:-3)}function h(t){var n,o=r(t);return a(o)?(n=o instanceof e?o._then(e.props,void 0,void 0,void 0,void 0):new c(o).promise(),o instanceof e&&n._propagateFrom(o,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}s.inherits(c,n),c.prototype._init=function(){},c.prototype._promiseFulfilled=function(t,e){this._values[e]=t;var n=++this._totalResolved;if(n>=this._length){var r;if(this._isMap)r=function(t){for(var e=new o,n=t.length/2|0,r=0;r<n;++r){var i=t[n+r],s=t[r];e.set(i,s)}return e}(this._values);else{r={};for(var i=this.length(),s=0,a=this.length();s<a;++s)r[this._values[s+i]]=this._values[s]}return this._resolve(r),!0}return!1},c.prototype.shouldCopyValues=function(){return!1},c.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return h(this)},e.props=function(t){return h(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function r(t){this._capacity=t,this._length=0,this._front=0}r.prototype._willBeOverCapacity=function(t){return this._capacity<t},r.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1);var n=this._front+e&this._capacity-1;this[n]=t,this._length=e+1},r.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},r.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length--,e},r.prototype.length=function(){return this._length},r.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},r.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t;var n=this._front,r=this._length,i=n+r&e-1;!function(t,e,n,r,i){for(var o=0;o<i;++o)n[o+r]=t[o+e],t[o+e]=void 0}(this,0,this,e,i)},e.exports=r},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=function(t){return t.then(function(e){return a(e,t)})};function a(t,a){var l=r(t);if(l instanceof e)return s(l);if(null===(t=o.asArray(t)))return i("expecting an array or an iterable object but got "+o.classString(t));var u=new e(n);void 0!==a&&u._propagateFrom(a,3);for(var c=u._fulfill,h=u._reject,f=0,p=t.length;f<p;++f){var _=t[f];(void 0!==_||f in t)&&e.cast(_)._then(c,h,void 0,u,null)}return u}e.race=function(t){return a(t,void 0)},e.prototype.race=function(){return a(this,void 0)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=e._getDomain,l=t("./util"),u=l.tryCatch;function c(t,n,r,i){this.constructor$(t);var s=a();this._fn=null===s?n:l.domainBind(s,n),void 0!==r&&(r=e.resolve(r))._attachCancellationCallback(this),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?Array(this._length):0===i?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function h(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function f(t,e,n,i){if("function"!=typeof e)return r("expecting a function but got "+l.classString(e));var o=new c(t,e,n,i);return o.promise()}function p(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(_,void 0,void 0,this,void 0)):_.call(this,n)}function _(t){var n,r=this.array,i=r._promise,o=u(r._fn);i._pushContext(),(n=void 0!==r._eachValues?o.call(i._boundValue(),t,this.index,this.length):o.call(i._boundValue(),this.accum,t,this.index,this.length))instanceof e&&(r._currentCancellable=n);var a=i._popContext();return s.checkForgottenReturns(n,a,void 0!==r._eachValues?"Promise.each":"Promise.reduce",i),n}l.inherits(c,n),c.prototype._gotAccum=function(t){void 0!==this._eachValues&&null!==this._eachValues&&t!==o&&this._eachValues.push(t)},c.prototype._eachComplete=function(t){return null!==this._eachValues&&this._eachValues.push(t),this._eachValues},c.prototype._init=function(){},c.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},c.prototype.shouldCopyValues=function(){return!1},c.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},c.prototype._resultCancelled=function(t){if(t===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel())},c.prototype._iterate=function(t){var n,r;this._values=t;var i=t.length;if(void 0!==this._initialValue?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;r<i;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(p,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(h,h,void 0,n,this)},e.prototype.reduce=function(t,e){return f(this,t,e,null)},e.reduce=function(t,e,n,r){return f(t,e,n,r)}}},{"./util":36}],29:[function(t,i,o){"use strict";var s,a,l,u,c,h=t("./util"),f=h.getNativePromise();if(h.isNode&&"undefined"==typeof MutationObserver){var p=n.setImmediate,_=e.nextTick;s=h.isRecentNode?function(t){p.call(n,t)}:function(t){_.call(e,t)}}else if("function"==typeof f&&"function"==typeof f.resolve){var d=f.resolve();s=function(t){d.then(t)}}else s="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)?void 0!==r?function(t){r(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}:(a=document.createElement("div"),l={attributes:!0},u=!1,c=document.createElement("div"),new MutationObserver(function(){a.classList.toggle("foo"),u=!1}).observe(c,l),function(t){var e=new MutationObserver(function(){e.disconnect(),t()});e.observe(a,l),u||(u=!0,c.classList.toggle("foo"))});i.exports=s},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=e.PromiseInspection,o=t("./util");function s(t){this.constructor$(t)}o.inherits(s,n),s.prototype._promiseResolved=function(t,e){this._values[t]=e;var n=++this._totalResolved;return n>=this._length&&(this._resolve(this._values),!0)},s.prototype._promiseFulfilled=function(t,e){var n=new i;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},s.prototype._promiseRejected=function(t,e){var n=new i;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new s(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=t("./errors").RangeError,s=t("./errors").AggregateError,a=i.isArray,l={};function u(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function c(t,e){if((0|e)!==e||e<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new u(t),i=n.promise();return n.setHowMany(e),n.init(),i}i.inherits(u,n),u.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var t=a(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},u.prototype.init=function(){this._initialized=!0,this._init()},u.prototype.setUnwrap=function(){this._unwrap=!0},u.prototype.howMany=function(){return this._howMany},u.prototype.setHowMany=function(t){this._howMany=t},u.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},u.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},u.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(l),this._checkOutcome())},u.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new s,e=this.length();e<this._values.length;++e)this._values[e]!==l&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},u.prototype._fulfilled=function(){return this._totalResolved},u.prototype._rejected=function(){return this._values.length-this.length()},u.prototype._addRejected=function(t){this._values.push(t)},u.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},u.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},u.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new o(e)},u.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return c(t,e)},e.prototype.some=function(t){return c(this,t)},e._SomePromiseArray=u}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function e(t){void 0!==t?(t=t._target(),this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}e.prototype._settledValue=function(){return this._settledValueField};var n=e.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=e.prototype.error=e.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=e.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},o=e.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},s=e.prototype.isPending=function(){return 0==(50397184&this._bitField)},a=e.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};e.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},t.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},t.prototype._isCancelled=function(){return this._target().__isCancelled()},t.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},t.prototype.isPending=function(){return s.call(this._target())},t.prototype.isRejected=function(){return o.call(this._target())},t.prototype.isFulfilled=function(){return i.call(this._target())},t.prototype.isResolved=function(){return a.call(this._target())},t.prototype.value=function(){return n.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),r.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=e}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){var r=t("./util"),i=r.errorObj,o=r.isObject,s={}.hasOwnProperty;return function(t,a){if(o(t)){if(t instanceof e)return t;var l=function(t){try{return function(t){return t.then}(t)}catch(t){return i.e=t,i}}(t);if(l===i){a&&a._pushContext();var u=e.reject(l.e);return a&&a._popContext(),u}if("function"==typeof l){if(function(t){try{return s.call(t,"_promise0")}catch(t){return!1}}(t)){var u=new e(n);return t._then(u._fulfill,u._reject,void 0,u,null),u}return function(t,o,s){var a=new e(n),l=a;s&&s._pushContext(),a._captureStackTrace(),s&&s._popContext();var u=!0,c=r.tryCatch(o).call(t,function(t){a&&(a._resolveCallback(t),a=null)},function(t){a&&(a._rejectCallback(t,u,!0),a=null)});return u=!1,a&&c===i&&(a._rejectCallback(c.e,!0,!0),a=null),l}(t,l,a)}}return t}}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){var i=t("./util"),o=e.TimeoutError;function s(t){this.handle=t}s.prototype._resultCancelled=function(){clearTimeout(this.handle)};var a=function(t){return l(+this).thenReturn(t)},l=e.delay=function(t,i){var o,l;return void 0!==i?(o=e.resolve(i)._then(a,null,null,t,void 0),r.cancellation()&&i instanceof e&&o._setOnCancel(i)):(o=new e(n),l=setTimeout(function(){o._fulfill()},+t),r.cancellation()&&o._setOnCancel(new s(l)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};function u(t){return clearTimeout(this.handle),t}function c(t){throw clearTimeout(this.handle),t}e.prototype.delay=function(t){return l(t,this)},e.prototype.timeout=function(t,e){var n,a;t=+t;var l=new s(setTimeout(function(){n.isPending()&&function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new o("operation timed out"):new o(e),i.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()}(n,e,a)},t));return r.cancellation()?(a=this.then(),(n=a._then(u,c,void 0,l,void 0))._setOnCancel(l)):n=this._then(u,c,void 0,l,void 0),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./util"),l=t("./errors").TypeError,u=t("./util").inherits,c=a.errorObj,h=a.tryCatch,f={};function p(t){setTimeout(function(){throw t},0)}function _(t,n){var i=0,s=t.length,a=new e(o);return function o(){if(i>=s)return a._fulfill();var l=function(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}(t[i++]);if(l instanceof e&&l._isDisposable()){try{l=r(l._getDisposer().tryDispose(n),t.promise)}catch(t){return p(t)}if(l instanceof e)return l._then(o,p,null,null,null)}o()}(),a}function d(t,e,n){this._data=t,this._promise=e,this._context=n}function m(t,e,n){this.constructor$(t,e,n)}function v(t){return d.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function y(t){this.length=t,this.promise=null,this[t-1]=null}d.prototype.data=function(){return this._data},d.prototype.promise=function(){return this._promise},d.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():f},d.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=e!==f?this.doDispose(e,t):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},d.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},u(m,d),m.prototype.doDispose=function(t,e){var n=this.data();return n.call(t,t,e)},y.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(t<2)return n("you must pass at least 2 arguments to Promise.using");var i,o=arguments[t-1];if("function"!=typeof o)return n("expecting a function but got "+a.classString(o));var l=!0;2===t&&Array.isArray(arguments[0])?(i=arguments[0],t=i.length,l=!1):(i=arguments,t--);for(var u=new y(t),f=0;f<t;++f){var p=i[f];if(d.isDisposer(p)){var m=p;(p=p.promise())._setDisposable(m)}else{var g=r(p);g instanceof e&&(p=g._then(v,null,null,{resources:u,index:f},void 0))}u[f]=p}for(var b=new Array(u.length),f=0;f<b.length;++f)b[f]=e.resolve(u[f]).reflect();var C=e.all(b).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return c.e=n.error(),c;if(!n.isFulfilled())return void C.cancel();t[e]=n.value()}w._pushContext(),o=h(o);var r=l?o.apply(void 0,t):o(t),i=w._popContext();return s.checkForgottenReturns(r,i,"Promise.using",w),r}),w=C.lastly(function(){var t=new e.PromiseInspection(C);return _(u,t)});return u.promise=w,w._setOnCancel(u),w},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(t){if("function"==typeof t)return new m(t,this,i());throw new l}}},{"./errors":12,"./util":36}],36:[function(t,r,i){"use strict";var o=t("./es5"),s="undefined"==typeof navigator,a={e:{}},l,u="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:void 0!==this?this:null;function c(){try{var t=l;return l=null,t.apply(this,arguments)}catch(t){return a.e=t,a}}function h(t){return l=t,c}var f=function(t,e){var n={}.hasOwnProperty;function r(){for(var r in this.constructor=t,this.constructor$=e,e.prototype)n.call(e.prototype,r)&&"$"!==r.charAt(r.length-1)&&(this[r+"$"]=e.prototype[r])}return r.prototype=e.prototype,t.prototype=new r,t.prototype};function p(t){return null==t||!0===t||!1===t||"string"==typeof t||"number"==typeof t}function _(t){return"function"==typeof t||"object"==typeof t&&null!==t}function d(t){return p(t)?new Error(A(t)):t}function m(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=t[n];return i[n]=e,i}function v(t,e,n){if(!o.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:void 0;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function y(t,e,n){if(p(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return o.defineProperty(t,e,r),t}function g(t){throw t}var b=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(o.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var s;try{s=n(t)}catch(t){return r}for(var a=0;a<s.length;++a){var l=s[a];if(!i[l]){i[l]=!0;var u=Object.getOwnPropertyDescriptor(t,l);null!=u&&null==u.get&&null==u.set&&r.push(l)}}t=o.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<t.length;++s)if(r.call(t[s],o))continue t;i.push(o)}return i}}(),C=/this\s*\.\s*\S+\s*=/;function w(t){try{if("function"==typeof t){var e=o.names(t.prototype),n=o.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=C.test(t+"")&&o.names(t).length>0;if(n||r||i)return!0}return!1}catch(t){return!1}}function x(t){function e(){}e.prototype=t;for(var n=8;n--;)new e;return t}var E=/^[a-z$_][a-z$_0-9]*$/i;function k(t){return E.test(t)}function S(t,e,n){for(var r=new Array(t),i=0;i<t;++i)r[i]=e+i+n;return r}function A(t){try{return t+""}catch(t){return"[no string representation]"}}function T(t){return t instanceof Error||null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function R(t){try{y(t,"isOperational",!0)}catch(t){}}function L(t){return null!=t&&(t instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===t.isOperational)}function M(t){return T(t)&&o.propertyIsWritable(t,"stack")}var O="stack"in new Error?function(t){return M(t)?t:new Error(A(t))}:function(t){if(M(t))return t;try{throw new Error(A(t))}catch(t){return t}};function P(t){return{}.toString.call(t)}function j(t,e,n){for(var r=o.names(t),i=0;i<r.length;++i){var s=r[i];if(n(s))try{o.defineProperty(e,s,o.getDescriptor(t,s))}catch(t){}}}var I=function(t){return o.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var F="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};I=function(t){return o.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?F(t):null}}var D=void 0!==e&&"[object process]"===P(e).toLowerCase(),H=void 0!==e&&void 0!==e.env;function B(t){return H?e.env[t]:void 0}function N(){if("function"==typeof Promise)try{var t=new Promise(function(){});if("[object Promise]"==={}.toString.call(t))return Promise}catch(t){}}function W(t,e){return t.bind(e)}var U={isClass:w,isIdentifier:k,inheritedDataKeys:b,getDataPropertyOrDefault:v,thrower:g,isArray:o.isArray,asArray:I,notEnumerableProp:y,isPrimitive:p,isObject:_,isError:T,canEvaluate:s,errorObj:a,tryCatch:h,inherits:f,withAppended:m,maybeWrapAsError:d,toFastProperties:x,filledRange:S,toString:A,canAttachTrace:M,ensureErrorObject:O,originatesFromRejection:L,markAsOriginatingFromRejection:R,classString:P,copyDescriptors:j,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:D,hasEnvVariables:H,env:B,global:u,getNativePromise:N,domainBind:W},z;U.isRecentNode=U.isNode&&(z=e.versions.node.split(".").map(Number),0===z[0]&&z[1]>10||z[0]>0),U.isNode&&U.toFastProperties(e);try{throw new Error}catch(t){U.lastLineError=t}r.exports=U},{"./es5":13}]},{},[4])(4)}(),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)}).call(this,n(13),n(3),n(34).setImmediate)},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(61),s=n(1),a=n(59),l=n(0),u=n(58),c=n(57),h=n(7),f=n(56),p=n(54),_=n(53),d=n(42),m=n(41),v=n(38),y=n(4),g=n(15),b=n(14),C=n(16),w=n(37),x=n(36),E=n(8),k=n(17),S=n(35),A=n(18),T=n(22),R={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']},L="undefined"!=typeof window?window.document:null,M={cols:80,rows:24,convertEol:!1,termName:"xterm",cursorBlink:!1,cursorStyle:"block",bellSound:x.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,enableBold:!0,experimentalCharAtlas:"static",fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,letterSpacing:0,scrollback:1e3,screenKeys:!1,screenReaderMode:!1,debug:!1,macOptionIsMeta:!1,cancelEvents:!1,disableStdin:!1,useFlowControl:!1,allowTransparency:!1,tabStopWidth:8,theme:null,rightClickSelectsWord:y.isMac},O=function(t){function e(e){void 0===e&&(e={});var n=t.call(this)||this;return n.browser=y,n.options=w.clone(e),n._setup(),n}return i(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._disposables.forEach(function(t){return t.dispose()}),this._disposables.length=0,T.removeTerminalFromCache(this),this.handler=function(){},this.write=function(){},this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)},e.prototype.destroy=function(){this.dispose()},e.prototype._setup=function(){var t=this;this._disposables=[],Object.keys(M).forEach(function(e){null==t.options[e]&&(t.options[e]=M[e]),t[e]=t.options[e]}),this._parent=L?L.body:null,this.cols=this.options.cols,this.rows=this.options.rows,this.options.handler&&this.on("data",this.options.handler),this.cursorState=0,this.cursorHidden=!1,this._sendDataQueue="",this._customKeyEventHandler=null,this.applicationKeypad=!1,this.applicationCursor=!1,this.originMode=!1,this.insertMode=!1,this.wraparoundMode=!0,this.bracketedPasteMode=!1,this.charset=null,this.gcharset=null,this.glevel=0,this.charsets=[null],this.defAttr=131840,this.curAttr=131840,this.params=[],this.currentParam=0,this.prefix="",this.postfix="",this.writeBuffer=[],this._writeInProgress=!1,this._xoffSentToCatchUp=!1,this._userScrolling=!1,this._inputHandler=new f.InputHandler(this),this._parser=new p.Parser(this._inputHandler,this),this.renderer=this.renderer||null,this.selectionManager=this.selectionManager||null,this.linkifier=this.linkifier||new d.Linkifier(this),this._mouseZoneManager=this._mouseZoneManager||null,this.soundManager=this.soundManager||new x.SoundManager(this),this.buffers=new o.BufferSet(this),this.selectionManager&&(this.selectionManager.clearSelection(),this.selectionManager.initBuffersListeners())},Object.defineProperty(e.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!0,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return b},enumerable:!0,configurable:!0}),e.prototype.eraseAttr=function(){return-512&this.defAttr|511&this.curAttr},e.prototype.focus=function(){this.textarea&&this.textarea.focus()},Object.defineProperty(e.prototype,"isFocused",{get:function(){return L.activeElement===this.textarea},enumerable:!0,configurable:!0}),e.prototype.getOption=function(t){if(!(t in M))throw new Error('No option with key "'+t+'"');return void 0!==this.options[t]?this.options[t]:this[t]},e.prototype.setOption=function(t,e){if(!(t in M))throw new Error('No option with key "'+t+'"');switch(t){case"bellStyle":e||(e="none");break;case"cursorStyle":e||(e="block");break;case"fontWeight":e||(e="normal");break;case"fontWeightBold":e||(e="bold");break;case"lineHeight":if(e<1)return void console.warn(t+" cannot be less than 1, value: "+e);case"tabStopWidth":if(e<1)return void console.warn(t+" cannot be less than 1, value: "+e);break;case"theme":if(this.renderer)return void this._setTheme(e);break;case"scrollback":if((e=Math.min(e,s.MAX_BUFFER_SIZE))<0)return void console.warn(t+" cannot be less than 0, value: "+e);if(this.options[t]!==e){var n=this.rows+e;if(this.buffer.lines.length>n){var r=this.buffer.lines.length-n,i=this.buffer.ydisp-r<0;this.buffer.lines.trimStart(r),this.buffer.ybase=Math.max(this.buffer.ybase-r,0),this.buffer.ydisp=Math.max(this.buffer.ydisp-r,0),i&&this.refresh(0,this.rows-1)}}}switch(this[t]=e,this.options[t]=e,t){case"fontFamily":case"fontSize":this.renderer&&(this.renderer.clear(),this.charMeasure.measure(this.options));break;case"experimentalCharAtlas":case"enableBold":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":this.renderer&&(this.renderer.clear(),this.renderer.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));case"scrollback":this.buffers.resize(this.cols,this.rows),this.viewport&&this.viewport.syncScrollArea();break;case"screenReaderMode":e?this._accessibilityManager||(this._accessibilityManager=new S.AccessibilityManager(this)):this._accessibilityManager&&(this._accessibilityManager.dispose(),this._accessibilityManager=null);break;case"tabStopWidth":this.buffers.setupTabStops()}this.renderer&&this.renderer.onOptionsChanged()},e.prototype._onTextAreaFocus=function(){this.sendFocus&&this.send(h.C0.ESC+"[I"),this.element.classList.add("focus"),this.showCursor(),this.emit("focus")},e.prototype.blur=function(){return this.textarea.blur()},e.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.sendFocus&&this.send(h.C0.ESC+"[O"),this.element.classList.remove("focus"),this.emit("blur")},e.prototype._initGlobal=function(){var t=this;this._bindKeys(),P(this.element,"copy",function(e){t.hasSelection()&&c.copyHandler(e,t,t.selectionManager)});var e=function(e){return c.pasteHandler(e,t)};P(this.textarea,"paste",e),P(this.element,"paste",e),y.isFirefox?P(this.element,"mousedown",function(e){2===e.button&&c.rightClickHandler(e,t.textarea,t.selectionManager,t.options.rightClickSelectsWord)}):P(this.element,"contextmenu",function(e){c.rightClickHandler(e,t.textarea,t.selectionManager,t.options.rightClickSelectsWord)}),y.isLinux&&P(this.element,"auxclick",function(e){1===e.button&&c.moveTextAreaUnderMouseCursor(e,t.textarea)})},e.prototype._bindKeys=function(){var t=this,e=this;P(this.element,"keydown",function(t){L.activeElement===this&&e._keyDown(t)},!0),P(this.element,"keypress",function(t){L.activeElement===this&&e._keyPress(t)},!0),P(this.element,"keyup",function(e){(function(t){return 16===t.keyCode||17===t.keyCode||18===t.keyCode})(e)||t.focus()},!0),P(this.textarea,"keydown",function(e){return t._keyDown(e)},!0),P(this.textarea,"keypress",function(e){return t._keyPress(e)},!0),P(this.textarea,"compositionstart",function(){return t._compositionHelper.compositionstart()}),P(this.textarea,"compositionupdate",function(e){return t._compositionHelper.compositionupdate(e)}),P(this.textarea,"compositionend",function(){return t._compositionHelper.compositionend()}),this.on("refresh",function(){return t._compositionHelper.updateCompositionElements()}),this.on("refresh",function(e){return t._queueLinkification(e.start,e.end)})},e.prototype.open=function(t){var e=this;if(this._parent=t||this._parent,!this._parent)throw new Error("Terminal requires a parent element.");this._context=this._parent.ownerDocument.defaultView,this._document=this._parent.ownerDocument,this._screenDprMonitor=new A.ScreenDprMonitor,this._screenDprMonitor.setListener(function(){return e.emit("dprchange",window.devicePixelRatio)}),this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),this._parent.appendChild(this.element);var n=L.createDocumentFragment();this._viewportElement=L.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),n.appendChild(this._viewportElement),this._viewportScrollArea=L.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=L.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=L.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),n.appendChild(this.screenElement),this._mouseZoneManager=new k.MouseZoneManager(this),this.on("scroll",function(){return e._mouseZoneManager.clearAll()}),this.linkifier.attachToDom(this._mouseZoneManager),this.textarea=L.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",b.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.textarea.addEventListener("focus",function(){return e._onTextAreaFocus()}),this.textarea.addEventListener("blur",function(){return e._onTextAreaBlur()}),this._helperContainer.appendChild(this.textarea),this._compositionView=L.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=new a.CompositionHelper(this.textarea,this._compositionView,this),this._helperContainer.appendChild(this._compositionView),this.charMeasure=new v.CharMeasure(L,this._helperContainer),this.element.appendChild(n),this.renderer=new _.Renderer(this,this.options.theme),this.options.theme=null,this.viewport=new u.Viewport(this,this._viewportElement,this._viewportScrollArea,this.charMeasure),this.viewport.onThemeChanged(this.renderer.colorManager.colors),this.on("cursormove",function(){return e.renderer.onCursorMove()}),this.on("resize",function(){return e.renderer.onResize(e.cols,e.rows)}),this.on("blur",function(){return e.renderer.onBlur()}),this.on("focus",function(){return e.renderer.onFocus()}),this.on("dprchange",function(){return e.renderer.onWindowResize(window.devicePixelRatio)}),this._disposables.push(g.addDisposableListener(window,"resize",function(){return e.renderer.onWindowResize(window.devicePixelRatio)})),this.charMeasure.on("charsizechanged",function(){return e.renderer.onResize(e.cols,e.rows)}),this.renderer.on("resize",function(t){return e.viewport.syncScrollArea()}),this.selectionManager=new m.SelectionManager(this,this.charMeasure),this.element.addEventListener("mousedown",function(t){return e.selectionManager.onMouseDown(t)}),this.selectionManager.on("refresh",function(t){return e.renderer.onSelectionChanged(t.start,t.end)}),this.selectionManager.on("newselection",function(t){e.textarea.value=t,e.textarea.focus(),e.textarea.select()}),this.on("scroll",function(){e.viewport.syncScrollArea(),e.selectionManager.refresh()}),this._viewportElement.addEventListener("scroll",function(){return e.selectionManager.refresh()}),this.mouseHelper=new C.MouseHelper(this.renderer),this.options.screenReaderMode&&(this._accessibilityManager=new S.AccessibilityManager(this)),this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},e.prototype._setTheme=function(t){var e=this.renderer.setTheme(t);this.viewport&&this.viewport.onThemeChanged(e)},e.applyAddon=function(t){t.apply(e)},e.prototype.bindMouse=function(){var t=this,e=this.element,n=this,r=32;function i(t){var e,i;if(e=function(t){var e,r,i,o,s;switch(t.overrideType||t.type){case"mousedown":e=null!=t.button?+t.button:null!=t.which?t.which-1:null,y.isMSIE&&(e=1===e?0:4===e?1:e);break;case"mouseup":e=3;break;case"DOMMouseScroll":e=t.detail<0?64:65;break;case"wheel":e=t.wheelDeltaY>0?64:65}r=t.shiftKey?4:0,i=t.metaKey?8:0,o=t.ctrlKey?16:0,s=r|i|o,n.vt200Mouse?s&=o:n.normalMouse||(s=0);return e=32+(s<<2)+e}(t),i=n.mouseHelper.getRawByteCoords(t,n.screenElement,n.charMeasure,n.options.lineHeight,n.cols,n.rows))switch(a(e,i),t.overrideType||t.type){case"mousedown":r=e;break;case"mouseup":r=32}}function o(t){var e=r,i=n.mouseHelper.getRawByteCoords(t,n.screenElement,n.charMeasure,n.options.lineHeight,n.cols,n.rows);i&&a(e+=32,i)}function s(t,e){if(n.utfMouse){if(2047===e)return void t.push(0);e<127?t.push(e):(e>2047&&(e=2047),t.push(192|e>>6),t.push(128|63&e))}else{if(255===e)return void t.push(0);e>127&&(e=127),t.push(e)}}function a(t,e){if(n._vt300Mouse){t&=3,e.x-=32,e.y-=32;var r=h.C0.ESC+"[24";if(0===t)r+="1";else if(1===t)r+="3";else if(2===t)r+="5";else{if(3===t)return;r+="0"}return r+="~["+e.x+","+e.y+"]\r",void n.send(r)}if(n._decLocator)return t&=3,e.x-=32,e.y-=32,0===t?t=2:1===t?t=4:2===t?t=6:3===t&&(t=3),void n.send(h.C0.ESC+"["+t+";"+(3===t?4:0)+";"+e.y+";"+e.x+";"+e.page||"0&w");if(n.urxvtMouse)return e.x-=32,e.y-=32,e.x++,e.y++,void n.send(h.C0.ESC+"["+t+";"+e.x+";"+e.y+"M");if(n.sgrMouse)return e.x-=32,e.y-=32,void n.send(h.C0.ESC+"[<"+((3==(3&t)?-4&t:t)-32)+";"+e.x+";"+e.y+(3==(3&t)?"m":"M"));var i=[];s(i,t),s(i,e.x),s(i,e.y),n.send(h.C0.ESC+"[M"+String.fromCharCode.apply(String,i))}P(e,"mousedown",function(e){if(e.preventDefault(),t.focus(),t.mouseEvents&&!t.selectionManager.shouldForceSelection(e)){if(i(e),t.vt200Mouse)return e.overrideType="mouseup",i(e),t.cancel(e);if(t.normalMouse&&P(t._document,"mousemove",o),!t.x10Mouse){var n=function(e){return i(e),t.normalMouse&&j(t._document,"mousemove",o),j(t._document,"mouseup",n),t.cancel(e)};P(t._document,"mouseup",n)}return t.cancel(e)}}),P(e,"wheel",function(e){if(t.mouseEvents)t.x10Mouse||t._vt300Mouse||t._decLocator||(i(e),e.preventDefault());else if(!t.buffer.hasScrollback){var n=t.viewport.getLinesScrolled(e);if(0===n)return;for(var r=h.C0.ESC+(t.applicationCursor?"O":"[")+(e.deltaY<0?"A":"B"),o="",s=0;s<Math.abs(n);s++)o+=r;t.send(o)}}),P(e,"wheel",function(e){if(!t.mouseEvents)return t.viewport.onWheel(e),t.cancel(e)}),P(e,"touchstart",function(e){if(!t.mouseEvents)return t.viewport.onTouchStart(e),t.cancel(e)}),P(e,"touchmove",function(e){if(!t.mouseEvents)return t.viewport.onTouchMove(e),t.cancel(e)})},e.prototype.refresh=function(t,e){this.renderer&&this.renderer.refreshRows(t,e)},e.prototype._queueLinkification=function(t,e){this.linkifier&&this.linkifier.linkifyRows(t,e)},e.prototype.showCursor=function(){this.cursorState||(this.cursorState=1,this.refresh(this.buffer.y,this.buffer.y))},e.prototype.scroll=function(t){var e=this.blankLine(void 0,t),n=this.buffer.ybase+this.buffer.scrollTop,r=this.buffer.ybase+this.buffer.scrollBottom;if(0===this.buffer.scrollTop){var i=this.buffer.lines.length===this.buffer.lines.maxLength;r===this.buffer.lines.length-1?this.buffer.lines.push(e):this.buffer.lines.splice(r+1,0,e),i?this._userScrolling&&(this.buffer.ydisp=Math.max(this.buffer.ydisp-1,0)):(this.buffer.ybase++,this._userScrolling||this.buffer.ydisp++)}else{var o=r-n+1;this.buffer.lines.shiftElements(n+1,o-1,-1),this.buffer.lines.set(r,e)}this._userScrolling||(this.buffer.ydisp=this.buffer.ybase),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom),this.emit("scroll",this.buffer.ydisp)},e.prototype.scrollLines=function(t,e){if(t<0){if(0===this.buffer.ydisp)return;this._userScrolling=!0}else t+this.buffer.ydisp>=this.buffer.ybase&&(this._userScrolling=!1);var n=this.buffer.ydisp;this.buffer.ydisp=Math.max(Math.min(this.buffer.ydisp+t,this.buffer.ybase),0),n!==this.buffer.ydisp&&(e||this.emit("scroll",this.buffer.ydisp),this.refresh(0,this.rows-1))},e.prototype.scrollPages=function(t){this.scrollLines(t*(this.rows-1))},e.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp)},e.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)},e.prototype.scrollToLine=function(t){var e=t-this.buffer.ydisp;0!==e&&this.scrollLines(e)},e.prototype.write=function(t){var e=this;t&&(this.writeBuffer.push(t),this.options.useFlowControl&&!this._xoffSentToCatchUp&&this.writeBuffer.length>=5&&(this.send(h.C0.DC3),this._xoffSentToCatchUp=!0),!this._writeInProgress&&this.writeBuffer.length>0&&(this._writeInProgress=!0,setTimeout(function(){e._innerWrite()})))},e.prototype._innerWrite=function(){for(var t=this,e=this.writeBuffer.splice(0,300);e.length>0;){var n=e.shift();this._xoffSentToCatchUp&&0===e.length&&0===this.writeBuffer.length&&(this.send(h.C0.DC1),this._xoffSentToCatchUp=!1),this._refreshStart=this.buffer.y,this._refreshEnd=this.buffer.y;var r=this._parser.parse(n);this._parser.setState(r),this.updateRange(this.buffer.y),this.refresh(this._refreshStart,this._refreshEnd)}this.writeBuffer.length>0?setTimeout(function(){return t._innerWrite()},0):this._writeInProgress=!1},e.prototype.writeln=function(t){this.write(t+"\r\n")},e.prototype.attachCustomKeyEventHandler=function(t){this._customKeyEventHandler=t},e.prototype.registerLinkMatcher=function(t,e,n){var r=this.linkifier.registerLinkMatcher(t,e,n);return this.refresh(0,this.rows-1),r},e.prototype.deregisterLinkMatcher=function(t){this.linkifier.deregisterLinkMatcher(t)&&this.refresh(0,this.rows-1)},Object.defineProperty(e.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!0,configurable:!0}),e.prototype.addMarker=function(t){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+t)},e.prototype.hasSelection=function(){return!!this.selectionManager&&this.selectionManager.hasSelection},e.prototype.getSelection=function(){return this.selectionManager?this.selectionManager.selectionText:""},e.prototype.clearSelection=function(){this.selectionManager&&this.selectionManager.clearSelection()},e.prototype.selectAll=function(){this.selectionManager&&this.selectionManager.selectAll()},e.prototype.selectLines=function(t,e){this.selectionManager&&this.selectionManager.selectLines(t,e)},e.prototype._keyDown=function(t){if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(t))return!1;if(!this._compositionHelper.keydown(t))return this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),!1;var e=this._evaluateKeyEscapeSequence(t);return e.scrollLines?(this.scrollLines(e.scrollLines),this.cancel(t,!0)):!!this._isThirdLevelShift(this.browser,t)||(e.cancel&&this.cancel(t,!0),!e.key||(this.emit("keydown",t),this.emit("key",e.key,t),this.showCursor(),this.handler(e.key),this.cancel(t,!0)))},e.prototype._isThirdLevelShift=function(t,e){var n=t.isMac&&!this.options.macOptionIsMeta&&e.altKey&&!e.ctrlKey&&!e.metaKey||t.isMSWindows&&e.altKey&&e.ctrlKey&&!e.metaKey;return"keypress"===e.type?n:n&&(!e.keyCode||e.keyCode>47)},e.prototype._evaluateKeyEscapeSequence=function(t){var e={cancel:!1,key:void 0,scrollLines:void 0},n=(t.shiftKey?1:0)|(t.altKey?2:0)|(t.ctrlKey?4:0)|(t.metaKey?8:0);switch(t.keyCode){case 0:"UIKeyInputUpArrow"===t.key?this.applicationCursor?e.key=h.C0.ESC+"OA":e.key=h.C0.ESC+"[A":"UIKeyInputLeftArrow"===t.key?this.applicationCursor?e.key=h.C0.ESC+"OD":e.key=h.C0.ESC+"[D":"UIKeyInputRightArrow"===t.key?this.applicationCursor?e.key=h.C0.ESC+"OC":e.key=h.C0.ESC+"[C":"UIKeyInputDownArrow"===t.key&&(this.applicationCursor?e.key=h.C0.ESC+"OB":e.key=h.C0.ESC+"[B");break;case 8:if(t.shiftKey){e.key=h.C0.BS;break}if(t.altKey){e.key=h.C0.ESC+h.C0.DEL;break}e.key=h.C0.DEL;break;case 9:if(t.shiftKey){e.key=h.C0.ESC+"[Z";break}e.key=h.C0.HT,e.cancel=!0;break;case 13:e.key=h.C0.CR,e.cancel=!0;break;case 27:e.key=h.C0.ESC,e.cancel=!0;break;case 37:n?(e.key=h.C0.ESC+"[1;"+(n+1)+"D",e.key===h.C0.ESC+"[1;3D"&&(e.key=this.browser.isMac?h.C0.ESC+"b":h.C0.ESC+"[1;5D")):this.applicationCursor?e.key=h.C0.ESC+"OD":e.key=h.C0.ESC+"[D";break;case 39:n?(e.key=h.C0.ESC+"[1;"+(n+1)+"C",e.key===h.C0.ESC+"[1;3C"&&(e.key=this.browser.isMac?h.C0.ESC+"f":h.C0.ESC+"[1;5C")):this.applicationCursor?e.key=h.C0.ESC+"OC":e.key=h.C0.ESC+"[C";break;case 38:n?(e.key=h.C0.ESC+"[1;"+(n+1)+"A",e.key===h.C0.ESC+"[1;3A"&&(e.key=h.C0.ESC+"[1;5A")):this.applicationCursor?e.key=h.C0.ESC+"OA":e.key=h.C0.ESC+"[A";break;case 40:n?(e.key=h.C0.ESC+"[1;"+(n+1)+"B",e.key===h.C0.ESC+"[1;3B"&&(e.key=h.C0.ESC+"[1;5B")):this.applicationCursor?e.key=h.C0.ESC+"OB":e.key=h.C0.ESC+"[B";break;case 45:t.shiftKey||t.ctrlKey||(e.key=h.C0.ESC+"[2~");break;case 46:e.key=n?h.C0.ESC+"[3;"+(n+1)+"~":h.C0.ESC+"[3~";break;case 36:n?e.key=h.C0.ESC+"[1;"+(n+1)+"H":this.applicationCursor?e.key=h.C0.ESC+"OH":e.key=h.C0.ESC+"[H";break;case 35:n?e.key=h.C0.ESC+"[1;"+(n+1)+"F":this.applicationCursor?e.key=h.C0.ESC+"OF":e.key=h.C0.ESC+"[F";break;case 33:t.shiftKey?e.scrollLines=-(this.rows-1):e.key=h.C0.ESC+"[5~";break;case 34:t.shiftKey?e.scrollLines=this.rows-1:e.key=h.C0.ESC+"[6~";break;case 112:e.key=n?h.C0.ESC+"[1;"+(n+1)+"P":h.C0.ESC+"OP";break;case 113:e.key=n?h.C0.ESC+"[1;"+(n+1)+"Q":h.C0.ESC+"OQ";break;case 114:e.key=n?h.C0.ESC+"[1;"+(n+1)+"R":h.C0.ESC+"OR";break;case 115:e.key=n?h.C0.ESC+"[1;"+(n+1)+"S":h.C0.ESC+"OS";break;case 116:e.key=n?h.C0.ESC+"[15;"+(n+1)+"~":h.C0.ESC+"[15~";break;case 117:e.key=n?h.C0.ESC+"[17;"+(n+1)+"~":h.C0.ESC+"[17~";break;case 118:e.key=n?h.C0.ESC+"[18;"+(n+1)+"~":h.C0.ESC+"[18~";break;case 119:e.key=n?h.C0.ESC+"[19;"+(n+1)+"~":h.C0.ESC+"[19~";break;case 120:e.key=n?h.C0.ESC+"[20;"+(n+1)+"~":h.C0.ESC+"[20~";break;case 121:e.key=n?h.C0.ESC+"[21;"+(n+1)+"~":h.C0.ESC+"[21~";break;case 122:e.key=n?h.C0.ESC+"[23;"+(n+1)+"~":h.C0.ESC+"[23~";break;case 123:e.key=n?h.C0.ESC+"[24;"+(n+1)+"~":h.C0.ESC+"[24~";break;default:if(!t.ctrlKey||t.shiftKey||t.altKey||t.metaKey)if(this.browser.isMac&&!this.options.macOptionIsMeta||!t.altKey||t.metaKey)this.browser.isMac&&!t.altKey&&!t.ctrlKey&&t.metaKey&&65===t.keyCode&&this.selectAll();else{var r=R[t.keyCode],i=r&&r[t.shiftKey?1:0];if(i)e.key=h.C0.ESC+i;else if(t.keyCode>=65&&t.keyCode<=90){var o=t.ctrlKey?t.keyCode-64:t.keyCode+32;e.key=h.C0.ESC+String.fromCharCode(o)}}else t.keyCode>=65&&t.keyCode<=90?e.key=String.fromCharCode(t.keyCode-64):32===t.keyCode?e.key=String.fromCharCode(0):t.keyCode>=51&&t.keyCode<=55?e.key=String.fromCharCode(t.keyCode-51+27):56===t.keyCode?e.key=String.fromCharCode(127):219===t.keyCode?e.key=String.fromCharCode(27):220===t.keyCode?e.key=String.fromCharCode(28):221===t.keyCode&&(e.key=String.fromCharCode(29))}return e},e.prototype.setgLevel=function(t){this.glevel=t,this.charset=this.charsets[t]},e.prototype.setgCharset=function(t,e){this.charsets[t]=e,this.glevel===t&&(this.charset=e)},e.prototype._keyPress=function(t){var e;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(t))return!1;if(this.cancel(t),t.charCode)e=t.charCode;else if(null==t.which)e=t.keyCode;else{if(0===t.which||0===t.charCode)return!1;e=t.which}return!(!e||(t.altKey||t.ctrlKey||t.metaKey)&&!this._isThirdLevelShift(this.browser,t))&&(e=String.fromCharCode(e),this.emit("keypress",e,t),this.emit("key",e,t),this.showCursor(),this.handler(e),!0)},e.prototype.send=function(t){var e=this;this._sendDataQueue||setTimeout(function(){e.handler(e._sendDataQueue),e._sendDataQueue=""},1),this._sendDataQueue+=t},e.prototype.bell=function(){var t=this;this.emit("bell"),this._soundBell()&&this.soundManager.playBellSound(),this._visualBell()&&(this.element.classList.add("visual-bell-active"),clearTimeout(this._visualBellTimer),this._visualBellTimer=window.setTimeout(function(){t.element.classList.remove("visual-bell-active")},200))},e.prototype.log=function(t,e){this.options.debug&&this._context.console&&this._context.console.log&&this._context.console.log(t,e)},e.prototype.error=function(t,e){this.options.debug&&this._context.console&&this._context.console.error&&this._context.console.error(t,e)},e.prototype.resize=function(t,e){isNaN(t)||isNaN(e)||(t!==this.cols||e!==this.rows?(t<1&&(t=1),e<1&&(e=1),this.buffers.resize(t,e),this.cols=t,this.rows=e,this.buffers.setupTabStops(this.cols),this.charMeasure&&this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this.emit("resize",{cols:t,rows:e})):!this.charMeasure||this.charMeasure.width&&this.charMeasure.height||this.charMeasure.measure(this.options))},e.prototype.updateRange=function(t){t<this._refreshStart&&(this._refreshStart=t),t>this._refreshEnd&&(this._refreshEnd=t)},e.prototype.maxRange=function(){this._refreshStart=0,this._refreshEnd=this.rows-1},e.prototype.eraseRight=function(t,e){var n=this.buffer.lines.get(this.buffer.ybase+e);if(n){for(var r=[this.eraseAttr()," ",1,32];t<this.cols;t++)n[t]=r;this.updateRange(e)}},e.prototype.eraseLeft=function(t,e){var n=this.buffer.lines.get(this.buffer.ybase+e);if(n){var r=[this.eraseAttr()," ",1,32];for(t++;t--;)n[t]=r;this.updateRange(e)}},e.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var t=1;t<this.rows;t++)this.buffer.lines.push(this.blankLine());this.refresh(0,this.rows-1),this.emit("scroll",this.buffer.ydisp)}},e.prototype.eraseLine=function(t){this.eraseRight(0,t)},e.prototype.blankLine=function(t,e,n){var r=[t?this.eraseAttr():this.defAttr," ",1,32],i=[];e&&(i.isWrapped=e),n=n||this.cols;for(var o=0;o<n;o++)i[o]=r;return i},e.prototype.ch=function(t){return t?[this.eraseAttr()," ",1,32]:[this.defAttr," ",1,32]},e.prototype.is=function(t){return 0===(this.options.termName+"").indexOf(t)},e.prototype.handler=function(t){this.options.disableStdin||(this.selectionManager&&this.selectionManager.hasSelection&&this.selectionManager.clearSelection(),this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),this.emit("data",t))},e.prototype.handleTitle=function(t){this.emit("title",t)},e.prototype.index=function(){this.buffer.y++,this.buffer.y>this.buffer.scrollBottom&&(this.buffer.y--,this.scroll()),this.buffer.x>=this.cols&&this.buffer.x--},e.prototype.reverseIndex=function(){if(this.buffer.y===this.buffer.scrollTop){var t=this.buffer.scrollBottom-this.buffer.scrollTop;this.buffer.lines.shiftElements(this.buffer.y+this.buffer.ybase,t,1),this.buffer.lines.set(this.buffer.y+this.buffer.ybase,this.blankLine(!0)),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom)}else this.buffer.y--},e.prototype.reset=function(){this.options.rows=this.rows,this.options.cols=this.cols;var t=this._customKeyEventHandler,e=this._inputHandler;this._setup(),this._customKeyEventHandler=t,this._inputHandler=e,this.refresh(0,this.rows-1),this.viewport&&this.viewport.syncScrollArea()},e.prototype.tabSet=function(){this.buffer.tabs[this.buffer.x]=!0},e.prototype.cancel=function(t,e){if(this.options.cancelEvents||e)return t.preventDefault(),t.stopPropagation(),!1},e.prototype.matchColor=function(t,e,n){return function(t,e,n){var r=t<<16|e<<8|n;if(null!=I[r])return I[r];for(var i,o,s=1/0,a=-1,l=0;l<E.DEFAULT_ANSI_COLORS.length;l++){if(i=E.DEFAULT_ANSI_COLORS[l].rgba,0===(o=F(t,e,n,i>>>24,i>>>16&255,i>>>8&255))){a=l;break}o<s&&(s=o,a=l)}return I[r]=a}(t,e,n)},e.prototype._visualBell=function(){return!1},e.prototype._soundBell=function(){return"sound"===this.options.bellStyle},e}(l.EventEmitter);e.Terminal=O;var P=function(t,e,n,r){Array.isArray(t)||(t=[t]),t.forEach(function(t){t.addEventListener(e,n,r||!1)})};function j(t,e,n,r){void 0===r&&(r=!1),t.removeEventListener(e,n,r)}var I={};function F(t,e,n,r,i,o){return Math.pow(30*(t-r),2)+Math.pow(59*(e-i),2)+Math.pow(11*(n-o),2)}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var s=t[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),e.push(s))}},e}},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var l,u=[],c=!1,h=-1;function f(){c&&l&&(c=!1,l.length?u=l.concat(u):h=-1,u.length&&p())}function p(){if(!c){var t=a(f);c=!0;for(var e=u.length;e;){for(l=u,u=[];++h<e;)l&&l[h].run();h=-1,e=u.length}l=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function _(t,e){this.fun=t,this.array=e}function d(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new _(t,e)),1!==u.length||c||a(p)},_.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=d,i.addListener=d,i.once=d,i.off=d,i.removeListener=d,i.removeAllListeners=d,i.emit=d,i.prependListener=d,i.prependOnceListener=d,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.blankLine="Blank line",e.promptLabel="Terminal input",e.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addDisposableListener=function(t,e,n,r){return t.addEventListener(e,n,r),{dispose:function(){n&&(t.removeEventListener(e,n,r),t=null,n=null)}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this._renderer=t}return t.getCoordsRelativeToElement=function(t,e){if(null==t.pageX)return null;for(var n=e,r=t.pageX,i=t.pageY;e;)r-=e.offsetLeft,i-=e.offsetTop,e=e.offsetParent;for(e=n;e&&e!==e.ownerDocument.body;)r+=e.scrollLeft,i+=e.scrollTop,e=e.parentElement;return[r,i]},t.prototype.getCoords=function(e,n,r,i,o,s,a){if(!r.width||!r.height)return null;var l=t.getCoordsRelativeToElement(e,n);return l?(l[0]=Math.ceil((l[0]+(a?this._renderer.dimensions.actualCellWidth/2:0))/this._renderer.dimensions.actualCellWidth),l[1]=Math.ceil(l[1]/this._renderer.dimensions.actualCellHeight),l[0]=Math.min(Math.max(l[0],1),o+(a?1:0)),l[1]=Math.min(Math.max(l[1],1),s),l):null},t.prototype.getRawByteCoords=function(t,e,n,r,i,o){var s=this.getCoords(t,e,n,r,i,o),a=s[0],l=s[1];return{x:a+=32,y:l+=32}},t}();e.MouseHelper=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){var e=this;this._terminal=t,this._zones=[],this._areZonesActive=!1,this._tooltipTimeout=null,this._currentZone=null,this._lastHoverCoords=[null,null],this._terminal.element.addEventListener("mousedown",function(t){return e._onMouseDown(t)}),this._mouseMoveListener=function(t){return e._onMouseMove(t)},this._clickListener=function(t){return e._onClick(t)}}return t.prototype.add=function(t){this._zones.push(t),1===this._zones.length&&this._activate()},t.prototype.clearAll=function(t,e){if(0!==this._zones.length){e||(t=0,e=this._terminal.rows-1);for(var n=0;n<this._zones.length;n++){var r=this._zones[n];(r.y1>t&&r.y1<=e+1||r.y2>t&&r.y2<=e+1||r.y1<t&&r.y2>e+1)&&(this._currentZone&&this._currentZone===r&&(this._currentZone.leaveCallback(),this._currentZone=null),this._zones.splice(n--,1))}0===this._zones.length&&this._deactivate()}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._terminal.element.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.addEventListener("click",this._clickListener))},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._terminal.element.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.removeEventListener("click",this._clickListener))},t.prototype._onMouseMove=function(t){this._lastHoverCoords[0]===t.pageX&&this._lastHoverCoords[1]===t.pageY||(this._onHover(t),this._lastHoverCoords=[t.pageX,t.pageY])},t.prototype._onHover=function(t){var e=this,n=this._findZoneEventAt(t);n!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=null,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),n&&(this._currentZone=n,n.hoverCallback&&n.hoverCallback(t),this._tooltipTimeout=setTimeout(function(){return e._onTooltip(t)},500)))},t.prototype._onTooltip=function(t){this._tooltipTimeout=null;var e=this._findZoneEventAt(t);e&&e.tooltipCallback&&e.tooltipCallback(t)},t.prototype._onMouseDown=function(t){if(this._areZonesActive){var e=this._findZoneEventAt(t);e&&e.willLinkActivate(t)&&(t.preventDefault(),t.stopImmediatePropagation())}},t.prototype._onClick=function(t){var e=this._findZoneEventAt(t);e&&(e.clickCallback(t),t.preventDefault(),t.stopImmediatePropagation())},t.prototype._findZoneEventAt=function(t){var e=this._terminal.mouseHelper.getCoords(t,this._terminal.screenElement,this._terminal.charMeasure,this._terminal.options.lineHeight,this._terminal.cols,this._terminal.rows);if(!e)return null;for(var n=e[0],r=e[1],i=0;i<this._zones.length;i++){var o=this._zones[i];if(o.y1===o.y2){if(r===o.y1&&n>=o.x1&&n<o.x2)return o}else if(r===o.y1&&n>=o.x1||r===o.y2&&n<o.x2||r>o.y1&&r<o.y2)return o}return null},t}();e.MouseZoneManager=r;var i=function(){return function(t,e,n,r,i,o,s,a,l){this.x1=t,this.y1=e,this.x2=n,this.y2=r,this.clickCallback=i,this.hoverCallback=o,this.tooltipCallback=s,this.leaveCallback=a,this.willLinkActivate=l}}();e.MouseZone=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.prototype.setListener=function(t){var e=this;this._listener&&this.clearListener(),this._listener=t,this._outerListener=function(){e._listener(window.devicePixelRatio,e._currentDevicePixelRatio),e._updateDpr()},this._updateDpr()},t.prototype._updateDpr=function(){this._resolutionMediaMatchList&&this._resolutionMediaMatchList.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener)},t.prototype.clearListener=function(){this._listener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._listener=null,this._outerListener=null)},t}();e.ScreenDprMonitor=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this._terminal=t,this._callback=e,this._animationFrame=null}return t.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.refresh=function(t,e){var n=this;t=t||0,e=e||this._terminal.rows-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,t):t,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,e):e,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){return n._innerRefresh()}))},t.prototype._innerRefresh=function(){this._rowStart=Math.max(this._rowStart,0),this._rowEnd=Math.min(this._rowEnd,this._terminal.rows-1),this._callback(this._rowStart,this._rowEnd),this._rowStart=null,this._rowEnd=null,this._animationFrame=null},t}();e.RenderDebouncer=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CHAR_ATLAS_CELL_SPACING=1},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(20),i=n(4);function o(t,e){for(var n=!0,r=e.rgba>>>24,i=e.rgba>>>16&255,o=e.rgba>>>8&255,s=0;s<t.data.length;s+=4)t.data[s]===r&&t.data[s+1]===i&&t.data[s+2]===o?t.data[s+3]=0:n=!1;return n}function s(t,e){return t+" "+e.fontSize*e.devicePixelRatio+"px "+e.fontFamily}e.generateStaticCharAtlasTexture=function(t,e,n){var a=n.scaledCharWidth+r.CHAR_ATLAS_CELL_SPACING,l=n.scaledCharHeight+r.CHAR_ATLAS_CELL_SPACING,u=e(255*a,34*l),c=u.getContext("2d",{alpha:n.allowTransparency});c.fillStyle=n.colors.background.css,c.fillRect(0,0,u.width,u.height),c.save(),c.fillStyle=n.colors.foreground.css,c.font=s(n.fontWeight,n),c.textBaseline="top";for(var h=0;h<256;h++)c.save(),c.beginPath(),c.rect(h*a,0,a,l),c.clip(),c.fillText(String.fromCharCode(h),h*a,0),c.restore();for(c.save(),c.font=s(n.fontWeightBold,n),h=0;h<256;h++)c.save(),c.beginPath(),c.rect(h*a,l,a,l),c.clip(),c.fillText(String.fromCharCode(h),h*a,l),c.restore();c.restore(),c.font=s(n.fontWeight,n);for(var f=0;f<16;f++){var p=(f+2)*l;for(h=0;h<256;h++)c.save(),c.beginPath(),c.rect(h*a,p,a,l),c.clip(),c.fillStyle=n.colors.ansi[f].css,c.fillText(String.fromCharCode(h),h*a,p),c.restore()}for(c.font=s(n.fontWeightBold,n),f=0;f<16;f++)for(p=(f+2+16)*l,h=0;h<256;h++)c.save(),c.beginPath(),c.rect(h*a,p,a,l),c.clip(),c.fillStyle=n.colors.ansi[f].css,c.fillText(String.fromCharCode(h),h*a,p),c.restore();if(c.restore(),!("createImageBitmap"in t)||i.isFirefox)return u instanceof HTMLCanvasElement?u:new Promise(function(t){return t(u.transferToImageBitmap())});var _=c.getImageData(0,0,u.width,u.height);return o(_,n.colors.background),t.createImageBitmap(_)},e.clearColor=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(50),i=n(49),o=n(47),s=n(46),a={none:o.default,static:s.default,dynamic:i.default},l=[];e.acquireCharAtlas=function(t,e,n,i){for(var o=r.generateConfig(n,i,t,e),s=0;s<l.length;s++){var u=(c=l[s]).ownedBy.indexOf(t);if(u>=0){if(r.configEquals(c.config,o))return c.atlas;1===c.ownedBy.length?l.splice(s,1):c.ownedBy.splice(u,1);break}}for(s=0;s<l.length;s++){var c=l[s];if(r.configEquals(c.config,o))return c.ownedBy.push(t),c.atlas}var h={atlas:new a[t.options.experimentalCharAtlas](document,o),config:o,ownedBy:[t]};return l.push(h),h.atlas},e.removeTerminalFromCache=function(t){for(var e=0;e<l.length;e++){var n=l[e].ownedBy.indexOf(t);if(-1!==n){1===l[e].ownedBy.length?l.splice(e,1):l[e].ownedBy.splice(n,1);break}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CHARSETS={},e.DEFAULT_CHARSET=e.CHARSETS.B,e.CHARSETS[0]={"`":"◆",a:"▒",b:"\t",c:"\f",d:"\r",e:"\n",f:"°",g:"±",h:"␤",i:"\v",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},e.CHARSETS.A={"#":"£"},e.CHARSETS.B=null,e.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},e.CHARSETS.C=e.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},e.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},e.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},e.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},e.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},e.CHARSETS.E=e.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},e.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},e.CHARSETS.H=e.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},e.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}},function(t,e){t.exports=class{constructor(){this.buffer=[],this.cursor=0}write(t,e=!0){const n=this.size();if(this.cursor!==n){const n=t.split("");this.buffer.splice.apply(this.buffer,[this.cursor,e?n.length:0].concat(n)),this.cursor+=n.length}else this.buffer.push(t),this.cursor+=t.length}move(t){const e=this.cursor+t,n=e>=0&&e<=this.size()?t:0;return 0!==n&&(this.cursor=e),n}size(){return this.buffer.length}back(){this.buffer.splice(this.cursor-1,1),this.cursor--}get(){return this.buffer.join("")}flush(){this.buffer=[],this.cursor=0}}},function(t,e,n){"use strict";function r(t){if(!t.element.parentElement)return null;var e=window.getComputedStyle(t.element.parentElement),n=parseInt(e.getPropertyValue("height")),r=Math.max(0,parseInt(e.getPropertyValue("width"))),i=window.getComputedStyle(t.element),o=n-(parseInt(i.getPropertyValue("padding-top"))+parseInt(i.getPropertyValue("padding-bottom"))),s=r-(parseInt(i.getPropertyValue("padding-right"))+parseInt(i.getPropertyValue("padding-left")))-t.viewport.scrollBarWidth;return{cols:Math.floor(s/t.renderer.dimensions.actualCellWidth),rows:Math.floor(o/t.renderer.dimensions.actualCellHeight)}}function i(t){var e=r(t);e&&(t.rows===e.rows&&t.cols===e.cols||(t.renderer.clear(),t.resize(e.cols,e.rows)))}Object.defineProperty(e,"__esModule",{value:!0}),e.proposeGeometry=r,e.fit=i,e.apply=function(t){t.prototype.proposeGeometry=function(){return r(this)},t.prototype.fit=function(){i(this)}}},function(t,e,n){"use strict";n.r(e);var r=n(11),i=n(25),o=n(10),s=n(24),a=n.n(s),l=n(2),u=n.n(l);var c=new Proxy({NC:"[0m",WHITE:"[1;37m",BLACK:"[0;30m",BLUE:"[0;34m",LIGHT_BLUE:"[1;34m",GREEN:"[0;32m",LIGHT_GREEN:"[1;32m",CYAN:"[0;36m",LIGHT_CYAN:"[1;36m",RED:"[0;31m",LIGHT_RED:"[1;31m",PURPLE:"[0;35m",LIGHT_PURPLE:"[1;35m",BROWN:"[0;33m",YELLOW:"[1;33m",GRAY:"[0;30m",LIGHT_GRAY:"[0;37m"},{get:(t,e)=>t[e.toUpperCase()]});class h{constructor(){this._memory={}}keys(){return u.a.keys(this._memory)}set(t,e){return this._memory[t]=e,this}get(t){return"__keys__"===t?this.keys():this._memory[t]}}const f=[];class p{static callback(t){const e=p.run.bind(null,t);f.forEach(e)}static run(t,e){"function"==typeof e&&e(t)}static addCallback(t){if(t&&-1===f.indexOf(t))return f.push(t)}static removeCallback(t){"number"!=typeof t&&(t=f.indexOf(t),f.splice(t,1)),t>=0&&t<f.length&&f.splice(t,1)}}window._callback=p.callback;var _=class{constructor(t){this.timer=-1,this.generator(t),this.options={timeout:4e3,rate:3e3}}get manager(){return p}callback(t){this.manager.removeCallback(this.cb_id),this.cb_id=this.manager.addCallback(t)}start(t){clearInterval(this.timer),this.timer=setInterval(this.tick.bind(this,t),this.options.rate)}stop(){clearInterval(this.timer)}generator(t=(()=>{})){this.payload=t}tick(t){const e=document.createElement("script"),n=setTimeout(this.timeout.bind(this,e),this.options.timeout);e.onload=this.loaded.bind(this,e,n),document.body.appendChild(e),e.src=t+"/?"+escape(this.payload())}timeout(t){t.remove(),(window._callback||(()=>{}))(null,new Error("Connection timed out"))}loaded(t,e){clearTimeout(e),t.remove()}};var d=new Proxy({CLEARLINE:"[2K"},{get:(t,e)=>t[e.toUpperCase()]});var m=class{constructor(t){this.emu=t}get network(){return this._network}set network(t){this._network=t}clear(){this.emu.scope.term.clear(),this.emu.scope.buffer.flush()}log(t){this.emu._out(t)}echo(t){this.emu.write(t)}};n(31);r.Terminal.applyAddon(i);const v=new r.Terminal({scrollBack:500,fontSize:30,cols:50,rows:17,enableBold:!0,fontFamily:"Lucida Console, monospace"}),y=new class{constructor(t=!0){this.active=t,this.el=document.getElementById("conzole")}write(t){if(!this.active)return;const e=document.createElement("div");e.classList.add("cline"),e.innerText=t,this.el.appendChild(e)}}(!1),g=new class{constructor(){this.el=document.createElement("textarea"),this.el.classList.add("pastepoint"),this.callback=(()=>{}),this.hide(),this.el.addEventListener("paste",this.paste.bind(this),!1),document.body.appendChild(this.el)}get value(){return this.el.value}handler(t){this.callback=t||(()=>{})}show(){this.el.classList.remove("hidden"),this.el.focus()}hide(){this.el.classList.add("hidden")}paste(t){this.callback(o.Promise.resolve(t).then(t=>(t.target.focus(),t)).delay(50).then(t=>(t.target.select(),t)).delay(50).then(e=>t.target.value).delay(50).tap(()=>{this.hide()}))}keypress(t){}},b=new a.a,C=new class{constructor(t,e){this.t=t,this.b=e}get prefix(){return"$ "}get scope(){return{term:this.t,buffer:this.b}}_out(t){const{term:e}=this.scope;e.write(t)}_write(t){const{term:e,buffer:n}=this.scope;n.write(t),e.write(t)}shift(t,e){const{term:n,buffer:r}=this.scope;r.move(e),0!==bufer.move(e)&&n.write(t)}prompt(){const{term:t,buffer:e}=this.scope;return t.write("\r\n"),t.write(this.prefix),t.write(e.get()),this}focus(){return this.scope.term.focus(),this}return(t){const{term:e,buffer:n}=this.scope;try{const r=n.get();if(r.length>0){e.write("\r\n"),n.flush();const i=t(r);"function"==typeof i?e.write("function "+i.name):void 0!==i&&e.write(JSON.stringify(i))}}catch(t){e.write([c.RED,"Error: "+t.message,c.NC].join(""))}this.prompt()}write(t){this._out(d.clearLine+t),this.prompt()}}(v,b),w=new m(C);w.network=new class{constructor(){this.poller=new _(this.__generator.bind(this)),this.connected=!1,this.generator=void 0}set generator(t=(()=>{})){this._generator=t}set callback(t){this.poller.callback(t)}__generator(){return this._generator()}connect(t){w.log("Connecting..."),this.poller.start(t),this.cb_id=this.poller.callback(this.tick.bind(this))}disconnect(){w.log("Disconnecting..."),this.poller.stop(),this.poller.manager.removeCallback(this.cb_id),this.connected=!1}tick(t){void 0!==t&&(this.connected||w.echo("Connected!"),this.connected=!0)}};const x=new class{constructor(t){this.mem=new Proxy(new h,{get:(t,e,n)=>t.get(e),set(t,e,n){return t.set(e,n),this}}),this.sys=t,this.sys.network.callback=this.callback.bind(this),this.sys.network.generator=this.generator.bind(this),this.mem.requests=[]}try(t){const e={mem:this.mem,sys:this.sys,_:u.a,colors:c,exec:this};return Function(`return ( ({${u.a.keys(e).join(",")}}) => { return (${t}) } );`)()(e)}remote(t,e={}){this.mem.requests.push({q:t,p:e})}callback({agents:t,responses:e,env:n}={}){this.mem.agents=t,this.mem.env=n,this.mem.last_callback=(new Date).getTime(),this.mem.requests=this.mem.requests.concat(u.a.filter(u.a.map(e,this.try.bind(this)),!u.a.isNil))}generator(){const t=JSON.stringify({q:"poll",r:this.mem.requests||[]});return this.mem.requests=[],t}}(w);v.open(document.getElementById("terminal")),v.fit(),g.handler(t=>t.then(t=>{C._write(t),v.focus()})),v.on("key",(t,e)=>{if(y.write(["term.on.key",e.keyCode,e.charCode].join(" ")),0===e.charCode)e.keyCode>=37&&e.keyCode<=40?37!==e.keyCode&&39!==e.keyCode||C.shift(t,37===e.keyCode?-1:1):13===e.keyCode?C.return(x.try.bind(x)):8===e.keyCode?b.size()>0&&(v.write("\b \b"),b.back()):86!==e.keyCode||!0!==e.ctrlKey&&!0!==e.altKey||document.activeElement!==g.el&&g.show();else{!(e.altKey||e.altGraphKey||e.ctrlKey||e.metaKey)&&C._write(t)}});const E=function(t){for(var e=window.location.search.substring(1).split("&"),n=0;n<e.length;n++){var r=e[n].split("=");if(decodeURIComponent(r[0])==t)return decodeURIComponent(r[1])}}("url");E&&w.network.connect(E),C.prompt().focus()},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),l=null,u=0,c=[],h=n(27);function f(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(y(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(y(r.parts[s],e));o[r.id]={id:r.id,refs:1,parts:a}}}}function p(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function _(t,e){var n=a(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,i)}}function d(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function m(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),_(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function y(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var s=u++;n=l||(l=m(e)),r=C.bind(null,n,s,!1),i=C.bind(null,n,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),_(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,e),i=function(){d(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){d(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return f(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}t&&f(p(t,e),e);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete o[a.id]}}}};var g,b=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function C(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}},function(t,e,n){(t.exports=n(12)(!1)).push([t.i,'/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * https://github.com/chjj/term.js\n * @license MIT\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Originally forked from (with the author\'s permission):\n *   Fabrice Bellard\'s javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n */\n\n/**\n *  Default styles for xterm.js\n */\n\n.xterm {\n    font-family: courier-new, courier, monospace;\n    font-feature-settings: "liga" 0;\n    position: relative;\n    user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n}\n\n.xterm.focus,\n.xterm:focus {\n    outline: none;\n}\n\n.xterm .xterm-helpers {\n    position: absolute;\n    top: 0;\n    /**\n     * The z-index of the helpers must be higher than the canvases in order for\n     * IMEs to appear on top.\n     */\n    z-index: 10;\n}\n\n.xterm .xterm-helper-textarea {\n    /*\n     * HACK: to fix IE\'s blinking cursor\n     * Move textarea out of the screen to the far left, so that the cursor is not visible.\n     */\n    position: absolute;\n    opacity: 0;\n    left: -9999em;\n    top: 0;\n    width: 0;\n    height: 0;\n    z-index: -10;\n    /** Prevent wrapping so the IME appears against the textarea at the correct position */\n    white-space: nowrap;\n    overflow: hidden;\n    resize: none;\n}\n\n.xterm .composition-view {\n    /* TODO: Composition position got messed up somewhere */\n    background: #000;\n    color: #FFF;\n    display: none;\n    position: absolute;\n    white-space: nowrap;\n    z-index: 1;\n}\n\n.xterm .composition-view.active {\n    display: block;\n}\n\n.xterm .xterm-viewport {\n    /* On OS X this is required in order for the scroll bar to appear fully opaque */\n    background-color: #000;\n    overflow-y: scroll;\n    cursor: default;\n    position: absolute;\n    right: 0;\n    left: 0;\n    top: 0;\n    bottom: 0;\n}\n\n.xterm .xterm-screen {\n    position: relative;\n}\n\n.xterm .xterm-screen canvas {\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n.xterm .xterm-scroll-area {\n    visibility: hidden;\n}\n\n.xterm-char-measure-element {\n    display: inline-block;\n    visibility: hidden;\n    position: absolute;\n    top: 0;\n    left: -9999em;\n    line-height: normal;\n}\n\n.xterm {\n    cursor: text;\n}\n\n.xterm.enable-mouse-events {\n    /* When mouse events are enabled (eg. tmux), revert to the standard pointer cursor */\n    cursor: default;\n}\n\n.xterm.xterm-cursor-pointer {\n    cursor: pointer;\n}\n\n.xterm .xterm-accessibility,\n.xterm .xterm-message {\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    z-index: 100;\n    color: transparent;\n}\n\n.xterm .live-region {\n    position: absolute;\n    left: -9999px;\n    width: 1px;\n    height: 1px;\n    overflow: hidden;\n}\n',""])},function(t,e,n){(e=t.exports=n(12)(!1)).i(n(29),""),e.push([t.i,"html,\nbody {\n  margin: 0px;\n  font-family: 'monospace'; }\n\n.pastepoint {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  min-width: 100px;\n  height: 1.5em; }\n\n.hidden {\n  display: none;\n  height: 0;\n  width: 0;\n  overflow: hidden; }\n\n.cline {\n  background-color: black;\n  color: lime; }\n",""])},function(t,e,n){var r=n(30);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(28)(r,i);r.locals&&(t.exports=r.locals)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,s,a,l=1,u={},c=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){_(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){_(t.data)},r=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){_(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(_,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&_(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),r=function(e){t.postMessage(s+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return u[l]=i,r(l),l++},f.clearImmediate=p}function p(t){delete u[t]}function _(t){if(c)setTimeout(_,0,t);else{var e=u[t];if(e){c=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{p(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(3),n(13))},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(33),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(14),i=n(4),o=n(19),s=n(15),a=function(){function t(t){var e=this;this._terminal=t,this._liveRegionLineCount=0,this._disposables=[],this._charsToConsume=[],this._accessibilityTreeRoot=document.createElement("div"),this._accessibilityTreeRoot.classList.add("xterm-accessibility"),this._rowContainer=document.createElement("div"),this._rowContainer.classList.add("xterm-accessibility-tree"),this._rowElements=[];for(var n=0;n<this._terminal.rows;n++)this._rowElements[n]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[n]);this._topBoundaryFocusListener=function(t){return e._onBoundaryFocus(t,0)},this._bottomBoundaryFocusListener=function(t){return e._onBoundaryFocus(t,1)},this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions(),this._accessibilityTreeRoot.appendChild(this._rowContainer),this._renderRowsDebouncer=new o.RenderDebouncer(this._terminal,this._renderRows.bind(this)),this._refreshRows(),this._liveRegion=document.createElement("div"),this._liveRegion.classList.add("live-region"),this._liveRegion.setAttribute("aria-live","assertive"),this._accessibilityTreeRoot.appendChild(this._liveRegion),this._terminal.element.insertAdjacentElement("afterbegin",this._accessibilityTreeRoot),this._disposables.push(this._renderRowsDebouncer),this._disposables.push(this._terminal.addDisposableListener("resize",function(t){return e._onResize(t.cols,t.rows)})),this._disposables.push(this._terminal.addDisposableListener("refresh",function(t){return e._refreshRows(t.start,t.end)})),this._disposables.push(this._terminal.addDisposableListener("scroll",function(t){return e._refreshRows()})),this._disposables.push(this._terminal.addDisposableListener("a11y.char",function(t){return e._onChar(t)})),this._disposables.push(this._terminal.addDisposableListener("linefeed",function(){return e._onChar("\n")})),this._disposables.push(this._terminal.addDisposableListener("a11y.tab",function(t){return e._onTab(t)})),this._disposables.push(this._terminal.addDisposableListener("key",function(t){return e._onKey(t)})),this._disposables.push(this._terminal.addDisposableListener("blur",function(){return e._clearLiveRegion()})),this._disposables.push(this._terminal.addDisposableListener("dprchange",function(){return e._refreshRowsDimensions()})),this._disposables.push(this._terminal.renderer.addDisposableListener("resize",function(){return e._refreshRowsDimensions()})),this._disposables.push(s.addDisposableListener(window,"resize",function(){return e._refreshRowsDimensions()}))}return t.prototype.dispose=function(){this._disposables.forEach(function(t){return t.dispose()}),this._disposables.length=0,this._terminal.element.removeChild(this._accessibilityTreeRoot),this._rowElements.length=0},t.prototype._onBoundaryFocus=function(t,e){var n=t.target,r=this._rowElements[0===e?1:this._rowElements.length-2];if(n.getAttribute("aria-posinset")!==(0===e?"1":""+this._terminal.buffer.lines.length)&&t.relatedTarget===r){var i,o;if(0===e?(i=n,o=this._rowElements.pop(),this._rowContainer.removeChild(o)):(i=this._rowElements.shift(),o=n,this._rowContainer.removeChild(i)),i.removeEventListener("focus",this._topBoundaryFocusListener),o.removeEventListener("focus",this._bottomBoundaryFocusListener),0===e){var s=this._createAccessibilityTreeNode();this._rowElements.unshift(s),this._rowContainer.insertAdjacentElement("afterbegin",s)}else{s=this._createAccessibilityTreeNode();this._rowElements.push(s),this._rowContainer.appendChild(s)}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===e?-1:1),this._rowElements[0===e?1:this._rowElements.length-2].focus(),t.preventDefault(),t.stopImmediatePropagation()}},t.prototype._onResize=function(t,e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var n=this._rowContainer.children.length;n<this._terminal.rows;n++)this._rowElements[n]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[n]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},t.prototype._createAccessibilityTreeNode=function(){var t=document.createElement("div");return t.setAttribute("role","listitem"),t.tabIndex=-1,this._refreshRowDimensions(t),t},t.prototype._onTab=function(t){for(var e=0;e<t;e++)this._onChar(" ")},t.prototype._onChar=function(t){var e=this;if(this._liveRegionLineCount<21){if(this._charsToConsume.length>0)this._charsToConsume.shift()!==t&&this._announceCharacter(t);else this._announceCharacter(t);"\n"===t&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=r.tooMuchOutput)),i.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout(function(){e._accessibilityTreeRoot.appendChild(e._liveRegion)},0)}},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,i.isMac&&this._liveRegion.parentNode&&this._accessibilityTreeRoot.removeChild(this._liveRegion)},t.prototype._onKey=function(t){this._clearLiveRegion(),this._charsToConsume.push(t)},t.prototype._refreshRows=function(t,e){this._renderRowsDebouncer.refresh(t,e)},t.prototype._renderRows=function(t,e){for(var n=this._terminal.buffer,i=n.lines.length.toString(),o=t;o<=e;o++){var s=n.translateBufferLineToString(n.ydisp+o,!0),a=(n.ydisp+o+1).toString(),l=this._rowElements[o];l.textContent=0===s.length?r.blankLine:s,l.setAttribute("aria-posinset",a),l.setAttribute("aria-setsize",i)}},t.prototype._refreshRowsDimensions=function(){if(this._terminal.renderer.dimensions.actualCellHeight)for(var t=0;t<this._terminal.rows;t++)this._refreshRowDimensions(this._rowElements[t])},t.prototype._refreshRowDimensions=function(t){t.style.height=this._terminal.renderer.dimensions.actualCellHeight+"px"},t.prototype._announceCharacter=function(t){" "===t?this._liveRegion.innerHTML+="&nbsp;":this._liveRegion.textContent+=t},t}();e.AccessibilityManager=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_BELL_SOUND="data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==";var r=function(){function t(t){this._terminal=t}return t.prototype.playBellSound=function(){var t=window.AudioContext||window.webkitAudioContext;if(!this._audioContext&&t&&(this._audioContext=new t),this._audioContext){var e=this._audioContext.createBufferSource(),n=this._audioContext;this._audioContext.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)),function(t){e.buffer=t,e.connect(n.destination),e.start(0)})}else console.warn("Sorry, but the Web Audio API is not supported by your browser. Please, consider upgrading to the latest version")},t.prototype._base64ToArrayBuffer=function(t){for(var e=window.atob(t),n=e.length,r=new Uint8Array(n),i=0;i<n;i++)r[i]=e.charCodeAt(i);return r.buffer},t.prototype._removeMimeType=function(t){return t.split(",")[1]},t}();e.SoundManager=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.clone=function(t,n){if(void 0===n&&(n=5),"object"!=typeof t)return t;if(null===t)return null;var r=Array.isArray(t)?[]:{};for(var i in t)r[i]=n<=1?t[i]:e.clone(t[i],n-1);return r}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,n){var r=t.call(this)||this;return r._document=e,r._parentElement=n,r._measureElement=r._document.createElement("span"),r._measureElement.classList.add("xterm-char-measure-element"),r._measureElement.textContent="W",r._measureElement.setAttribute("aria-hidden","true"),r._parentElement.appendChild(r._measureElement),r}return i(e,t),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),e.prototype.measure=function(t){this._measureElement.style.fontFamily=t.fontFamily,this._measureElement.style.fontSize=t.fontSize+"px";var e=this._measureElement.getBoundingClientRect();0!==e.width&&0!==e.height&&(this._width===e.width&&this._height===e.height||(this._width=e.width,this._height=Math.ceil(e.height),this.emit("charsizechanged")))},e}(n(0).EventEmitter);e.CharMeasure=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(7),i=function(){function t(t,e){this._mouseEvent=t,this._terminal=e,this._lines=this._terminal.buffer.lines,this._startCol=this._terminal.buffer.x,this._startRow=this._terminal.buffer.y;var n,r=this._terminal.mouseHelper.getCoords(this._mouseEvent,this._terminal.element,this._terminal.charMeasure,this._terminal.options.lineHeight,this._terminal.cols,this._terminal.rows,!1);r&&(n=r.map(function(t){return t-1}),this._endCol=n[0],this._endRow=n[1])}return t.prototype.move=function(){this._mouseEvent.altKey&&void 0!==this._endCol&&void 0!==this._endRow&&this._terminal.send(this._arrowSequences())},t.prototype._arrowSequences=function(){return this._terminal.buffer.hasScrollback?this._moveHorizontallyOnly():this._resetStartingRow()+this._moveToRequestedRow()+this._moveToRequestedCol()},t.prototype._resetStartingRow=function(){return 0===this._moveToRequestedRow().length?"":o(this._bufferLine(this._startCol,this._startRow,this._startCol,this._startRow-this._wrappedRowsForRow(this._startRow),!1).length,this._sequence("D"))},t.prototype._moveToRequestedRow=function(){var t=this._startRow-this._wrappedRowsForRow(this._startRow),e=this._endRow-this._wrappedRowsForRow(this._endRow);return o(Math.abs(t-e)-this._wrappedRowsCount(),this._sequence(this._verticalDirection()))},t.prototype._moveToRequestedCol=function(){var t;t=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow;var e=this._endRow,n=this._horizontalDirection();return o(this._bufferLine(this._startCol,t,this._endCol,e,"C"===n).length,this._sequence(n))},t.prototype._moveHorizontallyOnly=function(){var t=this._horizontalDirection();return o(Math.abs(this._startCol-this._endCol),this._sequence(t))},t.prototype._wrappedRowsCount=function(){for(var t=0,e=this._startRow-this._wrappedRowsForRow(this._startRow),n=this._endRow-this._wrappedRowsForRow(this._endRow),r=0;r<Math.abs(e-n);r++){var i="A"===this._verticalDirection()?-1:1;this._lines.get(e+i*r).isWrapped&&t++}return t},t.prototype._wrappedRowsForRow=function(t){for(var e=0,n=this._lines.get(t).isWrapped;n&&t>=0&&t<this._terminal.rows;)e++,t--,n=this._lines.get(t).isWrapped;return e},t.prototype._horizontalDirection=function(){var t;return t=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow,this._startCol<this._endCol&&t<=this._endRow||this._startCol>=this._endCol&&t<this._endRow?"C":"D"},t.prototype._verticalDirection=function(){return this._startRow>this._endRow?"A":"B"},t.prototype._bufferLine=function(t,e,n,r,i){for(var o=t,s=e,a="";o!==n||s!==r;)o+=i?1:-1,i&&o>this._terminal.cols-1?(a+=this._terminal.buffer.translateBufferLineToString(s,!1,t,o),o=0,t=0,s++):!i&&o<0&&(a+=this._terminal.buffer.translateBufferLineToString(s,!1,0,t+1),t=o=this._terminal.cols-1,s--);return a+this._terminal.buffer.translateBufferLineToString(s,!1,t,o)},t.prototype._sequence=function(t){var e=this._terminal.applicationCursor?"O":"[";return r.C0.ESC+e+t},t}();function o(t,e){t=Math.floor(t);for(var n="",r=0;r<t;r++)n+=e;return n}e.AltClickHandler=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this._terminal=t,this.clearSelection()}return t.prototype.clearSelection=function(){this.selectionStart=null,this.selectionEnd=null,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(t.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"finalSelectionEnd",{get:function(){return this.isSelectAllActive?[this._terminal.cols,this._terminal.buffer.ybase+this._terminal.rows-1]:this.selectionStart?!this.selectionEnd||this.areSelectionValuesReversed()?[this.selectionStart[0]+this.selectionStartLength,this.selectionStart[1]]:this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?[Math.max(this.selectionStart[0]+this.selectionStartLength,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd:null},enumerable:!0,configurable:!0}),t.prototype.areSelectionValuesReversed=function(){var t=this.selectionStart,e=this.selectionEnd;return!(!t||!e)&&(t[1]>e[1]||t[1]===e[1]&&t[0]>e[0])},t.prototype.onTrim=function(t){return this.selectionStart&&(this.selectionStart[1]-=t),this.selectionEnd&&(this.selectionEnd[1]-=t),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},t}();e.SelectionModel=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(16),s=n(4),a=n(0),l=n(40),u=n(1),c=n(39),h=String.fromCharCode(160),f=new RegExp(h,"g"),p=function(t){function e(e,n){var r=t.call(this)||this;return r._terminal=e,r._charMeasure=n,r._enabled=!0,r._initListeners(),r.enable(),r._model=new l.SelectionModel(e),r._activeSelectionMode=0,r}return i(e,t),Object.defineProperty(e.prototype,"_buffer",{get:function(){return this._terminal.buffers.active},enumerable:!0,configurable:!0}),e.prototype._initListeners=function(){var t=this;this._mouseMoveListener=function(e){return t._onMouseMove(e)},this._mouseUpListener=function(e){return t._onMouseUp(e)},this._trimListener=function(e){return t._onTrim(e)},this.initBuffersListeners()},e.prototype.initBuffersListeners=function(){var t=this;this._terminal.buffer.lines.on("trim",this._trimListener),this._terminal.buffers.on("activate",function(e){return t._onBufferActivate(e)})},e.prototype.disable=function(){this.clearSelection(),this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},Object.defineProperty(e.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasSelection",{get:function(){var t=this._model.finalSelectionStart,e=this._model.finalSelectionEnd;return!(!t||!e)&&(t[0]!==e[0]||t[1]!==e[1])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectionText",{get:function(){var t=this._model.finalSelectionStart,e=this._model.finalSelectionEnd;if(!t||!e)return"";var n=t[1]===e[1]?e[0]:null,r=[];r.push(this._buffer.translateBufferLineToString(t[1],!0,t[0],n));for(var i=t[1]+1;i<=e[1]-1;i++){var o=this._buffer.lines.get(i),a=this._buffer.translateBufferLineToString(i,!0);o.isWrapped?r[r.length-1]+=a:r.push(a)}if(t[1]!==e[1]){o=this._buffer.lines.get(e[1]),a=this._buffer.translateBufferLineToString(e[1],!0,0,e[0]);o.isWrapped?r[r.length-1]+=a:r.push(a)}return r.map(function(t){return t.replace(f," ")}).join(s.isMSWindows?"\r\n":"\n")},enumerable:!0,configurable:!0}),e.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh()},e.prototype.refresh=function(t){var e=this;(this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame(function(){return e._refresh()})),s.isLinux&&t)&&(this.selectionText.length&&this.emit("newselection",this.selectionText))},e.prototype._refresh=function(){this._refreshAnimationFrame=null,this.emit("refresh",{start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd})},e.prototype.isClickInSelection=function(t){var e=this._getMouseBufferCoords(t),n=this._model.finalSelectionStart,r=this._model.finalSelectionEnd;return!(!n||!r)&&(e[1]>n[1]&&e[1]<r[1]||n[1]===r[1]&&e[1]===n[1]&&e[0]>n[0]&&e[0]<r[0]||n[1]<r[1]&&e[1]===r[1]&&e[0]<r[0])},e.prototype.selectWordAtCursor=function(t){var e=this._getMouseBufferCoords(t);e&&(this._selectWordAt(e,!1),this._model.selectionEnd=null,this.refresh(!0))},e.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._terminal.emit("selection")},e.prototype.selectLines=function(t,e){this._model.clearSelection(),t=Math.max(t,0),e=Math.min(e,this._terminal.buffer.lines.length-1),this._model.selectionStart=[0,t],this._model.selectionEnd=[this._terminal.cols,e],this.refresh(),this._terminal.emit("selection")},e.prototype._onTrim=function(t){this._model.onTrim(t)&&this.refresh()},e.prototype._getMouseBufferCoords=function(t){var e=this._terminal.mouseHelper.getCoords(t,this._terminal.screenElement,this._charMeasure,this._terminal.options.lineHeight,this._terminal.cols,this._terminal.rows,!0);return e?(e[0]--,e[1]--,e[1]+=this._terminal.buffer.ydisp,e):null},e.prototype._getMouseEventScrollAmount=function(t){var e=o.MouseHelper.getCoordsRelativeToElement(t,this._terminal.screenElement)[1],n=this._terminal.rows*Math.ceil(this._charMeasure.height*this._terminal.options.lineHeight);return e>=0&&e<=n?0:(e>n&&(e-=n),e=Math.min(Math.max(e,-50),50),(e/=50)/Math.abs(e)+Math.round(14*e))},e.prototype.shouldForceSelection=function(t){return s.isMac?t.altKey:t.shiftKey},e.prototype.onMouseDown=function(t){if(this._mouseDownTimeStamp=t.timeStamp,(2!==t.button||!this.hasSelection)&&0===t.button){if(!this._enabled){if(!this.shouldForceSelection(t))return;t.stopPropagation()}t.preventDefault(),this._dragScrollAmount=0,this._enabled&&t.shiftKey?this._onIncrementalClick(t):1===t.detail?this._onSingleClick(t):2===t.detail?this._onDoubleClick(t):3===t.detail&&this._onTripleClick(t),this._addMouseDownListeners(),this.refresh(!0)}},e.prototype._addMouseDownListeners=function(){var t=this;this._terminal.element.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.addEventListener("mouseup",this._mouseUpListener),this._dragScrollIntervalTimer=setInterval(function(){return t._dragScroll()},50)},e.prototype._removeMouseDownListeners=function(){this._terminal.element.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.removeEventListener("mouseup",this._mouseUpListener),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=null},e.prototype._onIncrementalClick=function(t){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(t))},e.prototype._onSingleClick=function(t){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=0,this._model.selectionStart=this._getMouseBufferCoords(t),this._model.selectionStart){this._model.selectionEnd=null;var e=this._buffer.lines.get(this._model.selectionStart[1]);if(e)if(!(e.length>=this._model.selectionStart[0]))0===e[this._model.selectionStart[0]][u.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionStart[0]++}},e.prototype._onDoubleClick=function(t){var e=this._getMouseBufferCoords(t);e&&(this._activeSelectionMode=1,this._selectWordAt(e,!0))},e.prototype._onTripleClick=function(t){var e=this._getMouseBufferCoords(t);e&&(this._activeSelectionMode=2,this._selectLineAt(e[1]))},e.prototype._onMouseMove=function(t){t.stopImmediatePropagation();var e=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(t),this._model.selectionEnd){if(2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._terminal.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(t),this._dragScrollAmount>0?this._model.selectionEnd[0]=this._terminal.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]<this._buffer.lines.length){var n=this._buffer.lines.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];n&&0===n[u.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionEnd[0]++}e&&e[0]===this._model.selectionEnd[0]&&e[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)},e.prototype._dragScroll=function(){this._dragScrollAmount&&(this._terminal.scrollLines(this._dragScrollAmount,!1),this._dragScrollAmount>0?this._model.selectionEnd=[this._terminal.cols-1,Math.min(this._terminal.buffer.ydisp+this._terminal.rows,this._terminal.buffer.lines.length-1)]:this._model.selectionEnd=[0,this._terminal.buffer.ydisp],this.refresh())},e.prototype._onMouseUp=function(t){var e=t.timeStamp-this._mouseDownTimeStamp;this._removeMouseDownListeners(),this.selectionText.length<=1&&e<500?new c.AltClickHandler(t,this._terminal).move():this.hasSelection&&this._terminal.emit("selection")},e.prototype._onBufferActivate=function(t){this.clearSelection(),t.inactiveBuffer.lines.off("trim",this._trimListener),t.activeBuffer.lines.on("trim",this._trimListener)},e.prototype._convertViewportColToCharacterIndex=function(t,e){for(var n=e[0],r=0;e[0]>=r;r++){var i=t[r];0===i[u.CHAR_DATA_WIDTH_INDEX]?n--:i[u.CHAR_DATA_CHAR_INDEX].length>1&&e[0]!==r&&(n+=i[u.CHAR_DATA_CHAR_INDEX].length-1)}return n},e.prototype.setSelection=function(t,e,n){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[t,e],this._model.selectionStartLength=n,this.refresh()},e.prototype._getWordAt=function(t,e){if(t[0]>=this._terminal.cols)return null;var n=this._buffer.lines.get(t[1]);if(!n)return null;var r=this._buffer.translateBufferLineToString(t[1],!1),i=this._convertViewportColToCharacterIndex(n,t),o=i,s=t[0]-i,a=0,l=0,c=0,h=0;if(" "===r.charAt(i)){for(;i>0&&" "===r.charAt(i-1);)i--;for(;o<r.length&&" "===r.charAt(o+1);)o++}else{var f=t[0],p=t[0];for(0===n[f][u.CHAR_DATA_WIDTH_INDEX]&&(a++,f--),2===n[p][u.CHAR_DATA_WIDTH_INDEX]&&(l++,p++),n[p][u.CHAR_DATA_CHAR_INDEX].length>1&&(h+=n[p][u.CHAR_DATA_CHAR_INDEX].length-1,o+=n[p][u.CHAR_DATA_CHAR_INDEX].length-1);f>0&&i>0&&!this._isCharWordSeparator(n[f-1]);){0===(_=n[f-1])[u.CHAR_DATA_WIDTH_INDEX]?(a++,f--):_[u.CHAR_DATA_CHAR_INDEX].length>1&&(c+=_[u.CHAR_DATA_CHAR_INDEX].length-1,i-=_[u.CHAR_DATA_CHAR_INDEX].length-1),i--,f--}for(;p<n.length&&o+1<r.length&&!this._isCharWordSeparator(n[p+1]);){var _;2===(_=n[p+1])[u.CHAR_DATA_WIDTH_INDEX]?(l++,p++):_[u.CHAR_DATA_CHAR_INDEX].length>1&&(h+=_[u.CHAR_DATA_CHAR_INDEX].length-1,o+=_[u.CHAR_DATA_CHAR_INDEX].length-1),o++,p++}}o++;var d=i+s-a+c,m=Math.min(this._terminal.cols,o-i+a+l-c-h);return e||""!==r.slice(i,o).trim()?{start:d,length:m}:null},e.prototype._selectWordAt=function(t,e){var n=this._getWordAt(t,e);n&&(this._model.selectionStart=[n.start,t[1]],this._model.selectionStartLength=n.length)},e.prototype._selectToWordAt=function(t){var e=this._getWordAt(t,!0);e&&(this._model.selectionEnd=[this._model.areSelectionValuesReversed()?e.start:e.start+e.length,t[1]])},e.prototype._isCharWordSeparator=function(t){return 0!==t[u.CHAR_DATA_WIDTH_INDEX]&&" ()[]{}'\"".indexOf(t[u.CHAR_DATA_CHAR_INDEX])>=0},e.prototype._selectLineAt=function(t){this._model.selectionStart=[0,t],this._model.selectionStartLength=this._terminal.cols},e}(a.EventEmitter);e.SelectionManager=p},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(17),s=function(t){function e(e){var n=t.call(this)||this;return n._terminal=e,n._linkMatchers=[],n._nextLinkMatcherId=0,n._rowsToLinkify={start:null,end:null},n}return i(e,t),e.prototype.attachToDom=function(t){this._mouseZoneManager=t},e.prototype.linkifyRows=function(t,n){var r=this;this._mouseZoneManager&&(null===this._rowsToLinkify.start?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=n):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,n)),this._mouseZoneManager.clearAll(t,n),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout(function(){return r._linkifyRows()},e.TIME_BEFORE_LINKIFY))},e.prototype._linkifyRows=function(){this._rowsTimeoutId=null;for(var t=this._rowsToLinkify.start;t<=this._rowsToLinkify.end;t++)this._linkifyRow(t);this._rowsToLinkify.start=null,this._rowsToLinkify.end=null},e.prototype.registerLinkMatcher=function(t,e,n){if(void 0===n&&(n={}),!e)throw new Error("handler must be defined");var r={id:this._nextLinkMatcherId++,regex:t,handler:e,matchIndex:n.matchIndex,validationCallback:n.validationCallback,hoverTooltipCallback:n.tooltipCallback,hoverLeaveCallback:n.leaveCallback,willLinkActivate:n.willLinkActivate,priority:n.priority||0};return this._addLinkMatcherToList(r),r.id},e.prototype._addLinkMatcherToList=function(t){if(0!==this._linkMatchers.length){for(var e=this._linkMatchers.length-1;e>=0;e--)if(t.priority<=this._linkMatchers[e].priority)return void this._linkMatchers.splice(e+1,0,t);this._linkMatchers.splice(0,0,t)}else this._linkMatchers.push(t)},e.prototype.deregisterLinkMatcher=function(t){for(var e=0;e<this._linkMatchers.length;e++)if(this._linkMatchers[e].id===t)return this._linkMatchers.splice(e,1),!0;return!1},e.prototype._linkifyRow=function(t){var e=this._terminal.buffer.ydisp+t;if(!(e>=this._terminal.buffer.lines.length)){if(this._terminal.buffer.lines.get(e).isWrapped){if(0!==t)return;do{t--,e--}while(this._terminal.buffer.lines.get(e).isWrapped)}for(var n=this._terminal.buffer.translateBufferLineToString(e,!1),r=e+1;r<this._terminal.buffer.lines.length&&this._terminal.buffer.lines.get(r).isWrapped;)n+=this._terminal.buffer.translateBufferLineToString(r++,!1);for(var i=0;i<this._linkMatchers.length;i++)this._doLinkifyRow(t,n,this._linkMatchers[i])}},e.prototype._doLinkifyRow=function(t,e,n,r){var i=this;void 0===r&&(r=0);var o=e.match(n.regex);if(o&&0!==o.length){var s=o["number"!=typeof n.matchIndex?0:n.matchIndex],a=e.indexOf(s);n.validationCallback?n.validationCallback(s,function(e){i._rowsTimeoutId||e&&i._addLink(r+a,t,s,n)}):this._addLink(r+a,t,s,n);var l=a+s.length,u=e.substr(l);u.length>0&&this._doLinkifyRow(t,u,n,r+l)}},e.prototype._addLink=function(t,e,n,r){var i=this,s=t%this._terminal.cols,a=e+Math.floor(t/this._terminal.cols),l=(s+n.length)%this._terminal.cols,u=a+Math.floor((s+n.length)/this._terminal.cols);0===l&&(l=this._terminal.cols,u--),this._mouseZoneManager.add(new o.MouseZone(s+1,a+1,l+1,u+1,function(t){if(r.handler)return r.handler(t,n);window.open(n,"_blank")},function(t){i.emit("linkhover",i._createLinkHoverEvent(s,a,l,u)),i._terminal.element.classList.add("xterm-cursor-pointer")},function(t){i.emit("linktooltip",i._createLinkHoverEvent(s,a,l,u)),r.hoverTooltipCallback&&r.hoverTooltipCallback(t,n)},function(){i.emit("linkleave",i._createLinkHoverEvent(s,a,l,u)),i._terminal.element.classList.remove("xterm-cursor-pointer"),r.hoverLeaveCallback&&r.hoverLeaveCallback()},function(t){return!r.willLinkActivate||r.willLinkActivate(t,n)}))},e.prototype._createLinkHoverEvent=function(t,e,n,r){return{x1:t,y1:e,x2:n,y2:r,cols:this._terminal.cols}},e.TIME_BEFORE_LINKIFY=200,e}(n(0).EventEmitter);e.Linkifier=s},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,n,r,i){var o=t.call(this,e,"link",n,!0,r)||this;return o._state=null,i.linkifier.on("linkhover",function(t){return o._onLinkHover(t)}),i.linkifier.on("linkleave",function(t){return o._onLinkLeave(t)}),o}return i(e,t),e.prototype.resize=function(e,n){t.prototype.resize.call(this,e,n),this._state=null},e.prototype.reset=function(t){this._clearCurrentLink()},e.prototype._clearCurrentLink=function(){if(this._state){this.clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var t=this._state.y2-this._state.y1-1;t>0&&this.clearCells(0,this._state.y1+1,this._state.cols,t),this.clearCells(0,this._state.y2,this._state.x2,1),this._state=null}},e.prototype._onLinkHover=function(t){if(this._ctx.fillStyle=this._colors.foreground.css,t.y1===t.y2)this.fillBottomLineAtCells(t.x1,t.y1,t.x2-t.x1);else{this.fillBottomLineAtCells(t.x1,t.y1,t.cols-t.x1);for(var e=t.y1+1;e<t.y2;e++)this.fillBottomLineAtCells(0,e,t.cols);this.fillBottomLineAtCells(0,t.y2,t.x2)}this._state=t},e.prototype._onLinkLeave=function(t){this._clearCurrentLink()},e}(n(5).BaseRenderLayer);e.LinkRenderLayer=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),s=function(t){function e(e,n,r){var i=t.call(this,e,"cursor",n,!0,r)||this;return i._state={x:null,y:null,isFocused:null,style:null,width:null},i._cursorRenderers={bar:i._renderBarCursor.bind(i),block:i._renderBlockCursor.bind(i),underline:i._renderUnderlineCursor.bind(i)},i}return i(e,t),e.prototype.resize=function(e,n){t.prototype.resize.call(this,e,n),this._state={x:null,y:null,isFocused:null,style:null,width:null}},e.prototype.reset=function(t){this._clearCursor(),this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null,this.onOptionsChanged(t))},e.prototype.onBlur=function(t){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.pause(),t.refresh(t.buffer.y,t.buffer.y)},e.prototype.onFocus=function(t){this._cursorBlinkStateManager?this._cursorBlinkStateManager.resume(t):t.refresh(t.buffer.y,t.buffer.y)},e.prototype.onOptionsChanged=function(t){var e=this;t.options.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new a(t,function(){e._render(t,!0)})):(this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null),t.refresh(t.buffer.y,t.buffer.y))},e.prototype.onCursorMove=function(t){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.restartBlinkAnimation(t)},e.prototype.onGridChanged=function(t,e,n){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(t,!1):this._cursorBlinkStateManager.restartBlinkAnimation(t)},e.prototype._render=function(t,e){if(t.cursorState&&!t.cursorHidden){var n=t.buffer.ybase+t.buffer.y,r=n-t.buffer.ydisp;if(r<0||r>=t.rows)this._clearCursor();else{var i=t.buffer.lines.get(n)[t.buffer.x];if(i){if(!t.isFocused)return this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._renderBlurCursor(t,t.buffer.x,r,i),this._ctx.restore(),this._state.x=t.buffer.x,this._state.y=r,this._state.isFocused=!1,this._state.style=t.options.cursorStyle,void(this._state.width=i[o.CHAR_DATA_WIDTH_INDEX]);if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===t.buffer.x&&this._state.y===r&&this._state.isFocused===t.isFocused&&this._state.style===t.options.cursorStyle&&this._state.width===i[o.CHAR_DATA_WIDTH_INDEX])return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[t.options.cursorStyle||"block"](t,t.buffer.x,r,i),this._ctx.restore(),this._state.x=t.buffer.x,this._state.y=r,this._state.isFocused=!1,this._state.style=t.options.cursorStyle,this._state.width=i[o.CHAR_DATA_WIDTH_INDEX]}else this._clearCursor()}}}else this._clearCursor()},e.prototype._clearCursor=function(){this._state&&(this.clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:null,y:null,isFocused:null,style:null,width:null})},e.prototype._renderBarCursor=function(t,e,n,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillLeftLineAtCell(e,n),this._ctx.restore()},e.prototype._renderBlockCursor=function(t,e,n,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillCells(e,n,r[o.CHAR_DATA_WIDTH_INDEX],1),this._ctx.fillStyle=this._colors.cursorAccent.css,this.fillCharTrueColor(t,r,e,n),this._ctx.restore()},e.prototype._renderUnderlineCursor=function(t,e,n,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillBottomLineAtCells(e,n),this._ctx.restore()},e.prototype._renderBlurCursor=function(t,e,n,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this.strokeRectAtCell(e,n,r[o.CHAR_DATA_WIDTH_INDEX],1),this._ctx.restore()},e}(n(5).BaseRenderLayer);e.CursorRenderLayer=s;var a=function(){function t(t,e){this._renderCallback=e,this.isCursorVisible=!0,t.isFocused&&this._restartInterval()}return Object.defineProperty(t.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.restartBlinkAnimation=function(t){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null})))},t.prototype._restartInterval=function(t){var e=this;void 0===t&&(t=600),this._blinkInterval&&window.clearInterval(this._blinkInterval),this._blinkStartTimeout=setTimeout(function(){if(e._animationTimeRestarted){var t=600-(Date.now()-e._animationTimeRestarted);if(e._animationTimeRestarted=null,t>0)return void e._restartInterval(t)}e.isCursorVisible=!1,e._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null}),e._blinkInterval=setInterval(function(){if(e._animationTimeRestarted){var t=600-(Date.now()-e._animationTimeRestarted);return e._animationTimeRestarted=null,void e._restartInterval(t)}e.isCursorVisible=!e.isCursorVisible,e._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null})},600)},t)},t.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.resume=function(t){this._animationTimeRestarted=null,this._restartInterval(),this.restartBlinkAnimation(t)},t}()},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,n,r){var i=t.call(this,e,"selection",n,!0,r)||this;return i._state={start:null,end:null},i}return i(e,t),e.prototype.resize=function(e,n){t.prototype.resize.call(this,e,n),this._state={start:null,end:null}},e.prototype.reset=function(t){this._state.start&&this._state.end&&(this._state={start:null,end:null},this.clearAll())},e.prototype.onSelectionChanged=function(t,e,n){if(this._state.start!==e&&this._state.end!==n&&(this.clearAll(),e&&n)){var r=e[1]-t.buffer.ydisp,i=n[1]-t.buffer.ydisp,o=Math.max(r,0),s=Math.min(i,t.rows-1);if(!(o>=t.rows||s<0)){var a=r===o?e[0]:0,l=o===s?n[0]:t.cols;this._ctx.fillStyle=this._colors.selection.css,this.fillCells(a,o,l-a,1);var u=Math.max(s-o-1,0);if(this.fillCells(0,o+1,t.cols,u),o!==s){var c=i===s?n[0]:t.cols;this.fillCells(0,s,c,1)}this._state.start=[e[0],e[1]],this._state.end=[n[0],n[1]]}}},e}(n(5).BaseRenderLayer);e.SelectionRenderLayer=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(6),s=n(20),a=n(21),l=function(t){function e(e,n){var r=t.call(this)||this;return r._document=e,r._config=n,r._canvasFactory=function(t,e){var n=r._document.createElement("canvas");return n.width=t,n.height=e,n},r}return i(e,t),e.prototype._doWarmUp=function(){var t=this,e=a.generateStaticCharAtlasTexture(window,this._canvasFactory,this._config);e instanceof HTMLCanvasElement?this._texture=e:e.then(function(e){t._texture=e})},e.prototype._isCached=function(t,e){var n=t.code<256,r=t.fg<16,i=t.fg>=256,o=t.bg>=256;return n&&(r||i)&&o&&!t.italic},e.prototype.draw=function(t,e,n,r){if(null==this._texture)return!1;var i=0;if(e.fg<256?i=2+e.fg+(e.bold?16:0):e.bold&&(i=1),!this._isCached(e,i))return!1;t.save();var a=this._config.scaledCharWidth+s.CHAR_ATLAS_CELL_SPACING,l=this._config.scaledCharHeight+s.CHAR_ATLAS_CELL_SPACING;return e.dim&&(t.globalAlpha=o.DIM_OPACITY),t.drawImage(this._texture,e.code*a,i*l,a,this._config.scaledCharHeight,n,r,a,this._config.scaledCharHeight),t.restore(),!0},e}(n(9).default);e.default=l},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.draw=function(t,e,n,r){return!1},e}(n(9).default);e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.capacity=t,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return t.prototype._unlinkNode=function(t){var e=t.prev,n=t.next;t===this._head&&(this._head=n),t===this._tail&&(this._tail=e),null!==e&&(e.next=n),null!==n&&(n.prev=e)},t.prototype._appendNode=function(t){var e=this._tail;null!==e&&(e.next=t),t.prev=e,t.next=null,this._tail=t,null===this._head&&(this._head=t)},t.prototype.prealloc=function(t){for(var e=this._nodePool,n=0;n<t;n++)e.push({prev:null,next:null,key:null,value:null})},t.prototype.get=function(t){var e=this._map[t];return void 0!==e?(this._unlinkNode(e),this._appendNode(e),e.value):null},t.prototype.peek=function(){var t=this._head;return null===t?null:t.value},t.prototype.set=function(t,e){var n=this._map[t];if(void 0!==n)n=this._map[t],this._unlinkNode(n),n.value=e;else if(this.size>=this.capacity)n=this._head,this._unlinkNode(n),delete this._map[n.key],n.key=t,n.value=e,this._map[t]=n;else{var r=this._nodePool;r.length>0?((n=r.pop()).key=t,n.value=e):n={prev:null,next:null,key:t,value:e},this._map[t]=n,this.size++}this._appendNode(n)},t}();e.default=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(6),s=n(9),a=n(8),l=n(21),u=n(48),c=1024,h=1024,f={css:"rgba(0, 0, 0, 0)",rgba:0};var p=function(t){function e(e,n){var r=t.call(this)||this;r._config=n,r._drawToCacheCount=0,r._cacheCanvas=e.createElement("canvas"),r._cacheCanvas.width=c,r._cacheCanvas.height=h,r._cacheCtx=r._cacheCanvas.getContext("2d",{alpha:!0});var i=e.createElement("canvas");i.width=r._config.scaledCharWidth,i.height=r._config.scaledCharHeight,r._tmpCtx=i.getContext("2d",{alpha:r._config.allowTransparency}),r._width=Math.floor(c/r._config.scaledCharWidth),r._height=Math.floor(h/r._config.scaledCharHeight);var o=r._width*r._height;return r._cacheMap=new u.default(o),r._cacheMap.prealloc(o),r}return i(e,t),e.prototype.beginFrame=function(){this._drawToCacheCount=0},e.prototype.draw=function(t,e,n,r){var i=function(t){var e=(t.bold?0:4)+(t.dim?0:2)+(t.italic?0:1);return t.bg+"_"+t.fg+"_"+e+t.char}(e),o=this._cacheMap.get(i);if(null!=o)return this._drawFromCache(t,o,n,r),!0;if(this._canCache(e)&&this._drawToCacheCount<100){var s=void 0;s=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(e,s);return this._cacheMap.set(i,a),this._drawFromCache(t,a,n,r),!0}return!1},e.prototype._canCache=function(t){return t.code<256},e.prototype._toCoordinates=function(t){return[t%this._width*this._config.scaledCharWidth,Math.floor(t/this._width)*this._config.scaledCharHeight]},e.prototype._drawFromCache=function(t,e,n,r){if(!e.isEmpty){var i=this._toCoordinates(e.index),o=i[0],s=i[1];t.drawImage(this._cacheCanvas,o,s,this._config.scaledCharWidth,this._config.scaledCharHeight,n,r,this._config.scaledCharWidth,this._config.scaledCharHeight)}},e.prototype._getColorFromAnsiIndex=function(t){return t<this._config.colors.ansi.length?this._config.colors.ansi[t]:a.DEFAULT_ANSI_COLORS[t]},e.prototype._getBackgroundColor=function(t){return this._config.allowTransparency?f:t.bg===o.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:t.bg<256?this._getColorFromAnsiIndex(t.bg):this._config.colors.background},e.prototype._getForegroundColor=function(t){return t.fg===o.INVERTED_DEFAULT_COLOR?this._config.colors.background:t.fg<256?this._getColorFromAnsiIndex(t.fg):this._config.colors.foreground},e.prototype._drawToCache=function(t,e){this._drawToCacheCount++,this._tmpCtx.save();var n=this._getBackgroundColor(t);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=n.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var r=t.bold?this._config.fontWeightBold:this._config.fontWeight,i=t.italic?"italic":"";this._tmpCtx.font=i+" "+r+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline="top",this._tmpCtx.fillStyle=this._getForegroundColor(t).css,t.dim&&(this._tmpCtx.globalAlpha=o.DIM_OPACITY),this._tmpCtx.fillText(t.char,0,0),this._tmpCtx.restore();var s=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;this._config.allowTransparency||(a=l.clearColor(s,n));var u=this._toCoordinates(e),c=u[0],h=u[1];return this._cacheCtx.putImageData(s,c,h),{index:e,isEmpty:a}},e}(s.default);e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.generateConfig=function(t,e,n,r){var i={foreground:r.foreground,background:r.background,cursor:null,cursorAccent:null,selection:null,ansi:r.ansi.slice(0,16)};return{type:n.options.experimentalCharAtlas,devicePixelRatio:window.devicePixelRatio,scaledCharWidth:t,scaledCharHeight:e,fontFamily:n.options.fontFamily,fontSize:n.options.fontSize,fontWeight:n.options.fontWeight,fontWeightBold:n.options.fontWeightBold,allowTransparency:n.options.allowTransparency,colors:i}},e.configEquals=function(t,e){for(var n=0;n<t.colors.ansi.length;n++)if(t.colors.ansi[n].rgba!==e.colors.ansi[n].rgba)return!1;return t.type===e.type&&t.devicePixelRatio===e.devicePixelRatio&&t.fontFamily===e.fontFamily&&t.fontSize===e.fontSize&&t.fontWeight===e.fontWeight&&t.fontWeightBold===e.fontWeightBold&&t.allowTransparency===e.allowTransparency&&t.scaledCharWidth===e.scaledCharWidth&&t.scaledCharHeight===e.scaledCharHeight&&t.colors.foreground===e.colors.foreground&&t.colors.background===e.colors.background}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){this.cache=[]}return t.prototype.resize=function(t,e){for(var n=0;n<t;n++){this.cache.length<=n&&this.cache.push([]);for(var r=this.cache[n].length;r<e;r++)this.cache[n].push(null);this.cache[n].length=e}this.cache.length=t},t.prototype.clear=function(){for(var t=0;t<this.cache.length;t++)for(var e=0;e<this.cache[t].length;e++)this.cache[t][e]=null},t}();e.GridCache=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),s=n(6),a=n(51),l=function(t){function e(e,n,r,i){var o=t.call(this,e,"text",n,i,r)||this;return o._characterOverlapCache={},o._state=new a.GridCache,o}return i(e,t),e.prototype.resize=function(e,n){t.prototype.resize.call(this,e,n);var r=this._getFont(e,!1,!1);this._characterWidth===n.scaledCharWidth&&this._characterFont===r||(this._characterWidth=n.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(e.cols,e.rows)},e.prototype.reset=function(t){this._state.clear(),this.clearAll()},e.prototype._forEachCell=function(t,e,n,r){for(var i=e;i<=n;i++)for(var a=i+t.buffer.ydisp,l=t.buffer.lines.get(a),u=0;u<t.cols;u++){var c=l[u],h=c[o.CHAR_DATA_CODE_INDEX],f=c[o.CHAR_DATA_CHAR_INDEX],p=c[o.CHAR_DATA_ATTR_INDEX],_=c[o.CHAR_DATA_WIDTH_INDEX];if(0!==_){this._isOverlapping(c)&&u<l.length-1&&32===l[u+1][o.CHAR_DATA_CODE_INDEX]&&(_=2);var d=p>>18,m=511&p,v=p>>9&511;if(8&d){var y=m;m=v,256===(v=y)&&(v=s.INVERTED_DEFAULT_COLOR),257===m&&(m=s.INVERTED_DEFAULT_COLOR)}r(h,f,_,u,i,v,m,d)}}},e.prototype._drawBackground=function(t,e,n){var r=this,i=this._ctx,o=t.cols,a=0,l=0,u=null;i.save(),this._forEachCell(t,e,n,function(t,e,n,c,h,f,p,_){var d=null;p===s.INVERTED_DEFAULT_COLOR?d=r._colors.foreground.css:p<256&&(d=r._colors.ansi[p].css),null===u&&(a=c,l=h),h!==l?(i.fillStyle=u,r.fillCells(a,l,o-a,1),a=c,l=h):u!==d&&(i.fillStyle=u,r.fillCells(a,l,c-a,1),a=c,l=h),u=d}),null!==u&&(i.fillStyle=u,this.fillCells(a,l,o-a,1)),i.restore()},e.prototype._drawForeground=function(t,e,n){var r=this;this._forEachCell(t,e,n,function(e,n,i,o,a,l,u,c){16&c||(2&c&&(r._ctx.save(),l===s.INVERTED_DEFAULT_COLOR?r._ctx.fillStyle=r._colors.background.css:r._ctx.fillStyle=l<256?r._colors.ansi[l].css:r._colors.foreground.css,r.fillBottomLineAtCells(o,a),r._ctx.restore()),r.drawChar(t,n,e,i,o,a,l,u,!!(1&c),!!(32&c),!!(64&c)))})},e.prototype.onGridChanged=function(t,e,n){0!==this._state.cache.length&&(this._charAtlas.beginFrame(),this.clearCells(0,e,t.cols,n-e+1),this._drawBackground(t,e,n),this._drawForeground(t,e,n))},e.prototype.onOptionsChanged=function(t){this.setTransparency(t,t.options.allowTransparency)},e.prototype._isOverlapping=function(t){if(1!==t[o.CHAR_DATA_WIDTH_INDEX])return!1;if(t[o.CHAR_DATA_CODE_INDEX]<256)return!1;var e=t[o.CHAR_DATA_CHAR_INDEX];if(this._characterOverlapCache.hasOwnProperty(e))return this._characterOverlapCache[e];this._ctx.save(),this._ctx.font=this._characterFont;var n=Math.floor(this._ctx.measureText(e).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[e]=n,n},e}(n(5).BaseRenderLayer);e.TextRenderLayer=l},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(52),s=n(45),a=n(44),l=n(8),u=n(43),c=n(0),h=n(19),f=n(18),p=function(t){function e(e,n){var r=t.call(this)||this;r._terminal=e,r._isPaused=!1,r._needsFullRefresh=!1;var i=r._terminal.options.allowTransparency;(r.colorManager=new l.ColorManager(document,i),n&&r.colorManager.setTheme(n),r._renderLayers=[new o.TextRenderLayer(r._terminal.screenElement,0,r.colorManager.colors,i),new s.SelectionRenderLayer(r._terminal.screenElement,1,r.colorManager.colors),new u.LinkRenderLayer(r._terminal.screenElement,2,r.colorManager.colors,r._terminal),new a.CursorRenderLayer(r._terminal.screenElement,3,r.colorManager.colors)],r.dimensions={scaledCharWidth:null,scaledCharHeight:null,scaledCellWidth:null,scaledCellHeight:null,scaledCharLeft:null,scaledCharTop:null,scaledCanvasWidth:null,scaledCanvasHeight:null,canvasWidth:null,canvasHeight:null,actualCellWidth:null,actualCellHeight:null},r._devicePixelRatio=window.devicePixelRatio,r._updateDimensions(),r.onOptionsChanged(),r._renderDebouncer=new h.RenderDebouncer(r._terminal,r._renderRows.bind(r)),r._screenDprMonitor=new f.ScreenDprMonitor,r._screenDprMonitor.setListener(function(){return r.onWindowResize(window.devicePixelRatio)}),"IntersectionObserver"in window)&&new IntersectionObserver(function(t){return r.onIntersectionChange(t[0])},{threshold:0}).observe(r._terminal.element);return r}return i(e,t),e.prototype.onIntersectionChange=function(t){this._isPaused=0===t.intersectionRatio,!this._isPaused&&this._needsFullRefresh&&this._terminal.refresh(0,this._terminal.rows-1)},e.prototype.onWindowResize=function(t){this._devicePixelRatio!==t&&(this._devicePixelRatio=t,this.onResize(this._terminal.cols,this._terminal.rows))},e.prototype.setTheme=function(t){var e=this;return this.colorManager.setTheme(t),this._renderLayers.forEach(function(t){t.onThemeChanged(e._terminal,e.colorManager.colors),t.reset(e._terminal)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this.colorManager.colors},e.prototype.onResize=function(t,e){var n=this;this._updateDimensions(),this._renderLayers.forEach(function(t){return t.resize(n._terminal,n.dimensions)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this._terminal.screenElement.style.width=this.dimensions.canvasWidth+"px",this._terminal.screenElement.style.height=this.dimensions.canvasHeight+"px",this.emit("resize",{width:this.dimensions.canvasWidth,height:this.dimensions.canvasHeight})},e.prototype.onCharSizeChanged=function(){this.onResize(this._terminal.cols,this._terminal.rows)},e.prototype.onBlur=function(){var t=this;this._runOperation(function(e){return e.onBlur(t._terminal)})},e.prototype.onFocus=function(){var t=this;this._runOperation(function(e){return e.onFocus(t._terminal)})},e.prototype.onSelectionChanged=function(t,e){var n=this;this._runOperation(function(r){return r.onSelectionChanged(n._terminal,t,e)})},e.prototype.onCursorMove=function(){var t=this;this._runOperation(function(e){return e.onCursorMove(t._terminal)})},e.prototype.onOptionsChanged=function(){var t=this;this.colorManager.allowTransparency=this._terminal.options.allowTransparency,this._runOperation(function(e){return e.onOptionsChanged(t._terminal)})},e.prototype.clear=function(){var t=this;this._runOperation(function(e){return e.reset(t._terminal)})},e.prototype._runOperation=function(t){this._isPaused?this._needsFullRefresh=!0:this._renderLayers.forEach(function(e){return t(e)})},e.prototype.refreshRows=function(t,e){this._isPaused?this._needsFullRefresh=!0:this._renderDebouncer.refresh(t,e)},e.prototype._renderRows=function(t,e){var n=this;this._renderLayers.forEach(function(r){return r.onGridChanged(n._terminal,t,e)}),this._terminal.emit("refresh",{start:t,end:e})},e.prototype._updateDimensions=function(){this._terminal.charMeasure.width&&this._terminal.charMeasure.height&&(this.dimensions.scaledCharWidth=Math.floor(this._terminal.charMeasure.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._terminal.charMeasure.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharTop=1===this._terminal.options.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._terminal.options.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._terminal.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._terminal.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._terminal.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._terminal.cols)},e}(c.EventEmitter);e.Renderer=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(7),i=n(23),o={};o[r.C0.BEL]=function(t,e){return e.bell()},o[r.C0.LF]=function(t,e){return e.lineFeed()},o[r.C0.VT]=o[r.C0.LF],o[r.C0.FF]=o[r.C0.LF],o[r.C0.CR]=function(t,e){return e.carriageReturn()},o[r.C0.BS]=function(t,e){return e.backspace()},o[r.C0.HT]=function(t,e){return e.tab()},o[r.C0.SO]=function(t,e){return e.shiftOut()},o[r.C0.SI]=function(t,e){return e.shiftIn()},o[r.C0.ESC]=function(t,e){return t.setState(1)};var s={"[":function(t,e){e.params=[],e.currentParam=0,t.setState(2)},"]":function(t,e){e.params=[],e.currentParam=0,t.setState(4)},P:function(t,e){e.params=[],e.currentParam=0,t.setState(6)},_:function(t,e){t.setState(7)},"^":function(t,e){t.setState(7)},c:function(t,e){e.reset()},E:function(t,e){e.buffer.x=0,e.index(),t.setState(0)},D:function(t,e){e.index(),t.setState(0)},M:function(t,e){e.reverseIndex(),t.setState(0)},"%":function(t,e){e.setgLevel(0),e.setgCharset(0,i.DEFAULT_CHARSET),t.setState(0),t.skipNextChar()}};s[r.C0.CAN]=function(t){return t.setState(0)};var a={"?":function(t){return t.setPrefix("?")},">":function(t){return t.setPrefix(">")},"!":function(t){return t.setPrefix("!")},0:function(t){return t.setParam(10*t.getParam())},1:function(t){return t.setParam(10*t.getParam()+1)},2:function(t){return t.setParam(10*t.getParam()+2)},3:function(t){return t.setParam(10*t.getParam()+3)},4:function(t){return t.setParam(10*t.getParam()+4)},5:function(t){return t.setParam(10*t.getParam()+5)},6:function(t){return t.setParam(10*t.getParam()+6)},7:function(t){return t.setParam(10*t.getParam()+7)},8:function(t){return t.setParam(10*t.getParam()+8)},9:function(t){return t.setParam(10*t.getParam()+9)},$:function(t){return t.setPostfix("$")},'"':function(t){return t.setPostfix('"')}," ":function(t){return t.setPostfix(" ")},"'":function(t){return t.setPostfix("'")},";":function(t){return t.finalizeParam()}};a[r.C0.CAN]=function(t){return t.setState(0)};var l={"@":function(t,e,n){return t.insertChars(e)},A:function(t,e,n){return t.cursorUp(e)},B:function(t,e,n){return t.cursorDown(e)},C:function(t,e,n){return t.cursorForward(e)},D:function(t,e,n){return t.cursorBackward(e)},E:function(t,e,n){return t.cursorNextLine(e)},F:function(t,e,n){return t.cursorPrecedingLine(e)},G:function(t,e,n){return t.cursorCharAbsolute(e)},H:function(t,e,n){return t.cursorPosition(e)},I:function(t,e,n){return t.cursorForwardTab(e)},J:function(t,e,n){return t.eraseInDisplay(e)},K:function(t,e,n){return t.eraseInLine(e)},L:function(t,e,n){return t.insertLines(e)},M:function(t,e,n){return t.deleteLines(e)},P:function(t,e,n){return t.deleteChars(e)},S:function(t,e,n){return t.scrollUp(e)},T:function(t,e,n){e.length<2&&!n&&t.scrollDown(e)},X:function(t,e,n){return t.eraseChars(e)},Z:function(t,e,n){return t.cursorBackwardTab(e)},"`":function(t,e,n){return t.charPosAbsolute(e)},a:function(t,e,n){return t.HPositionRelative(e)},b:function(t,e,n){return t.repeatPrecedingCharacter(e)},c:function(t,e,n){return t.sendDeviceAttributes(e)},d:function(t,e,n){return t.linePosAbsolute(e)},e:function(t,e,n){return t.VPositionRelative(e)},f:function(t,e,n){return t.HVPosition(e)},g:function(t,e,n){return t.tabClear(e)},h:function(t,e,n){return t.setMode(e)},l:function(t,e,n){return t.resetMode(e)},m:function(t,e,n){return t.charAttributes(e)},n:function(t,e,n){return t.deviceStatus(e)},p:function(t,e,n){switch(n){case"!":t.softReset(e)}},q:function(t,e,n,r){" "===r&&t.setCursorStyle(e)},r:function(t,e){return t.setScrollRegion(e)},s:function(t,e){return t.saveCursor(e)},u:function(t,e){return t.restoreCursor(e)}};l[r.C0.CAN]=function(t,e,n,r,i){return i.setState(0)};var u=function(){function t(t,e){this._inputHandler=t,this._terminal=e,this._state=0}return t.prototype.parse=function(t){var e,n,u,c,h=t.length,f=this._terminal.buffer.x,p=this._terminal.buffer.y;for(this._terminal.debug&&this._terminal.log("data: "+t),this._position=0,this._terminal.surrogate_high&&(t=this._terminal.surrogate_high+t,this._terminal.surrogate_high="");this._position<h;this._position++){if(n=t[this._position],55296<=(u=t.charCodeAt(this._position))&&u<=56319){if(c=t.charCodeAt(this._position+1),isNaN(c)){this._terminal.surrogate_high=n;continue}u=1024*(u-55296)+(c-56320)+65536,n+=t.charAt(this._position+1)}if(!(56320<=u&&u<=57343))switch(this._state){case 0:n in o?o[n](this,this._inputHandler):this._inputHandler.addChar(n,u);break;case 1:if(n in s){s[n](this,this._terminal);break}switch(n){case"(":case")":case"*":case"+":case"-":case".":switch(n){case"(":this._terminal.gcharset=0;break;case")":this._terminal.gcharset=1;break;case"*":this._terminal.gcharset=2;break;case"+":this._terminal.gcharset=3;break;case"-":this._terminal.gcharset=1;break;case".":this._terminal.gcharset=2}this._state=5;break;case"/":this._terminal.gcharset=3,this._state=5,this._position--;break;case"N":case"O":this._state=0;break;case"n":this._terminal.setgLevel(2),this._state=0;break;case"o":case"|":this._terminal.setgLevel(3),this._state=0;break;case"}":this._terminal.setgLevel(2),this._state=0;break;case"~":this._terminal.setgLevel(1),this._state=0;break;case"7":this._inputHandler.saveCursor(),this._state=0;break;case"8":this._inputHandler.restoreCursor(),this._state=0;break;case"#":this._state=0,this._position++;break;case"H":this._terminal.tabSet(),this._state=0;break;case"=":this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._state=0;break;case">":this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._state=0;break;default:this._state=0,this._terminal.error("Unknown ESC control: %s.",n)}break;case 5:n in i.CHARSETS?(e=i.CHARSETS[n],"/"===n&&this.skipNextChar()):e=i.DEFAULT_CHARSET,this._terminal.setgCharset(this._terminal.gcharset,e),this._terminal.gcharset=null,this._state=0;break;case 4:if(n===r.C0.ESC||n===r.C0.BEL){switch(n===r.C0.ESC&&this._position++,this._terminal.params.push(this._terminal.currentParam),this._terminal.params[0]){case 0:case 1:case 2:this._terminal.params[1]&&(this._terminal.title=this._terminal.params[1],this._terminal.handleTitle(this._terminal.title))}this._terminal.params=[],this._terminal.currentParam=0,this._state=0}else this._terminal.params.length?this._terminal.currentParam+=n:n>="0"&&n<="9"?this._terminal.currentParam=10*this._terminal.currentParam+n.charCodeAt(0)-48:";"===n&&(this._terminal.params.push(this._terminal.currentParam),this._terminal.currentParam="");break;case 2:if(n in a){a[n](this);break}this.finalizeParam(),this._state=3;case 3:n in l?(this._terminal.debug&&this._terminal.log("CSI "+(this._terminal.prefix?this._terminal.prefix:"")+" "+(this._terminal.params?this._terminal.params.join(";"):"")+" "+(this._terminal.postfix?this._terminal.postfix:"")+" "+n),l[n](this._inputHandler,this._terminal.params,this._terminal.prefix,this._terminal.postfix,this)):this._terminal.error("Unknown CSI code: %s.",n),this._state=0,this._terminal.prefix="",this._terminal.postfix="";break;case 6:if(n===r.C0.ESC||n===r.C0.BEL){n===r.C0.ESC&&this._position++;var _=void 0,d=void 0;switch(this._terminal.prefix){case"":break;case"$q":switch(d=!1,_=this._terminal.currentParam){case'"q':_='0"q';break;case'"p':_='61"p';break;case"r":_=this._terminal.buffer.scrollTop+1+";"+(this._terminal.buffer.scrollBottom+1)+"r";break;case"m":_="0m";break;default:this._terminal.error("Unknown DCS Pt: %s.",_),_=""}this._terminal.send(r.C0.ESC+"P"+ +d+"$r"+_+r.C0.ESC+"\\");break;case"+p":break;case"+q":_=this._terminal.currentParam,d=!1,this._terminal.send(r.C0.ESC+"P"+ +d+"+r"+_+r.C0.ESC+"\\");break;default:this._terminal.error("Unknown DCS prefix: %s.",this._terminal.prefix)}this._terminal.currentParam=0,this._terminal.prefix="",this._state=0}else this._terminal.currentParam?this._terminal.currentParam+=n:this._terminal.prefix||"$"===n||"+"===n?2===this._terminal.prefix.length?this._terminal.currentParam=n:this._terminal.prefix+=n:this._terminal.currentParam=n;break;case 7:n!==r.C0.ESC&&n!==r.C0.BEL||(n===r.C0.ESC&&this._position++,this._state=0)}}return this._terminal.buffer.x===f&&this._terminal.buffer.y===p||this._terminal.emit("cursormove"),this._state},t.prototype.setState=function(t){this._state=t},t.prototype.setPrefix=function(t){this._terminal.prefix=t},t.prototype.setPostfix=function(t){this._terminal.postfix=t},t.prototype.setParam=function(t){this._terminal.currentParam=t},t.prototype.getParam=function(){return this._terminal.currentParam},t.prototype.finalizeParam=function(){this._terminal.params.push(this._terminal.currentParam),this._terminal.currentParam=0},t.prototype.skipNextChar=function(){this._position++},t}();e.Parser=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.wcwidth=function(t){var e=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],n=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];function r(t,e){var n,r=0,i=e.length-1;if(t<e[0][0]||t>e[i][1])return!1;for(;i>=r;)if(t>e[n=r+i>>1][1])r=n+1;else{if(!(t<e[n][0]))return!0;i=n-1}return!1}var i=0|t.control,o=null;return function(s){if((s|=0)<32)return 0|i;if(s<127)return 1;var a,l=o||function(){var n;o="undefined"==typeof Uint32Array?new Array(4096):new Uint32Array(4096);for(var i=0;i<4096;++i){for(var s=0,a=16;a--;)s=s<<2|(0===(n=16*i+a)?t.nul:n<32||n>=127&&n<160?t.control:r(n,e)?0:function(t){return t>=4352&&(t<=4447||9001===t||9002===t||t>=11904&&t<=42191&&12351!==t||t>=44032&&t<=55203||t>=63744&&t<=64255||t>=65040&&t<=65049||t>=65072&&t<=65135||t>=65280&&t<=65376||t>=65504&&t<=65510)}(n)?2:1);o[i]=s}return o}();return s<65536?l[s>>4]>>((15&s)<<1)&3:r(a=s,n)?0:a>=131072&&a<=196605||a>=196608&&a<=262141?2:1}}({nul:0,control:0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(7),i=n(23),o=n(1),s=n(55),a=function(){function t(t){this._terminal=t}return t.prototype.addChar=function(t,e){if(t>=" "){var n=this._terminal.buffer,r=s.wcwidth(e);this._terminal.charset&&this._terminal.charset[t]&&(t=this._terminal.charset[t]),this._terminal.options.screenReaderMode&&this._terminal.emit("a11y.char",t);var i=n.y+n.ybase;if(!r&&n.x)return void(n.lines.get(i)[n.x-1]&&(n.lines.get(i)[n.x-1][o.CHAR_DATA_WIDTH_INDEX]?(n.lines.get(i)[n.x-1][o.CHAR_DATA_CHAR_INDEX]+=t,n.lines.get(i)[n.x-1][3]=t.charCodeAt(0)):n.lines.get(i)[n.x-2]&&(n.lines.get(i)[n.x-2][o.CHAR_DATA_CHAR_INDEX]+=t,n.lines.get(i)[n.x-2][3]=t.charCodeAt(0)),this._terminal.updateRange(n.y)));if(n.x+r-1>=this._terminal.cols)if(this._terminal.wraparoundMode)n.x=0,n.y++,n.y>n.scrollBottom?(n.y--,this._terminal.scroll(!0)):n.lines.get(n.y).isWrapped=!0;else if(2===r)return;if(i=n.y+n.ybase,this._terminal.insertMode)for(var a=0;a<r;++a){0===n.lines.get(n.y+n.ybase).pop()[o.CHAR_DATA_WIDTH_INDEX]&&n.lines.get(i)[this._terminal.cols-2]&&2===n.lines.get(i)[this._terminal.cols-2][o.CHAR_DATA_WIDTH_INDEX]&&(n.lines.get(i)[this._terminal.cols-2]=[this._terminal.curAttr," ",1," ".charCodeAt(0)]),n.lines.get(i).splice(n.x,0,[this._terminal.curAttr," ",1," ".charCodeAt(0)])}n.lines.get(i)[n.x]=[this._terminal.curAttr,t,r,t.charCodeAt(0)],n.x++,this._terminal.updateRange(n.y),2===r&&(n.lines.get(i)[n.x]=[this._terminal.curAttr,"",0,void 0],n.x++)}},t.prototype.bell=function(){this._terminal.bell()},t.prototype.lineFeed=function(){var t=this._terminal.buffer;this._terminal.convertEol&&(t.x=0),t.y++,t.y>t.scrollBottom&&(t.y--,this._terminal.scroll()),t.x>=this._terminal.cols&&t.x--,this._terminal.emit("linefeed")},t.prototype.carriageReturn=function(){this._terminal.buffer.x=0},t.prototype.backspace=function(){this._terminal.buffer.x>0&&this._terminal.buffer.x--},t.prototype.tab=function(){var t=this._terminal.buffer.x;this._terminal.buffer.x=this._terminal.buffer.nextStop(),this._terminal.options.screenReaderMode&&this._terminal.emit("a11y.tab",this._terminal.buffer.x-t)},t.prototype.shiftOut=function(){this._terminal.setgLevel(1)},t.prototype.shiftIn=function(){this._terminal.setgLevel(0)},t.prototype.insertChars=function(t){var e=t[0];e<1&&(e=1);for(var n=this._terminal.buffer,r=n.y+n.ybase,i=n.x,o=[this._terminal.eraseAttr()," ",1,32];e--&&i<this._terminal.cols;)n.lines.get(r).splice(i++,0,o),n.lines.get(r).pop()},t.prototype.cursorUp=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y-=e,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0)},t.prototype.cursorDown=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},t.prototype.cursorForward=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x+=e,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.cursorBackward=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--,this._terminal.buffer.x-=e,this._terminal.buffer.x<0&&(this._terminal.buffer.x=0)},t.prototype.cursorNextLine=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=0},t.prototype.cursorPrecedingLine=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y-=e,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0),this._terminal.buffer.x=0},t.prototype.cursorCharAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x=e-1},t.prototype.cursorPosition=function(t){var e,n=t[0]-1;e=t.length>=2?t[1]-1:0,n<0?n=0:n>=this._terminal.rows&&(n=this._terminal.rows-1),e<0?e=0:e>=this._terminal.cols&&(e=this._terminal.cols-1),this._terminal.buffer.x=e,this._terminal.buffer.y=n},t.prototype.cursorForwardTab=function(t){for(var e=t[0]||1;e--;)this._terminal.buffer.x=this._terminal.buffer.nextStop()},t.prototype.eraseInDisplay=function(t){var e;switch(t[0]){case 0:for(this._terminal.eraseRight(this._terminal.buffer.x,this._terminal.buffer.y),e=this._terminal.buffer.y+1;e<this._terminal.rows;e++)this._terminal.eraseLine(e);break;case 1:for(this._terminal.eraseLeft(this._terminal.buffer.x,this._terminal.buffer.y),e=this._terminal.buffer.y;e--;)this._terminal.eraseLine(e);break;case 2:for(e=this._terminal.rows;e--;)this._terminal.eraseLine(e);break;case 3:var n=this._terminal.buffer.lines.length-this._terminal.rows;n>0&&(this._terminal.buffer.lines.trimStart(n),this._terminal.buffer.ybase=Math.max(this._terminal.buffer.ybase-n,0),this._terminal.buffer.ydisp=Math.max(this._terminal.buffer.ydisp-n,0),this._terminal.emit("scroll",0))}},t.prototype.eraseInLine=function(t){switch(t[0]){case 0:this._terminal.eraseRight(this._terminal.buffer.x,this._terminal.buffer.y);break;case 1:this._terminal.eraseLeft(this._terminal.buffer.x,this._terminal.buffer.y);break;case 2:this._terminal.eraseLine(this._terminal.buffer.y)}},t.prototype.insertLines=function(t){var e=t[0];e<1&&(e=1);for(var n=this._terminal.buffer,r=n.y+n.ybase,i=this._terminal.rows-1-n.scrollBottom,o=this._terminal.rows-1+n.ybase-i+1;e--;)n.lines.splice(o-1,1),n.lines.splice(r,0,this._terminal.blankLine(!0));this._terminal.updateRange(n.y),this._terminal.updateRange(n.scrollBottom)},t.prototype.deleteLines=function(t){var e=t[0];e<1&&(e=1);var n,r=this._terminal.buffer,i=r.y+r.ybase;for(n=this._terminal.rows-1-r.scrollBottom,n=this._terminal.rows-1+r.ybase-n;e--;)r.lines.splice(i,1),r.lines.splice(n,0,this._terminal.blankLine(!0));this._terminal.updateRange(r.y),this._terminal.updateRange(r.scrollBottom)},t.prototype.deleteChars=function(t){var e=t[0];e<1&&(e=1);for(var n=this._terminal.buffer,r=n.y+n.ybase,i=[this._terminal.eraseAttr()," ",1,32];e--;)n.lines.get(r).splice(n.x,1),n.lines.get(r).push(i);this._terminal.updateRange(n.y)},t.prototype.scrollUp=function(t){for(var e=t[0]||1,n=this._terminal.buffer;e--;)n.lines.splice(n.ybase+n.scrollTop,1),n.lines.splice(n.ybase+n.scrollBottom,0,this._terminal.blankLine());this._terminal.updateRange(n.scrollTop),this._terminal.updateRange(n.scrollBottom)},t.prototype.scrollDown=function(t){for(var e=t[0]||1,n=this._terminal.buffer;e--;)n.lines.splice(n.ybase+n.scrollBottom,1),n.lines.splice(n.ybase+n.scrollTop,0,this._terminal.blankLine());this._terminal.updateRange(n.scrollTop),this._terminal.updateRange(n.scrollBottom)},t.prototype.eraseChars=function(t){var e=t[0];e<1&&(e=1);for(var n=this._terminal.buffer,r=n.y+n.ybase,i=n.x,o=[this._terminal.eraseAttr()," ",1,32];e--&&i<this._terminal.cols;)n.lines.get(r)[i++]=o},t.prototype.cursorBackwardTab=function(t){for(var e=t[0]||1,n=this._terminal.buffer;e--;)n.x=n.prevStop()},t.prototype.charPosAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x=e-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.HPositionRelative=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x+=e,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.repeatPrecedingCharacter=function(t){for(var e=t[0]||1,n=this._terminal.buffer,r=n.lines.get(n.ybase+n.y),i=r[n.x-1]||[this._terminal.defAttr," ",1,32];e--;)r[n.x++]=i},t.prototype.sendDeviceAttributes=function(t){t[0]>0||(this._terminal.prefix?">"===this._terminal.prefix&&(this._terminal.is("xterm")?this._terminal.send(r.C0.ESC+"[>0;276;0c"):this._terminal.is("rxvt-unicode")?this._terminal.send(r.C0.ESC+"[>85;95;0c"):this._terminal.is("linux")?this._terminal.send(t[0]+"c"):this._terminal.is("screen")&&this._terminal.send(r.C0.ESC+"[>83;40003;0c")):this._terminal.is("xterm")||this._terminal.is("rxvt-unicode")||this._terminal.is("screen")?this._terminal.send(r.C0.ESC+"[?1;2c"):this._terminal.is("linux")&&this._terminal.send(r.C0.ESC+"[?6c"))},t.prototype.linePosAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y=e-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1)},t.prototype.VPositionRelative=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},t.prototype.HVPosition=function(t){t[0]<1&&(t[0]=1),t[1]<1&&(t[1]=1),this._terminal.buffer.y=t[0]-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=t[1]-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.tabClear=function(t){var e=t[0];e<=0?delete this._terminal.buffer.tabs[this._terminal.buffer.x]:3===e&&(this._terminal.buffer.tabs={})},t.prototype.setMode=function(t){if(t.length>1)for(var e=0;e<t.length;e++)this.setMode([t[e]]);else if(this._terminal.prefix){if("?"===this._terminal.prefix)switch(t[0]){case 1:this._terminal.applicationCursor=!0;break;case 2:this._terminal.setgCharset(0,i.DEFAULT_CHARSET),this._terminal.setgCharset(1,i.DEFAULT_CHARSET),this._terminal.setgCharset(2,i.DEFAULT_CHARSET),this._terminal.setgCharset(3,i.DEFAULT_CHARSET);break;case 3:this._terminal.savedCols=this._terminal.cols,this._terminal.resize(132,this._terminal.rows);break;case 6:this._terminal.originMode=!0;break;case 7:this._terminal.wraparoundMode=!0;break;case 12:break;case 66:this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=9===t[0],this._terminal.vt200Mouse=1e3===t[0],this._terminal.normalMouse=t[0]>1e3,this._terminal.mouseEvents=!0,this._terminal.element.classList.add("enable-mouse-events"),this._terminal.selectionManager.disable(),this._terminal.log("Binding to mouse events.");break;case 1004:this._terminal.sendFocus=!0;break;case 1005:this._terminal.utfMouse=!0;break;case 1006:this._terminal.sgrMouse=!0;break;case 1015:this._terminal.urxvtMouse=!0;break;case 25:this._terminal.cursorHidden=!1;break;case 1049:case 47:case 1047:this._terminal.buffers.activateAltBuffer(),this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!0}}else switch(t[0]){case 4:this._terminal.insertMode=!0}},t.prototype.resetMode=function(t){if(t.length>1)for(var e=0;e<t.length;e++)this.resetMode([t[e]]);else if(this._terminal.prefix){if("?"===this._terminal.prefix)switch(t[0]){case 1:this._terminal.applicationCursor=!1;break;case 3:132===this._terminal.cols&&this._terminal.savedCols&&this._terminal.resize(this._terminal.savedCols,this._terminal.rows),delete this._terminal.savedCols;break;case 6:this._terminal.originMode=!1;break;case 7:this._terminal.wraparoundMode=!1;break;case 12:break;case 66:this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=!1,this._terminal.vt200Mouse=!1,this._terminal.normalMouse=!1,this._terminal.mouseEvents=!1,this._terminal.element.classList.remove("enable-mouse-events"),this._terminal.selectionManager.enable();break;case 1004:this._terminal.sendFocus=!1;break;case 1005:this._terminal.utfMouse=!1;break;case 1006:this._terminal.sgrMouse=!1;break;case 1015:this._terminal.urxvtMouse=!1;break;case 25:this._terminal.cursorHidden=!0;break;case 1049:case 47:case 1047:this._terminal.buffers.activateNormalBuffer(),this._terminal.refresh(0,this._terminal.rows-1),this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!1}}else switch(t[0]){case 4:this._terminal.insertMode=!1}},t.prototype.charAttributes=function(t){if(1!==t.length||0!==t[0]){for(var e,n=t.length,r=this._terminal.curAttr>>18,i=this._terminal.curAttr>>9&511,o=511&this._terminal.curAttr,s=0;s<n;s++)(e=t[s])>=30&&e<=37?i=e-30:e>=40&&e<=47?o=e-40:e>=90&&e<=97?i=(e+=8)-90:e>=100&&e<=107?o=(e+=8)-100:0===e?(r=this._terminal.defAttr>>18,i=this._terminal.defAttr>>9&511,o=511&this._terminal.defAttr):1===e?r|=1:3===e?r|=64:4===e?r|=2:5===e?r|=4:7===e?r|=8:8===e?r|=16:2===e?r|=32:22===e?(r&=-2,r&=-33):24===e?r&=-3:25===e?r&=-5:27===e?r&=-9:28===e?r&=-17:39===e?i=this._terminal.defAttr>>9&511:49===e?o=511&this._terminal.defAttr:38===e?2===t[s+1]?(s+=2,-1===(i=this._terminal.matchColor(255&t[s],255&t[s+1],255&t[s+2]))&&(i=511),s+=2):5===t[s+1]&&(i=e=255&t[s+=2]):48===e?2===t[s+1]?(s+=2,-1===(o=this._terminal.matchColor(255&t[s],255&t[s+1],255&t[s+2]))&&(o=511),s+=2):5===t[s+1]&&(o=e=255&t[s+=2]):100===e?(i=this._terminal.defAttr>>9&511,o=511&this._terminal.defAttr):this._terminal.error("Unknown SGR attribute: %d.",e);this._terminal.curAttr=r<<18|i<<9|o}else this._terminal.curAttr=this._terminal.defAttr},t.prototype.deviceStatus=function(t){if(this._terminal.prefix){if("?"===this._terminal.prefix)switch(t[0]){case 6:this._terminal.send(r.C0.ESC+"[?"+(this._terminal.buffer.y+1)+";"+(this._terminal.buffer.x+1)+"R")}}else switch(t[0]){case 5:this._terminal.send(r.C0.ESC+"[0n");break;case 6:this._terminal.send(r.C0.ESC+"["+(this._terminal.buffer.y+1)+";"+(this._terminal.buffer.x+1)+"R")}},t.prototype.softReset=function(t){this._terminal.cursorHidden=!1,this._terminal.insertMode=!1,this._terminal.originMode=!1,this._terminal.wraparoundMode=!0,this._terminal.applicationKeypad=!1,this._terminal.viewport.syncScrollArea(),this._terminal.applicationCursor=!1,this._terminal.buffer.scrollTop=0,this._terminal.buffer.scrollBottom=this._terminal.rows-1,this._terminal.curAttr=this._terminal.defAttr,this._terminal.buffer.x=this._terminal.buffer.y=0,this._terminal.charset=null,this._terminal.glevel=0,this._terminal.charsets=[null]},t.prototype.setCursorStyle=function(t){var e=t[0]<1?1:t[0];switch(e){case 1:case 2:this._terminal.setOption("cursorStyle","block");break;case 3:case 4:this._terminal.setOption("cursorStyle","underline");break;case 5:case 6:this._terminal.setOption("cursorStyle","bar")}var n=e%2==1;this._terminal.setOption("cursorBlink",n)},t.prototype.setScrollRegion=function(t){this._terminal.prefix||(this._terminal.buffer.scrollTop=(t[0]||1)-1,this._terminal.buffer.scrollBottom=(t[1]&&t[1]<=this._terminal.rows?t[1]:this._terminal.rows)-1,this._terminal.buffer.x=0,this._terminal.buffer.y=0)},t.prototype.saveCursor=function(t){this._terminal.buffer.savedX=this._terminal.buffer.x,this._terminal.buffer.savedY=this._terminal.buffer.y},t.prototype.restoreCursor=function(t){this._terminal.buffer.x=this._terminal.buffer.savedX||0,this._terminal.buffer.y=this._terminal.buffer.savedY||0},t}();e.InputHandler=a},function(t,e,n){"use strict";function r(t){return t.replace(/\r?\n/g,"\r")}function i(t,e){return e?"[200~"+t+"[201~":t}function o(t,e){e.style.position="fixed",e.style.width="20px",e.style.height="20px",e.style.left=t.clientX-10+"px",e.style.top=t.clientY-10+"px",e.style.zIndex="1000",e.focus(),setTimeout(function(){e.style.position=null,e.style.width=null,e.style.height=null,e.style.left=null,e.style.top=null,e.style.zIndex=null},200)}Object.defineProperty(e,"__esModule",{value:!0}),e.prepareTextForTerminal=r,e.bracketTextForPaste=i,e.copyHandler=function(t,e,n){e.browser.isMSIE?window.clipboardData.setData("Text",n.selectionText):t.clipboardData.setData("text/plain",n.selectionText),t.preventDefault()},e.pasteHandler=function(t,e){t.stopPropagation();var n=function(n){n=i(n=r(n),e.bracketedPasteMode),e.handler(n),e.textarea.value="",e.emit("paste",n),e.cancel(t)};e.browser.isMSIE?window.clipboardData&&n(window.clipboardData.getData("Text")):t.clipboardData&&n(t.clipboardData.getData("text/plain"))},e.moveTextAreaUnderMouseCursor=o,e.rightClickHandler=function(t,e,n,r){o(t,e),r&&!n.isClickInSelection(t)&&n.selectWordAtCursor(t),e.value=n.selectionText,e.select()}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=15,i=function(){function t(t,e,n,i){var o=this;this._terminal=t,this._viewportElement=e,this._scrollArea=n,this._charMeasure=i,this.scrollBarWidth=0,this._currentRowHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._wheelPartialScroll=0,this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||r,this._viewportElement.addEventListener("scroll",this._onScroll.bind(this)),setTimeout(function(){return o.syncScrollArea()},0)}return t.prototype.onThemeChanged=function(t){this._viewportElement.style.backgroundColor=t.background.css},t.prototype._refresh=function(){if(this._charMeasure.height>0){this._currentRowHeight=this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var t=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._terminal.renderer.dimensions.canvasHeight);this._lastRecordedBufferHeight!==t&&(this._lastRecordedBufferHeight=t,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}},t.prototype.syncScrollArea=function(){this._lastRecordedBufferLength!==this._terminal.buffer.lines.length?(this._lastRecordedBufferLength=this._terminal.buffer.lines.length,this._refresh()):this._lastRecordedViewportHeight!==this._terminal.renderer.dimensions.canvasHeight?this._refresh():this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio!==this._currentRowHeight&&this._refresh();var t=this._terminal.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._viewportElement.scrollTop=t)},t.prototype._onScroll=function(t){if(this._viewportElement.offsetParent){var e=Math.round(this._viewportElement.scrollTop/this._currentRowHeight)-this._terminal.buffer.ydisp;this._terminal.scrollLines(e,!0)}},t.prototype.onWheel=function(t){var e=this._getPixelsScrolled(t);0!==e&&(this._viewportElement.scrollTop+=e,t.preventDefault())},t.prototype._getPixelsScrolled=function(t){if(0===t.deltaY)return 0;var e=t.deltaY;return t.deltaMode===WheelEvent.DOM_DELTA_LINE?e*=this._currentRowHeight:t.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(e*=this._currentRowHeight*this._terminal.rows),e},t.prototype.getLinesScrolled=function(t){if(0===t.deltaY)return 0;var e=t.deltaY;return t.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(e/=this._currentRowHeight+0,this._wheelPartialScroll+=e,e=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):t.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(e*=this._terminal.rows),e},t.prototype.onTouchStart=function(t){this._lastTouchY=t.touches[0].pageY},t.prototype.onTouchMove=function(t){var e=this._lastTouchY-t.touches[0].pageY;this._lastTouchY=t.touches[0].pageY,0!==e&&(this._viewportElement.scrollTop+=e,t.preventDefault())},t}();e.Viewport=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){this._textarea=t,this._compositionView=e,this._terminal=n,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:null,end:null}}return t.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._compositionView.classList.add("active")},t.prototype.compositionupdate=function(t){var e=this;this._compositionView.textContent=t.data,this.updateCompositionElements(),setTimeout(function(){e._compositionPosition.end=e._textarea.value.length},0)},t.prototype.compositionend=function(){this._finalizeComposition(!0)},t.prototype.keydown=function(t){if(this._isComposing||this._isSendingComposition){if(229===t.keyCode)return!1;if(16===t.keyCode||17===t.keyCode||18===t.keyCode)return!1;this._finalizeComposition(!1)}return 229!==t.keyCode||(this._handleAnyTextareaChanges(),!1)},t.prototype._finalizeComposition=function(t){var e=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,this._clearTextareaPosition(),t){var n={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout(function(){if(e._isSendingComposition){e._isSendingComposition=!1;var t=void 0;t=e._isComposing?e._textarea.value.substring(n.start,n.end):e._textarea.value.substring(n.start),e._terminal.handler(t)}},0)}else{this._isSendingComposition=!1;var r=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._terminal.handler(r)}},t.prototype._handleAnyTextareaChanges=function(){var t=this,e=this._textarea.value;setTimeout(function(){if(!t._isComposing){var n=t._textarea.value.replace(e,"");n.length>0&&t._terminal.handler(n)}},0)},t.prototype.updateCompositionElements=function(t){var e=this;if(this._isComposing){if(this._terminal.buffer.isCursorInViewport){var n=Math.ceil(this._terminal.charMeasure.height*this._terminal.options.lineHeight),r=this._terminal.buffer.y*n,i=this._terminal.buffer.x*this._terminal.charMeasure.width;this._compositionView.style.left=i+"px",this._compositionView.style.top=r+"px",this._compositionView.style.height=n+"px",this._compositionView.style.lineHeight=n+"px";var o=this._compositionView.getBoundingClientRect();this._textarea.style.left=i+"px",this._textarea.style.top=r+"px",this._textarea.style.width=o.width+"px",this._textarea.style.height=o.height+"px",this._textarea.style.lineHeight=o.height+"px"}t||setTimeout(function(){return e.updateCompositionElements(!0)},0)}},t.prototype._clearTextareaPosition=function(){this._textarea.style.left="",this._textarea.style.top=""},t}();e.CompositionHelper=r},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){var n=t.call(this)||this;return n._maxLength=e,n._array=new Array(n._maxLength),n._startIndex=0,n._length=0,n}return i(e,t),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(t){if(this._maxLength!==t){for(var e=new Array(t),n=0;n<Math.min(t,this.length);n++)e[n]=this._array[this._getCyclicIndex(n)];this._array=e,this._maxLength=t,this._startIndex=0}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(t){if(t>this._length)for(var e=this._length;e<t;e++)this._array[e]=void 0;this._length=t},enumerable:!0,configurable:!0}),e.prototype.get=function(t){return this._array[this._getCyclicIndex(t)]},e.prototype.set=function(t,e){this._array[this._getCyclicIndex(t)]=e},e.prototype.push=function(t){this._array[this._getCyclicIndex(this._length)]=t,this._length===this._maxLength?(this._startIndex++,this._startIndex===this._maxLength&&(this._startIndex=0),this.emit("trim",1)):this._length++},e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(e){for(var i=t;i<this._length-e;i++)this._array[this._getCyclicIndex(i)]=this._array[this._getCyclicIndex(i+e)];this._length-=e}if(n&&n.length){for(i=this._length-1;i>=t;i--)this._array[this._getCyclicIndex(i+n.length)]=this._array[this._getCyclicIndex(i)];for(i=0;i<n.length;i++)this._array[this._getCyclicIndex(t+i)]=n[i];if(this._length+n.length>this.maxLength){var o=this._length+n.length-this.maxLength;this._startIndex+=o,this._length=this.maxLength,this.emit("trim",o)}else this._length+=n.length}},e.prototype.trimStart=function(t){t>this._length&&(t=this._length),this._startIndex+=t,this._length-=t,this.emit("trim",t)},e.prototype.shiftElements=function(t,e,n){if(!(e<=0)){if(t<0||t>=this._length)throw new Error("start argument out of range");if(t+n<0)throw new Error("Cannot shift elements in list beyond index 0");if(n>0){for(var r=e-1;r>=0;r--)this.set(t+r+n,this.get(t+r));var i=t+e+n-this._length;if(i>0)for(this._length+=i;this._length>this.maxLength;)this._length--,this._startIndex++,this.emit("trim",1)}else for(r=0;r<e;r++)this.set(t+r+n,this.get(t+r))}},e.prototype._getCyclicIndex=function(t){return(this._startIndex+t)%this.maxLength},e}(n(0).EventEmitter);e.CircularList=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),s=function(t){function e(e){var n=t.call(this)||this;return n._terminal=e,n._normal=new o.Buffer(n._terminal,!0),n._normal.fillViewportRows(),n._alt=new o.Buffer(n._terminal,!1),n._activeBuffer=n._normal,n.setupTabStops(),n}return i(e,t),Object.defineProperty(e.prototype,"alt",{get:function(){return this._alt},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal},enumerable:!0,configurable:!0}),e.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._alt.clear(),this._activeBuffer=this._normal,this.emit("activate",{activeBuffer:this._normal,inactiveBuffer:this._alt}))},e.prototype.activateAltBuffer=function(){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(),this._activeBuffer=this._alt,this.emit("activate",{activeBuffer:this._alt,inactiveBuffer:this._normal}))},e.prototype.resize=function(t,e){this._normal.resize(t,e),this._alt.resize(t,e)},e.prototype.setupTabStops=function(t){this._normal.setupTabStops(t),this._alt.setupTabStops(t)},e}(n(0).EventEmitter);e.BufferSet=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,